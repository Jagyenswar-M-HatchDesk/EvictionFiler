@page "/court"
@* @using EvictionFiler.Application.DTOs.CourtDto *@
@using EvictionFiler.Application.DTOs.CourtDto
@using EvictionFiler.Application.DTOs.PaginationDto
@using EvictionFiler.Application.Interfaces.IServices
@using EvictionFiler.Client.Jwt
@using EvictionFiler.Client.SpinnerService
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject ICourtService courtService
@inject SpinnerService SpinnerService
@inject JwtAuthStateProviders _authStateProvider
@inject NavigationManager navManager
<h3>Court</h3>

<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
<style>
    

    .btn-primary {
        background-color: #1F365D;
        border-color: #1F365D;
    }

    .offcanvas.show {
        transform: translateX(0%);
    }

    .offcanvas {
        transform: translateX(100%);
        width: 500px !important;
    }

    .color-text {
        color: #1F365D;
    }

    table.table thead th {
        color: #1F365D;
        background: #F2F0EC; /* same as Users table */
        margin-bottom: 0px !important;
    }
   
    /* Hover effect for rows */
    .table-hover tbody tr:hover {
        background-color: #e6e6e6 !important; /* light gray */
        transition: background-color 0.2s ease-in-out;
    }

    .table-hover tbody tr:hover {
        cursor: pointer;
    }

    th.sticky, td.sticky {
        position: sticky;
        right: 0;
        background: #F2F0EC;
        z-index: 2;
        text-align: center;
    }

    th.sticky {
        z-index: 3;
    }

</style>

<body class="p-4">
    <nav aria-label="breadcrumb" class="mt-2">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/dashboard">Home</a></li>
            <li class="breadcrumb-item ">Courts</li>
         
        </ol>
    </nav>

    @* <div class="container p-4 rounded shadow-sm bg-white"> *@
        <!-- Header -->
       

        @* <!-- Add Button + Search -->
        <div class="g-2 mb-3 d-flex justify-content-between align-items-center">
            <button class="btn bg-navy text-white" style="font-size:14px">
                <i class="fa fa-plus me-1"></i> Add New
            </button>
            <div class="position-relative">
                <input class="form-control border-navy  text-navy" style="border-color: #020336 ; font-size:14px" placeholder="Search.." />
                <button class="btn position-absolute top-50 end-0 translate-middle-y text-navy" type="button">
                    <i class="fa fa-search"></i>
                </button>
            </div>
        </div> *@
        <div class="container p-4 rounded shadow-sm">

            <div class="d-flex justify-content-between align-items-center mb-4">
                <h5 class="m-0 fw-bold text-navy" style="font-size:14px">Courts</h5>
        </div>

        <CreateCourt @ref="createCourtRef" OnSubmit="OnCourtCreated" />
        <EditCourt @ref="editCourtRef" OnSubmit="OnCourtEdited" />
        <DeleteConfirmation @ref="deleteConfirmation" OnConfirm="DeleteCourtConfirmed" />
            <!-- Search Filters -->
            <div class="g-2 mb-3 d-flex justify-content-between align-items-center">
                <!-- Four default search boxes -->
            <button class="btn btn-primary" @onclick="() => createCourtRef?.Show()">Add New</button>
                <div class="position-relative ">
                    <input class="form-control border border-primary text-navy" placeholder="Search.." @bind="searchTerm" @bind:event="oninput" />
                    <button class="btn position-absolute top-50 end-0 translate-middle-y text-navy" type="button">
                  
                        <i class="fa fa-search"></i>
                    </button>
                </div>

            </div>
        </div>
        
        
        <div class="table-responsive mb-3">
            <table class="table table-hover align-middle text-center" style="font-size:14px" >
                <thead>
                    <tr>
                        <th>Courts</th>
                        <th>Address</th>
                       
                        <th>Phone</th>
                    
                        <th>Notes</th>

                    <th class="sticky ">Action</th>
                    </tr>
                </thead>
        
                 @if (courts == null)
                      {
                <tr><td colspan="5"><em>Loading...</em></td></tr>
                         }
                        else if (courts.Count == 0)
                           {
                     <tr><td colspan="5" class="text-muted">No courts available.</td></tr>
                             }
                             
                     else
                         {           
                 
                        @foreach (var court in courts)
                        {
                            <tr>
                                <td>@court.Court</td>
                                <td>@court.Address</td>
                                <td>@court.Phone</td>
                                <td>@court.Notes</td>
                       
                        <td class="sticky">
                            <i class="fa-solid fa-pen-to-square text-navy me-3" @onclick="() => editCourtRef.Show(court)"  style="cursor: pointer;" title="Edit"></i>
                            <i class="fa-solid fa-trash-can text-danger" @onclick="() => DeleteCourt(court)" style="cursor: pointer;" title="Delete"></i>
                        </td>
                    </tr>

                        @* </td>
                                <td class="sticky">
                                    <i class="fa-solid fa-pen-to-square text-navy me-3" @onclick="() => ShowEditCourt(court.Id)" style="cursor: pointer;" title="Edit"></i>
                                    <i class="fa-solid fa-trash-can text-danger" @onclick="() => DeleteCourt(court.Id)" style="cursor: pointer;" title="Delete"></i>
                                </td>
                            </tr> *@
                        }
                    }
                    @* else
                    {
                        <tr>
                            <td colspan="5" class="text-muted">No courts found.</td>
                        </tr>
                    } *@
               
                </table>
        <!-- Delete Confirmation Modal -->
        @* <div class="modal fade @(showDeleteModal ? "show d-block" : "")" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close btn-close-white" @onclick="CancelDelete"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete <strong>@selectedCourt?.Court</strong>?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                        <button class="btn btn-danger" @onclick="DeleteCourtConfirmed">Delete</button>
                    </div>
                </div>
            </div>
        </div> *@



                </div>
          
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
        </body>

@code {
    private List<CourtInfosDto> courts=new();
    private string searchTerm = string.Empty;
    private IEnumerable<CourtInfosDto> allCourts = new List<CourtInfosDto>();
    private bool showModal = false;
    private string modalTitle = "Add Court";
    private CourtInfosDto newCourt = new();
    private EditCourt editCourtRef;
    private DeleteConfirmation deleteConfirmation;
    private CourtInfosDto? selectedCourt;
    // private bool showDeleteModal = false;
    // private CourtInfosDto? selectedCourt;





    private IEnumerable<CourtInfosDto> cases =>
         string.IsNullOrWhiteSpace(searchTerm)
             ? allCourts
             : allCourts.Where(c =>
                 (!string.IsNullOrWhiteSpace(c.Court) && c.Court.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                 (!string.IsNullOrWhiteSpace(c.Address) && c.Address.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                 (!string.IsNullOrWhiteSpace(c.Phone) && c.Phone.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                 (!string.IsNullOrWhiteSpace(c.Notes) && c.Notes.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
             );

    protected override async Task OnInitializedAsync()
    {
        courts = await courtService.GetAllCourtDataAsync();
        allCourts = courts;
}
    private CreateCourt createCourtRef;

    private async Task OnCourtCreated(CourtInfosDto court)
    {
        // refresh the court list
        courts = await courtService.GetAllCourtDataAsync();
        allCourts = courts;
        StateHasChanged();
    }
    private async Task OnCourtEdited(CourtInfosDto court)
    {
        // Refresh the court list after editing
        courts = await courtService.GetAllCourtDataAsync();
        allCourts = courts;
        StateHasChanged();
    }

    private void DeleteCourt(CourtInfosDto court)
    {
        selectedCourt = court;
        deleteConfirmation.Show($"Are you sure you want to delete '{court.Court}'?");
    }

    private async Task DeleteCourtConfirmed()
    {
        if (selectedCourt != null)
        {
            SpinnerService.Show();
            await courtService.DeleteCourtAsync(selectedCourt.Id);
            SpinnerService.Hide();

            // Refresh list
            courts = await courtService.GetAllCourtDataAsync();
            allCourts = courts;

            selectedCourt = null;
            StateHasChanged();
        }
    }
    // private void DeleteCourt(CourtInfosDto court)
    // {
    //     selectedCourt = court;
    //     showDeleteModal = true;
    // }

    // private void CancelDelete()
    // {
    //     showDeleteModal = false;
    //     selectedCourt = null;
    // }

    // private async Task DeleteCourtConfirmed()
    // {
    //     if (selectedCourt != null)
    //     {
    //         SpinnerService.Show();
    //         await courtService.DeleteCourtAsync(selectedCourt.Id);
    //         SpinnerService.Hide();

    //         showDeleteModal = false;
    //         selectedCourt = null;

    //         Refresh list
    //         courts = await courtService.GetAllCourtDataAsync();
    //         allCourts = courts;
    //         StateHasChanged();
    //     }
    // }

     // private void ShowAddCourtModal()
        // {
        //     newCourt = new CourtInfosDto(); reset
        //     modalTitle = "Add New Court";
        //     showModal = true;
        // }

        // private void CloseModal()
        // {
        //     showModal = false;
        // }

        //      private async Task SaveCourt()
        // {
        //     Call your service to save the court
        //     await courtService.AddCourtAsync(newCourt);

        //     Refresh list
        //     courts = await courtService.GetAllCourtDataAsync();
        //     allCourts = courts;

        //     CloseModal();
        // }

    // private void EditCourt(CourtInfosDto court)
    // {
    //     navigate or open modal
    //     Console.WriteLine($"Editing {court.Court}");
    // }

   
    // private PaginationDto<EditToCourtDto> pagedCourts;
    // private int currentPage = 1;
    // private int pageSize = 10;
    // private string searchTerm = "";
    // private bool isAdmin = false;
    // private string? loggedInUserId;
    // private bool _showCreateCourt = false;
    // private bool _showEditCourt = false;
    // private EditToCourtDto _editCourtModel = new();

    // protected override async Task OnInitializedAsync()
    // {
    //     SpinnerService.Show();
    //     var authState = await _authStateProvider.GetAuthenticationStateAsync();
    //     var user = authState.User;
    //     if (user.Identity?.IsAuthenticated == true)
    //     {
    //         loggedInUserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
    //         isAdmin = user.Claims.Any(c => c.Type == ClaimTypes.Role && c.Value == "Admin");
    //     }
    //     await LoadCourts();
    //     SpinnerService.Hide();
    // }
    // private async Task LoadCourts()
    // {
    //     pagedCourts = await courtService.GetAllCourtsAsync(currentPage, pageSize, searchTerm, loggedInUserId, isAdmin);
    //     StateHasChanged();
    // }
    // [Parameter]

    // private PaginationDsto<CourtInfoDto> pagedCourts;
    // private int currentPage = 1;
    // private int pageSize = 10;
}

