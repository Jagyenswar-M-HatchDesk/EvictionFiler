@* 
 @page "/"
 @page "/login"
@rendermode InteractiveServer
@using EvictionFiler.Server.Components.Layout
@* @using Multi_Talent_Architect.Services *@
@* @inject AuthService AuthService *
@inject NavigationManager Nav
@layout Aut
<PageTitle>Login</PageTitle>

<div class="d-flex justify-content-center align-items-center min-vh-100 bg-gradient" style="background: linear-gradient(135deg, #6a11cb, #2575fc);">
    <div class="card shadow-lg p-5 rounded-4" style="width: 100%; max-width: 500px; position: relative; background:#f2f0ec">

        <!-- Logo -->
        <img src="images/PHOTO-2025-06-18-02-45-29.jpg" alt="Logo" style="width: 80px; position: absolute; top: 20px; left: 20px;" />

        <h2 class="text-center mb-4">Sign In</h2>

        <EditForm Model="login" OnValidSubmit="HandleLogin" FormName="LoginForm">
            <div class="mb-3">
                <label class="form-label">Email</label>
                <InputText @bind-Value="login.Email" class="form-control" placeholder="Enter your email" />
            </div>

            <div class="mb-4">
                <label class="form-label">Password</label>
                <InputText @bind-Value="login.Password" class="form-control" placeholder="Enter your password" type="password" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Login</button>
        </EditForm>

        <div class="text-center mt-4">
            <small>
                Don't have an account?
                <a href="/register" class="text-decoration-none fw-semibold">Register</a>
            </small>
        </div>
    </div>
</div>

@code {
    private LoginModel login = new();

    private async Task HandleLogin()
    {
        // var success = await AuthService.LoginAsync(login.Email, login.Password);
        // if (success)
        //     Nav.NavigateTo("/home");
        // else
        //     Console.WriteLine("Login failed");
    }

    class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }
}
 *@
 @page "/"
@layout Aut

@using EvictionFiler.Application.Constants
@using EvictionFiler.Application.DTOs
@using EvictionFiler.Application.DTOs.UserDto
@using EvictionFiler.Server.Components.Layout
@using EvictionFiler.Server.Services
@using Microsoft.AspNetCore.WebUtilities

@rendermode InteractiveServer
@inject AuthService _authService
@inject NavigationManager Navigation
<style>
    /* ------------------------------
       General Layout and Background
    ---------------------------------*/
    body {
        background-color: #f7f7f7 !important;
        margin: 0 !important;
        
    }

    /* Centers the login form responsively */
    .login-container {
        width: 100% !important;
        max-width: 655px !important;
        border-radius: 8px;
    }

    .login-logo {
        width: 11.1rem;
    }

    .footer-icon {
        width: 94px;
        height: 31px;
    }

    .loginContainer-footer {
        display: flex;
        width: 100%;
        border-radius: 0rem 0rem 0.5rem 0.5rem;
        background: var(--Gray-500, #0C111D);
        justify-content: center;
        align-items: center;
        height: 4.5625rem;
        padding: 0rem 10.1875rem;
    }

    .forgot-container {
        width: 540px !important;
        padding: 48px !important;
        border-radius: 8px;
    }

    /* ------------------------------
       Typography Styles
    ---------------------------------*/

    .display-sub {
        font-family: Montserrat;
        font-size: 26px;
        font-style: normal;
        font-weight: 400;
        line-height: normal;
        letter-spacing: -1px;
    }

    .body-medium {
        /* font-family: Montserrat !important; */
        font-size: 14px !important;
        font-style: normal !important;
        font-weight: 500 !important;
        line-height: 18px !important;
    }

    .body-bold {
        font-weight: 700 !important;
        font-size: 14px !important;
        line-height: 1.3 !important;
        text-decoration: underline !important;
        text-decoration-style: solid !important;
        text-decoration-thickness: 1px !important;
        text-underline-offset: 2px !important;
    }

    .title-h4-semi-bold {
        font-weight: 600 !important;
        font-size: 16px !important;
        line-height: 1.5 !important;
        text-align: center !important;
    }

    /* Alert styling */
    .custom-alert {
        max-width: auto !important;
        height: auto !important;
        padding: 8px 12px !important;
        border-radius: 8px !important;
        border: 1px solid red !important;
        background-color: #FFFBFA !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        gap: 10px !important;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.075) !important;
    }

    /* Authenticator layout */
    .authenticator-wrapper {
        height: 100vh !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        padding: 1rem !important;
        overflow: hidden !important;
    }

    @@media (max-width: 768px) {
        .authenticator-wrapper

    {
        height: auto !important;
        align-items: flex-start !important;
        overflow: auto !important;
    }

    }

    /* Remove default outline on focus */
    .no-outline:focus {
        outline: none !important;
        box-shadow: none !important; /* Optional: removes Bootstrap's focus shadow */
    }

</style>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <div class="d-flex flex-column justify-content-center align-items-center vh-100">
        <div class="card p-5 pb-4 shadow mb-0 border-0 login-container" style="background:#f2f0ec;padding-bottom: 48px !important;">
            <div class="text-start mb-3">
                <img src="images/PHOTO-2025-06-18-02-45-29.jpg" class="img-fluid login-logo" alt="Logo" style="width: 150px; position: absolute; top: 0px; left: 20px;" />
            </div>

            <div class="text-start mb-3 display-sub " style="margin-left: 180px !important; margin:-20px; color: #1F365D;">
                Login to your account
            </div>

            @if (AllErrors.Any())
            {
                <div class="mt-3 mb-3 custom-alert text-danger text-center" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-2" aria-hidden="true"></i>
                    <ul class="m-0 p-0 list-unstyled">
                        @foreach (var error in AllErrors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </div>
            }

            <div class="mb-3 " style="margin-top: 55px;color: #1F365D;">
                <label class="form-label body-medium" for="emailInput">Username or e-mail <span class="text-danger">*</span></label>
                <InputText id="emailInput" @bind-Value="loginModel.Username" class="form-control form-control-lg body-medium text-gray-300 no-outline" placeholder="Name@company.com" autocomplete="username" aria-label="Email" />
                @if (!string.IsNullOrWhiteSpace(UsernameError))
                {
                    <div class="text-danger body-small mt-1">@UsernameError</div>
                }
            </div>

            <div class="mb-3 " style="color: #1F365D;">
                <label class="form-label body-medium"  for="passwordInput">Password <span class="text-danger">*</span></label>
                <InputText id="passwordInput" @bind-Value="loginModel.Password" type="password"
                           class="form-control form-control-lg body-medium text-gray-300 no-outline"
                           placeholder="Password" autocomplete="current-password"
                           aria-label="Password" />

                @if (!string.IsNullOrWhiteSpace(PasswordError))
                {
                    <div class="text-danger body-small mt-1">@PasswordError</div>
                }
            </div>

            <div class="mb-3 text-end" >
                <a href="/forgotpassword" class="body-bold text-brand-100" style="color: #1F365D;">Forgot password?</a>
            </div>

            <div class="d-grid" style="background: #1F365D; border-radius: 7px;">
                <button type="submit"
                        class="btn bg-brand-100 title-h4-semi-bold text-white d-flex justify-content-center align-items-center gap-2"
                        >
                    @if (IsProcessing)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Sign in...</span>
                    }
                    else
                    {
                        <span>Sign in</span>
                    }
                </button>
            </div>
        </div>

        @* <div class="card shadow rounded-top-0 bg-gray-500 login-container loginContainer-footer" style="background:#1F365D !important;">
            @* <div class="d-flex justify-content-center align-items-center gap-3 ">
                <img src="images/AppStore.svg" class="img-fluid footer-icon" alt="App Store" />
                <img src="images/PlayStore.png" class="img-fluid footer-icon" alt="Play Store" />
            </div> *
        </div>  *@

        <div class="mt-3 text-center">
            <div class="body-medium">
                Don't have an account?
                <a href="/contact" style="color: #1F365D;"class="text-brand-100">Sign Up</a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private LoginViewModel loginModel = new();
    private string? ErrorMessage;
    private string? UsernameError;
    private string? PasswordError;
    private bool IsProcessing = false;

    private List<string> AllErrors = new();

    private async Task HandleLogin()
    {
        AllErrors.Clear();
        IsProcessing = true;

        try
        {
            if (string.IsNullOrWhiteSpace(loginModel.Username))
            {
                AllErrors.Add(AppMessages.EmailRequired);
                return;
            }
            if (string.IsNullOrWhiteSpace(loginModel.Password))
            {
                AllErrors.Add(AppMessages.PasswordRequired);
                return;
            }

            var result = await _authService.LoginAsync(loginModel);
            if (result)
            {
                Navigation.NavigateTo("/dashboard", true);
            }
            else
            {
                AllErrors.Add(AppMessages.InvalidCredentials);
            }
        }
        catch (Exception ex)
        {
            AllErrors.Add(AppMessages.UnexpectedError);
            Console.Error.WriteLine(ex);
        }
        finally
        {
            IsProcessing = false;
        }
    }
}