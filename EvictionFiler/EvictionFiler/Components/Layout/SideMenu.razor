@rendermode InteractiveServer
@inject NavigationManager nav
@using System.Security.Claims

@using EvictionFiler.Server
@using EvictionFiler.Server.Services
 @using Microsoft.AspNetCore.Components.Authorization
@* @inject SpinnerService SpinnerService *@
@inject AuthenticationStateProvider AuthenticationStateProvider 
@inject AuthService _authService
@inject NavigationManager Navigation


<div class="d-flex navbar-custom">
    @if (!isSettingsMode)
    {
        <nav class="sidebar d-flex flex-column vh-100 @(isCollapsed ? "collapsed" : "")">
            @if (isCollapsed)
            {
                <div class="fw-bold"
                     style="color: #1F365D; font-size: 20px; margin-left: 25px; margin-top:23px">
                    EF
                </div>
            }
            else
            {
                <img src="images/PHOTO-2025-06-18-02-45-29.jpg"
                     alt="Logo"
                     class="logo-img" />
            }

          
            <div class="flex-grow-1 flex-column v-scroll-auto scroll-hidden">
                <div class="nav flex-column">
                    <button class="create-case-btn" >
                        <i class="fa fa-plus icon-plus"></i>
                        <span class="hide-on-collapse ">Create New Case</span>
                    </button>
                </div>



             
                    <div class="nav flex-column">
                        <a   title="Dashboard" class="sidebar-link text-decoration-none p-2 @(activeMenu == "Home" || IsExpanded("Home") || (isCollapsed && IsSubmenuActive("Home")) ? "active" : "")"
                           @onclick="@(() => ToggleMenu("Home"))">

                            <i class="fa-solid fa-gauge menu-icon" ></i>

                            <span class="hide-on-collapse menu-label" > Dashboard</span>

                        </a>
                        
                    </div>

                <div class="nav flex-column "
                     @onmouseover="@(() => HoveredMenu = "ManageCases")"
                     @onmouseout="@(() => HoveredMenu = null)">
                        <a title="Cases" class="sidebar-link text-decoration-none p-2 @(IsExpanded("ManageCases") || (isCollapsed && IsSubmenuActive("ManageCases")) ? "active" : "")" @onclick="@(() => ToggleMenu("ManageCases"))">
                            <i class="fa-solid fa-scale-balanced menu-icon" style="margin-left:0px !important;"></i>

                            <span class="hide-on-collapse menu-label" style="margin-left:13px !important;">Legal Cases</span>
                        </a>

                    </div>

                    @if (!isCollapsed && IsExpanded("ManageCases"))
                    {
                        <div class="ms-3 submenu-container">
                            @foreach (var submenu in submenuMap["ManageCases"])
                            {
                            <a class="submenu-link text-decoration-none @(activeMenu == submenu.Title ? "active-submenu" : "")"
                                   @onclick="@(() => NavigateToCases(submenu.Title))">

                                    <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                    <span class="submenu-text hide-on-collapse">@submenu.Title</span>
                                </a>
                            }
                        </div>
                    }
                    else if (isCollapsed && HoveredMenu == "ManageCases")
                    {
                    <div class="flyout-menu">
                            @foreach (var submenu in submenuMap["ManageCases"])
                            {
                            <a class="dropdown-item  @(activeMenu == submenu.Title ? "active" : "")"
                               @onclick="@(() => NavigateToCases(submenu.Title))">

                                    <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                    <span class="submenu-text ">@submenu.Title</span>
                                </a>
                            }
                        </div> 

             @*        <div class="flyout-menu">
                        <a href="/Home/Live" class="dropdown-item @(activeMenu == "Live Data" ? "active" : "")"
                           @onclick="@(() => SetActive("Live Data"))">Live Data</a>
                        <a href="/Calendar/Calendar" class="dropdown-item @(activeMenu == "Calender" ? "active" : "")"
                           @onclick="@(() => SetActive("Calender"))">Calendar</a>
                        <a href="/NotImplemented" class="dropdown-item @(activeMenu == "Attendance" ? "active" : "")"
                           @onclick="@(() => SetActive("Attendence"))">Attendance</a>
                        <a href="/Pegboard" class="dropdown-item @(activeMenu == "Pegboard" ? "active" : "")"
                           @onclick="@(() => SetActive("Pegboard"))">Pegboard</a>
                        <a href="/NotImplemented" class="dropdown-item @(activeMenu == "Audit" ? "active" : "")"
                           @onclick="@(() => SetActive("Audit"))">Audit</a>
                    </div> *@
                    }


                @if (userRole == "Admin")
                {
                    <!-- MANAGE -->
                    <div class="nav flex-column ">
                        <a title="User" class="sidebar-link text-decoration-none p-2 @(IsExpanded("Users") || (isCollapsed && IsSubmenuActive("Users")) ? "active" : "")"
                        @onclick="@(() => ToggleMenu("Users"))">
                            <i class="fa-solid fa-user menu-icon"></i>

                            <span class="hide-on-collapse menu-label" >Users</span>
                        </a>

                    </div>
                }

                    <div class="nav flex-column ">
                        <a  title="Client" class="sidebar-link text-decoration-none p-2 @(IsExpanded("Client") || (isCollapsed && IsSubmenuActive("Client")) ? "active" : "")"
                           @onclick="@(() => ToggleMenu("Client"))">
                            <i class="fa-solid fa-user-tie menu-icon"></i>

                            <span class="hide-on-collapse menu-label">Clients</span>
                        </a>

                    </div>
                @if (userRole == "Admin")
                {
                    <!-- Reporting -->
                <div class="nav flex-column "
                     @onmouseover="@(() => HoveredMenu = "Reporting")"
                     @onmouseout="@(() => HoveredMenu = null)">
                        <a title="Reporting" class="sidebar-link text-decoration-none p-2 @(IsExpanded("Reporting") || (isCollapsed && IsSubmenuActive("Reporting")) ? "active" : "")"
                           @onclick="@(() => ToggleMenu("Reporting"))">
                            <i class="fa-solid fa-chart-line menu-icon" ></i>
                            <span class="hide-on-collapse menu-label">Reporting</span>
                        </a>
                    </div>

                @if (!isCollapsed && IsExpanded("Reporting"))
                {
                    <div class="ms-3 submenu-container">
                        @foreach (var submenu in submenuMap["Reporting"])
                        {
                            <a class="submenu-link text-decoration-none @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text hide-on-collapse">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }
                else if (isCollapsed && HoveredMenu == "Reporting")
                {
                    <div class="flyout-menu">
                        @foreach (var submenu in submenuMap["Reporting"])
                        {
                            <a class="dropdown-item  @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text ">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }

                    <!-- Accounting -->
                <div class="nav flex-column "
                     @onmouseover="@(() => HoveredMenu = "Accounting")"
                     @onmouseout="@(() => HoveredMenu = null)">
                        <a title="Accounting" class="sidebar-link text-decoration-none p-2 @(IsExpanded("Accounting") || (isCollapsed && IsSubmenuActive("Accounting")) ? "active" : "")"
                           @onclick="@(() => ToggleMenu("Accounting"))">
                            <i class="fa-solid fa-file-invoice-dollar menu-icon"></i>
                            <span class="hide-on-collapse menu-label">Accounting</span>
                        </a>
                    </div>

                @if (!isCollapsed && IsExpanded("Accounting"))
                {
                    <div class="ms-3 submenu-container">
                        @foreach (var submenu in submenuMap["Accounting"])
                        {
                            <a class="submenu-link text-decoration-none @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text hide-on-collapse">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }
                else if (isCollapsed && HoveredMenu == "Accounting")
                {
                    <div class="flyout-menu">
                        @foreach (var submenu in submenuMap["Accounting"])
                        {
                            <a class="dropdown-item  @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text ">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }

                    <!-- Maintenance -->
                <div class="nav flex-column "
                     @onmouseover="@(() => HoveredMenu = "Maintenance")"
                     @onmouseout="@(() => HoveredMenu = null)">
                        <a title="Maintenance" class="sidebar-link text-decoration-none p-2 @(IsExpanded("Maintenance") || (isCollapsed && IsSubmenuActive("Maintenance")) ? "active" : "")"
                           @onclick="@(() => ToggleMenu("Maintenance"))">
                            <i class="fa-solid fa-screwdriver-wrench menu-icon"></i>
                            <span class="hide-on-collapse menu-label">Maintenance</span>
                        </a>
                    </div>


                @if (!isCollapsed && IsExpanded("Maintenance"))
                {
                    <div class="ms-3 submenu-container">
                        @foreach (var submenu in submenuMap["Maintenance"])
                        {
                            <a class="submenu-link text-decoration-none @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text hide-on-collapse">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }
                else if (isCollapsed && HoveredMenu == "Maintenance")
                {
                    <div class="flyout-menu">
                        @foreach (var submenu in submenuMap["Maintenance"])
                        {
                            <a class="dropdown-item  @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text ">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }


                    <!-- Process Server -->
                <div class="nav flex-column "
                     @onmouseover="@(() => HoveredMenu = "Process")"
                     @onmouseout="@(() => HoveredMenu = null)">
                        <a title="Process Server" class="sidebar-link text-decoration-none p-2 @(IsExpanded("Process") || (isCollapsed && IsSubmenuActive("Process")) ? "active" : "")"
                           @onclick="@(() => ToggleMenu("Process"))">
                            <i class="fa-solid fa-user-shield menu-icon"></i>
                            <span class="hide-on-collapse menu-label">Process Server</span>
                        </a>
                    </div>
                @if (!isCollapsed && IsExpanded("Process"))
                {
                    <div class="ms-3 submenu-container">
                        @foreach (var submenu in submenuMap["Process"])
                        {
                            <a class="submenu-link text-decoration-none @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text hide-on-collapse">@submenu.Title</span>
                            </a>
                        }
                    </div><SideMenu />
                }
                else if (isCollapsed && HoveredMenu == "Process")
                {
                    <div class="flyout-menu">
                        @foreach (var submenu in submenuMap["Process"])
                        {
                            <a class="dropdown-item  @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text ">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }

                    <!-- Case Transfer -->
                <div class="nav flex-column "
                     @onmouseover="@(() => HoveredMenu = "Transfer")"
                     @onmouseout="@(() => HoveredMenu = null)">
                        <a   title="Case Transfer" class="sidebar-link text-decoration-none p-2 @(IsExpanded("Transfer") || (isCollapsed && IsSubmenuActive("Transfer")) ? "active" : "")"
                           @onclick="@(() => ToggleMenu("Transfer"))">
                            <i class="fa-solid fa-right-left menu-icon" ></i>
                            <span class="hide-on-collapse menu-label">Case Transfer</span>
                        </a>
                    </div>

                @if (!isCollapsed && IsExpanded("Transfer"))
                {
                    <div class="ms-3 submenu-container">
                        @foreach (var submenu in submenuMap["Transfer"])
                        {
                            <a class="submenu-link text-decoration-none @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text hide-on-collapse">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }
                else if (isCollapsed && HoveredMenu == "Transfer")
                {
                    <div class="flyout-menu">
                        @foreach (var submenu in submenuMap["Transfer"])
                        {
                            <a class="dropdown-item  @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text ">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }

     

                    <!-- NYCEF Email -->
                <div class="nav flex-column "
                     @onmouseover="@(() => HoveredMenu = "NYCEFEmail")"
                     @onmouseout="@(() => HoveredMenu = null)">
                        <a  title=" NYCEEF Email Async" class="sidebar-link text-decoration-none p-2 @(IsExpanded("NYCEFEmail") || (isCollapsed && IsSubmenuActive("Drafting")) ? "active" : "")"
                           @onclick="@(() => ToggleMenu("NYCEFEmail"))">
                            <i class="fa-solid fa-book menu-icon"></i>
                            <span class="hide-on-collapse menu-label">NYCEEF Email Sync</span>
                        </a>
                    </div>

                @if (!isCollapsed && IsExpanded("NYCEFEmail"))
                {
                    <div class="ms-3 submenu-container">
                        @foreach (var submenu in submenuMap["NYCEFEmail"])
                        {
                            <a class="submenu-link text-decoration-none @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text hide-on-collapse">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }
                else if (isCollapsed && HoveredMenu == "NYCEFEmail")
                {
                    <div class="flyout-menu">
                        @foreach (var submenu in submenuMap["NYCEFEmail"])
                        {
                            <a class="dropdown-item  @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text ">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }
                    <!-- Print Forms -->
                <div class="nav flex-column "
                     @onmouseover="@(() => HoveredMenu = "FormsPrint")"
                     @onmouseout="@(() => HoveredMenu = null)">
                        <a title=" Forms Print" class="sidebar-link text-decoration-none p-2 @(IsExpanded("FormsPrint") || (isCollapsed && IsSubmenuActive("FormsPrint")) ? "active" : "")"
                           @onclick="@(() => ToggleMenu("FormsPrint"))">
                            <i class="fa-solid fa-print menu-icon"></i>
                            <span class="hide-on-collapse menu-label">Print Forms</span>
                        </a>
                    </div>




                @if (!isCollapsed && IsExpanded("FormsPrint"))
                {
                    <div class="ms-3 submenu-container">
                        @foreach (var submenu in submenuMap["FormsPrint"])
                        {
                            <a class="submenu-link text-decoration-none @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text hide-on-collapse">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }
                else if (isCollapsed && HoveredMenu == "FormsPrint")
                {
                    <div class="flyout-menu">
                        @foreach (var submenu in submenuMap["FormsPrint"])
                        {
                            <a class="dropdown-item  @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToReporting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text ">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }
                }

                <div class="nav flex-column "
                     @onmouseover="@(() => HoveredMenu = "Drafting")"
                     @onmouseout="@(() => HoveredMenu = null)">
                    <a title="Manage Forms" class="sidebar-link text-decoration-none p-2 @(IsExpanded("Drafting") || (isCollapsed && IsSubmenuActive("Forms")) ? "active" : "")"
                       @onclick="@(() => ToggleMenu("Drafting"))">
                          <i class="fa-solid fa-drafting-compass"></i>


                        <span class="hide-on-collapse menu-label">Drafting Library</span>
                        </a>

                    </div>

                @if (!isCollapsed && IsExpanded("Drafting"))
                {
                    <div class="ms-3 submenu-container">
                        @foreach (var submenu in submenuMap["Drafting"])
                        {
                            <a class="submenu-link text-decoration-none @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToDrafting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text hide-on-collapse">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }
                else if (isCollapsed && HoveredMenu == "Drafting")
                {
                    <div class="flyout-menu submenu-container">
                        @foreach (var submenu in submenuMap["Drafting"])
                        {
                            <a class="dropdown-item submenu-link text-decoration-none   @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToDrafting(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text ">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }

                @if (userRole == "Admin")
                {
                    <div class="nav flex-column "
                    @onmouseover="@(() => HoveredMenu = "Settings")"
                     @onmouseout="@(() => HoveredMenu = null)">
                    <a title="Manage Forms" class="sidebar-link text-decoration-none p-2 @(IsExpanded("Settings") || (isCollapsed && IsSubmenuActive("Forms")) ? "active" : "")"
                       @onclick="@(() => ToggleMenu("Settings"))">
                        <i class="fa-solid fa-gears"></i>


                        <span class="hide-on-collapse menu-label">Settings</span>
                    </a>

                </div>
                

                @if (!isCollapsed && IsExpanded("Settings"))
                {
                    <div class="ms-3 submenu-container">
                        @foreach (var submenu in submenuMap["Settings"])
                        {
                            <a class="submenu-link text-decoration-none @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToSettings(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text hide-on-collapse">@submenu.Title</span>
                            </a>
                        }
                    </div>
                    }
                
                else if (isCollapsed && HoveredMenu == "Settings")
                {
                    <div class="flyout-menu submenu-container">
                        @foreach (var submenu in submenuMap["Settings"])
                        {
                            <a class="dropdown-item submenu-link text-decoration-none   @(activeMenu == submenu.Title ? "active-submenu" : "")"
                               @onclick="@(() => NavigateToSettings(submenu.Title))">

                                <i class="@submenu.Icon submenu-icon" title="@submenu.Title"></i>
                                <span class="submenu-text ">@submenu.Title</span>
                            </a>
                        }
                    </div>
                }
                }

            </div>
         

            <hr style="color:gray" />
            <div class="profile-section mt-auto d-flex flex-column">
                <a class="sidebar-link text-decoration-none p-2 d-flex align-items-center justify-content-between"
                   @onclick="ToggleProfileOptions">
                    <div class="d-flex align-items-center">
                        <i class="fa-regular fa-user menu-icon"></i>
                        @if (!isCollapsed && Name != null)
                        {
                            <span class="hide-on-collapse menu-label ms-2">@Name</span>
                        }
                    </div>
                    @if (!isCollapsed)
                    {
                        <i class="fa-solid @(showProfileOptions ? "fa-chevron-up" : "fa-chevron-down")"></i>
                    }
                </a>

                <!-- Submenu -->
                @if (showProfileOptions)
                {
                    <div class="submenu-container @(isCollapsed ? "submenu-flyout" : "")">
                        <a href="/profile" class="dropdown-item text-dark d-flex align-items-center p-2">
                            <i class="fa-solid fa-id-badge me-2"></i> My Profile
                        </a>
                     
                        <a href="javascript:void(0);" class="dropdown-item text-dark d-flex align-items-center p-2"
                           @onclick="LogoutUser">
                            <i class="fa-solid fa-right-from-bracket me-2"></i> Logout
                        </a>
                    </div>
                }

            

                <!-- Settings & Collapse Button -->
                <div class="sidebar-bottom d-flex flex-column position-relative">
                    <a class="sidebar-link text-decoration-none p-2" @onclick="ToggleSettingsMode">
                        <i class="fa-solid fa-circle-question menu-icon"></i>
                        <span class="hide-on-collapse menu-label">Help/FAQ</span>
                    </a>
                    <div class="toggle-btns" @onclick="ToggleSidebar">
                        <i class="fas fa-angles-left"></i>
                    </div>
                </div>
            </div>

        </nav>

    }
</div>


@code {
    private bool showProfileOptions = false;
    Dictionary<string, bool> expandedMenus = new();
    private string userRole = "";
   
    public string Name { get; set; }

    bool IsSubmenuActive(string parentMenu) =>
        submenuMap.ContainsKey(parentMenu) &&
        submenuMap[parentMenu].Any(x => x.Title == activeMenu);


    string activeMenu = "";
    bool isCollapsed = false;
    private string HoveredMenu { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        

        if (user.Identity?.IsAuthenticated == true)
        {

            var roleClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
            if (roleClaim != null)
            {
                userRole = roleClaim.Value;
            }
            Name = user.Identity.Name ?? "User";
        }
        else
        {
            Name = "Guest";
        }

        string[] menus = {
    "Home", "ManageCases", "Users", "Client", "Drafting",
    "Reporting", "Accounting", "Maintenance",
    "Process", "Transfer", "FormsPrint","NYCEFEmail" , "Settings"
};
        foreach (var menu in menus)
        {
            expandedMenus[menu] = false;
        }

        expandedMenus["Organisation"] = true;
        activeMenu = "Tags";
        var uri = nav.Uri.ToLower();

        if (uri.EndsWith("/"))
        {
            activeMenu = "Home";
            expandedMenus["Home"] = false;
        }

    }




    void ToggleMenu(string menu)
    {
        if (!expandedMenus[menu])
            CollapseAll();

        expandedMenus[menu] = !expandedMenus[menu];
        switch (menu)
        {
            case "Home":
                nav.NavigateTo("/dashboard");
                break;
            case "ManageCases":
                nav.NavigateTo("/cases");
                break;
            case "Users":
                nav.NavigateTo("/users");
                break;
            case "Client":
                nav.NavigateTo("/clients");
                break;
            case "Drafting":
                
                break;
            case "Reporting":
                break;
            case "Accounting":
                break;
            case "Maintenance":
                break;
            case "Process":
                break;
            case "Transfer":
                break;
          
            case "FormsPrint":
                break;
            case "NYCEFEmail":
                break;
            case "Settings":
                break;

            default:
                nav.NavigateTo("/");
                break;
        }
    }

    private async Task LogoutUser()
    {
        await _authService.LogoutAsync();
        Navigation.NavigateTo("/", forceLoad: true); 
    }

    private void ToggleProfileOptions()
    {
        showProfileOptions = !showProfileOptions;
    }
    void ToggleSidebar()
    {
        if (isSettingsMode)
        {
            isSettingsMode = false;
        }
        isCollapsed = !isCollapsed;
    }

    void CollapseAll()
    {
        var keys = expandedMenus.Keys.ToList();
        foreach (var key in keys)
        {
            expandedMenus[key] = false;
        }
    }
    Dictionary<string, List<(string Title, string Icon)>> submenuMap = new()
{
    // Cases
     { "ManageCases", new()
    {
          ("Manage-Cases" , "fa-solid fa-handshake"),
        ("Dispossess", "fa-solid fa-gavel"),        
        ("Calendar", "fa-regular fa-calendar"),       
        ("Warrant", "fa-solid fa-file-contract"),    
        ("Holdover", "fa-solid fa-file-shield")       
    }
},

    // Reporting Section
    { "Reporting", new()
        {
            ("Court Calendar", "fa-regular fa-calendar"),
            ("Case Status", "fa-solid fa-list-check"),
            ("Trials Scheduled", "fa-solid fa-gavel"),
            ("Client Monthly Billing", "fa-solid fa-file-invoice-dollar"),
            ("Warrant Disposition Report", "fa-solid fa-file-contract"),
            ("Marshal Reports", "fa-solid fa-user-shield"),
            ("Dispo Reports", "fa-solid fa-file-circle-check"),
            ("Legal Status / Actions Reports", "fa-solid fa-scale-balanced")
        }
    },

    // Accounting Section
    { "Accounting", new()
        {
            ("Invoices / Retainers / Adjustments", "fa-solid fa-file-invoice"),
            ("Statement Reports", "fa-solid fa-file-lines"),
            ("Open Receivables / Ledger", "fa-solid fa-book"),
            ("Attorney Billing", "fa-solid fa-money-bill")
        }
    },

    // Maintenance Section
    { "Maintenance", new()
        {
            ("Form Templates", "fa-solid fa-file-alt"),
            ("Practice Area", "fa-solid fa-briefcase"),
            ("User Roles: Attorneys, Process Server", "fa-solid fa-users"),
            ("Regulatory/Appearance Types", "fa-solid fa-gavel")
        }
    },

    // Process Server Section
    { "Process", new()
        {
            ("Add Rent Demand Served", "fa-solid fa-plus"),
            ("Add Petition Served", "fa-solid fa-file-signature"),
            ("Generate Process Reports", "fa-solid fa-chart-line")
        }
    },

    // Case Transfer Section
    { "Transfer", new()
        {
            ("Transfer Case / Building", "fa-solid fa-right-left")
        }
    },

    // Print Forms Section
    { "FormsPrint", new()
        {
            ("Notice of Discontinuance", "fa-solid fa-file"),
            ("Affidavit to Execute", "fa-solid fa-file-signature"),
            ("Rent Demand", "fa-solid fa-file-invoice-dollar"),
            ("Section 8 Forms", "fa-solid fa-file-alt"),
            ("Tenant Declaration", "fa-solid fa-house-user"),
            ("FDCPA Letter", "fa-solid fa-envelope"),
            ("Petition & Petition Affidavits", "fa-solid fa-file-contract")
        }
    },

    // NYCEF Email Sync Integration
    { "NYCEFEmail", new()
        {
            ("Auto-fetch NYCEF notices", "fa-solid fa-envelope-open-text"),
            ("Map documents to internal case by Index #", "fa-solid fa-diagram-project"),
            ("Auto-pull opposing counsel details into case", "fa-solid fa-user-tie"),
            ("Add docs to OSC packages", "fa-solid fa-file-import")
        }
    },

    // Convert Case to E-File
    { "EFile", new()
        {
            ("One-click transfer to e-file-ready version", "fa-solid fa-file-export")
        }
    },

    // Drafting Library Section
    { "Drafting", new()
        {
            ("Manage-Forms" , "fa-solid fa-handshake"),
            ("Predicate Notice", "fa-solid fa-file-alt"),
            ("Notice of Petition (Art. 6-A)", "fa-solid fa-file-signature"),
            ("Motion / Answer / Opposition / Reply", "fa-solid fa-gavel"),
            ("Counterclaims", "fa-solid fa-balance-scale"),
            ("Notice of Appearance", "fa-solid fa-eye"),
            ("Stipulation to Discontinue", "fa-solid fa-file-contract"),
            ("Stipulation of Settlement", "fa-solid fa-handshake"),
                 

        }


    },

     { "Settings", new()
        {
          
            ("State", "fa-solid fa-map-location-dot"),
            ("CaseType", "fa-solid fa-briefcase"),
            ("LandlordType", "fa-solid fa-user-tie"),
            ("TenancyType", "fa-solid fa-house-user"),
            ("PremiseType", "fa-solid fa-building"),
            ("Language", "fa-solid fa-language"),
            ("ReasonHoldover", "fa-solid fa-file-circle-question"),
            ("RenewalStatus", "fa-solid fa-arrows-rotate"),
            ("RentRegulation", "fa-solid fa-file-invoice-dollar"),
            ("TypeOfOwner", "fa-solid fa-user-tag"),
            ("UnitIlligal", "fa-solid fa-house-crack")

        }


    }
};

    void NavigateToDrafting(string submenu)
    {
        activeMenu = submenu;

        switch (submenu)
        {
            case "Manage-Forms":
                nav.NavigateTo("/Drafting/Manage-Forms");
                break;



        }
    }

    void NavigateToCases(string submenu)
    {
        activeMenu = submenu;

        switch (submenu)
        {
            case "Manage-Cases":
                nav.NavigateTo("/Drafting/Manage-Cases");
                break;



        }
    }

    void NavigateToSettings(string submenu)
    {
        activeMenu = submenu;

        switch (submenu)
        {
            case "State":
                nav.NavigateTo("/Settings/State");
                break;
            case "CaseType":
                nav.NavigateTo("/Settings/case-type");
                break;
            case "LandlordType":
                nav.NavigateTo("/Settings/landlord-type");
                break;
            case "TenancyType":
                nav.NavigateTo("/Settings/tenancy-type");
                break;
            case "PremiseType":
                nav.NavigateTo("/Settings/premise-type");
                break;
            case "Language":
                nav.NavigateTo("/Settings/language");
                break;
            case "ReasonHoldover":
                nav.NavigateTo("/Settings/reason-holdover");
                break;
            case "RenewalStatus":
                nav.NavigateTo("/Settings/renewal-status");
                break;
            case "RentRegulation":
                nav.NavigateTo("/Settings/rent-regulation");
                break;
            case "TypeOfOwner":
                nav.NavigateTo("/Settings/type-of-owner");
                break;
            case "UnitIlligal":
                nav.NavigateTo("/Settings/unit-illigal");
                break;


        }
    }


    void NavigateToReporting(string submenu)
    {
        activeMenu = submenu;

        switch (submenu)
        {
            case "Court Calendar":
                nav.NavigateTo("/reporting/court-calendar");
                break;
            case "Case Status":
                nav.NavigateTo("/reporting/case-status");
                break;
            case "Trials Scheduled":
                nav.NavigateTo("/reporting/trials-scheduled");
                break;
            case "Client Monthly Billing":
                nav.NavigateTo("/reporting/client-monthly-billing");
                break;
            case "Warrant Disposition Report":
                nav.NavigateTo("/reporting/warrant-disposition");
                break;
            case "Marshal Reports":
                nav.NavigateTo("/reporting/marshal-reports");
                break;
            case "Dispo Reports":
                nav.NavigateTo("/reporting/dispo-reports");
                break;
            case "Legal Status / Actions Reports":
                nav.NavigateTo("/reporting/legal-status-actions");
                break;
        }
    }

    void SetActive(string menu)
    {

        activeMenu = menu;


    }

    bool IsExpanded(string menu)
    {
        return expandedMenus.ContainsKey(menu) && expandedMenus[menu];
    }

    bool isSettingsMode = false;
    bool isFirstTimeOpeningSettings = true;

    void ToggleSettingsMode()
    {
        isSettingsMode = !isSettingsMode;

        if (isSettingsMode && isFirstTimeOpeningSettings)
        {
            expandedMenus["Organisation"] = true;
            activeMenu = "Tags";
            isFirstTimeOpeningSettings = false;
            
        }
    }
 

}


