@rendermode InteractiveServer
@inject NavigationManager nav
@* @using BlazorBootstrap
@using BlazorUI.Services
@using BlazorUI.Services.Auth
@using BlazorUI.ViewModels *@
@using EvictionFiler.Server
@using EvictionFiler.Server.Services
 @using Microsoft.AspNetCore.Components.Authorization
@* @inject SpinnerService SpinnerService *@
@inject AuthenticationStateProvider AuthenticationStateProvider 
@inject AuthService _authService
@inject NavigationManager Navigation



<style>
    .flyout-menu {
        border-radius: 7px;
        overflow: hidden;
    }

    .menu-icon
    {
        width: 17px;
        height: 20px;
        margin-left: 3px;
    }
</style>
<div class="d-flex navbar-custom">
    @if (!isSettingsMode)
    {
        <nav class="sidebar d-flex flex-column vh-100 @(isCollapsed ? "collapsed" : "")">


            @if (isCollapsed)
            {
                <div class="fw-bold"
                     style="color: #1F365D; font-size: 20px; margin-left: 25px; margin-top:23px">
                    EF
                </div>
            }
            else
            {
                <img src="images/PHOTO-2025-06-18-02-45-29.jpg"
                     alt="Logo"
                     class="logo-img" />
            }

           

            <div class="flex-grow-1 flex-column v-scroll-auto scroll-hidden">

                <div class="nav flex-column">
                    <div class="nav flex-column">
                        <a class="sidebar-link text-decoration-none p-2 @(activeMenu == "Home" || IsExpanded("Home") || (isCollapsed && IsSubmenuActive("Home")) ? "active" : "")"
                           @onclick="@(() => ToggleMenu("Home"))">

                            <i class="fa-solid fa-gauge menu-icon" ></i>

                            <span class="hide-on-collapse menu-label" > Dashboard</span>


                        </a>
                        
                    </div>

                    <div class="nav flex-column ">
                        <a class="sidebar-link text-decoration-none p-2 @(IsExpanded("View") || (isCollapsed && IsSubmenuActive("View")) ? "active" : "")" @onclick="@(() => ToggleMenu("View"))">
                            <i class="fa-solid fa-scale-balanced menu-icon" style="margin-left:0px !important;"></i>

                            <span class="hide-on-collapse menu-label" style="margin-left:13px !important;">Legal Cases</span>
                        </a>

                    </div>

                    <!-- MANAGE -->
                    <div class="nav flex-column ">
                        <a class="sidebar-link text-decoration-none p-2 @(IsExpanded("Manage") || (isCollapsed && IsSubmenuActive("Manage")) ? "active" : "")"
                           @onclick="@(() => ToggleMenu("Manage"))">
                            <i class="fa-solid fa-user menu-icon"></i>

                            <span class="hide-on-collapse menu-label" >Users</span>
                        </a>
                       
                    </div>

                    <div class="nav flex-column ">
                        <a class="sidebar-link text-decoration-none p-2 @(IsExpanded("HR") || (isCollapsed && IsSubmenuActive("HR")) ? "active" : "")"
                           @onclick="@(() => ToggleMenu("HR"))">
                            <i class="fa-solid fa-user menu-icon"></i>

                            <span class="hide-on-collapse menu-label">Clients</span>
                        </a>

                    </div>
                    
                </div>
            </div>

            <hr style="color:gray" />
            <div class="profile-section mt-auto d-flex flex-column">

                <!-- Profile Link -->

                <a  class="sidebar-link text-decoration-none p-2" @onclick="ToggleProfileOptions">
                    <i class="fa-regular fa-user menu-icon"></i>

                    @if (Name != null)
                    {
                        <span class="hide-on-collapse menu-label">@Name</span>
                    }
                </a>
                @if (showProfileOptions)
                {
                    <div class="bg-white border rounded shadow p-2 position-absolute" style="bottom: 60px; left: 10px; z-index: 1000;">
                        <a href="javascript:void(0);" class="dropdown-item text-dark" @onclick="LogoutUser">
                            <i class="fa-solid fa-right-from-bracket me-2"></i> Logout
                        </a>
                    </div>
                }


                <a href="NotImplemented" class="sidebar-link text-decoration-none p-2">
                    <i class="fa-solid fa-circle-question menu-icon"></i>

                    <span class="hide-on-collapse menu-label">Help/FAQ</span>
                </a>
                <!-- Settings Link -->

                <div class="sidebar-bottom  d-flex flex-column  position-relative">
                    <a class="sidebar-link text-decoration-none p-2 " @onclick="ToggleSettingsMode">
                        <i class="fa-solid fa-gears"></i>

                        <span class="hide-on-collapse menu-label">Settings</span>
                    </a>
                    <div class="toggle-btns" @onclick="ToggleSidebar">
                        <i class="fas fa-angles-left"></i>
                    </div>
                </div>
            </div>
        </nav>

    }
</div>


@code {
    private bool showProfileOptions = false;
    Dictionary<string, bool> expandedMenus = new();
    // private UserClaimsModel userClaims;
    // private List<UserClaimsModel> userClaimsModels = new List<UserClaimsModel>();
    public string Name { get; set; }

    bool IsSubmenuActive(string parentMenu) =>
        submenuMap.ContainsKey(parentMenu) && submenuMap[parentMenu].Contains(activeMenu);

    string activeMenu = "";
    bool isCollapsed = false;
    private string HoveredMenu { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            Name = user.Identity.Name ?? "User";
        }
        else
        {
            Name = "Guest";
        }

        string[] menus = { "Home", "View", "Manage", "HR", "Access", "Reports", "Toolbox", "Self Service", "Payroll", "Xero", "Import", "Organisation", "Contract", "Shifts and Rosters", "Reporting and Exceptions", "Access control", "Clocking terminals", "Flexitime", "HR records", "Employees", "Holiday,Sick and Absence", "Overtime rules" };
        foreach (var menu in menus)
        {
            expandedMenus[menu] = false;
        }

        expandedMenus["Organisation"] = true;
        activeMenu = "Tags";
        var uri = nav.Uri.ToLower();

        if (uri.EndsWith("/"))
        {
            activeMenu = "Home";
            expandedMenus["Home"] = false;
        }

    }

    private async Task LogoutUser()
    {
        await _authService.LogoutAsync();
        Navigation.NavigateTo("/", forceLoad: true); 
    }

    private void ToggleProfileOptions()
    {
        showProfileOptions = !showProfileOptions;
    }
    void ToggleSidebar()
    {
        if (isSettingsMode)
        {
            isSettingsMode = false;
        }
        isCollapsed = !isCollapsed;
    }

    void CollapseAll()
    {
        var keys = expandedMenus.Keys.ToList();
        foreach (var key in keys)
        {
            expandedMenus[key] = false;
        }
    }
    Dictionary<string, List<string>> submenuMap = new()
{
    { "Home", new() { "Dashboard", "Live Activity Dashboard" } },
    { "View", new() { "Live Data",  "Calender", "Attendence", "Pegboard" } },
    { "Manage", new() { "Exceptions", "Overtime", "Lateness", "WorkRecordNotes", "HolidaysRequested", "Incidents" } },
    { "HR", new() { "Employees", "Payroll", "Xero", "Import" } },
    { "Access", new() { "Organisation", "Shifts and Rosters", "Reporting and Exceptions", "Access control", "Clocking terminals" } },
    { "Reports", new() { "Flexitime", "HR records" } },
    { "Toolbox", new() { "Employees", "Holiday,Sick and Absence", "Overtime rules" } },
    { "Payroll", new() { "Payroll", "Xero", "Import" } },
    { "Xero", new() { "Connection", "XeroMappedEarningsRates", "XeroSyncEmployees", "XeroPayments" } },
    { "Import", new() { "ITrentEmployeeImport", "CustomRateImport", "SageHSAImport", "EmployeeImport", "CostCentreImport", "CostCentreAdvancedImport", "RecordImport", "EmployeeTagImport" } }
};

    void ToggleMenu(string menu)
    {
        if (!expandedMenus[menu])
            CollapseAll();

        expandedMenus[menu] = !expandedMenus[menu];
        switch (menu)
        {
            case "Home":
                nav.NavigateTo("/dashboard");
                break;
            case "View":
                nav.NavigateTo("/cases");
                break;
            case "Manage":
                nav.NavigateTo("/users");
                break;
            case "HR":
                nav.NavigateTo("/clients");
                break;
            // add more if needed
            default:
                nav.NavigateTo("/");
                break;
        }
    }

    void SetActive(string menu)
    {

        activeMenu = menu;


    }

    bool IsExpanded(string menu)
    {
        return expandedMenus.ContainsKey(menu) && expandedMenus[menu];
    }

    bool isSettingsMode = false;
    bool isFirstTimeOpeningSettings = true;

    void ToggleSettingsMode()
    {
        isSettingsMode = !isSettingsMode;

        if (isSettingsMode && isFirstTimeOpeningSettings)
        {
            expandedMenus["Organisation"] = true;
            activeMenu = "Tags";
            isFirstTimeOpeningSettings = false;
            //nav.NavigateTo("Tags");
        }
    }

}


