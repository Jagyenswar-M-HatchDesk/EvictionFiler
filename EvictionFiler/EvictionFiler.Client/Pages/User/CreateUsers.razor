 @using EvictionFiler.Application.DTOs
@inject IJSRuntime JS
<style>
    .offcanvas.show {
        transform: translateX(0%);
    }

    .offcanvas {
        transform: translateX(100%);
        width : 500px !important;
    }

</style>
<div class="offcanvas offcanvas-end show border-start shadow" tabindex="-1" id="createUser"
     style="visibility:@(IsVisible ? "visible" : "hidden"); transition: transform 0.9s ease-in-out;"
     aria-labelledby="createUserLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="createUserLabel">Add New User</h5>
        <button type="button" class="btn-close text-reset" @onclick="Hide"></button>
    </div>

    <div class="offcanvas-body">
        <EditForm Model="@registerDto" OnValidSubmit="SubmitUser" FormName="CreateUser">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label">First Name</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-user"></i></span>
                        <InputText class="form-control" @bind-Value="registerDto.FirstName" placeholder="Enter First Name" />
                    </div>
                </div>

                <div class="col-md-6">
                    <label class="form-label">Last Name</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-user"></i></span>
                        <InputText class="form-control" @bind-Value="registerDto.LastName" placeholder="Enter Last Name" />
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-12">
                    <label class="form-label">Email</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-at"></i></span>
                        <InputText class="form-control" @bind-Value="registerDto.Email" placeholder="Enter Email" />
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label class="form-label">Role</label>
                <select class="form-select" @bind="registerDto.Role">
                    <option disabled selected value="">-- Select a Role --</option>
                    <option>Law Firm</option>
                    <option>Property Manager</option>
                </select>
            </div>

            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary btn-lg">Submit</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [Parameter] public RegisterDto registerDto { get; set; } = new RegisterDto();
    [Parameter] public EventCallback<RegisterDto> Submit { get; set; }

    private bool IsVisible { get; set; } = false;

    public void Show(RegisterDto model)
    {
        registerDto = model;
        IsVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        IsVisible = false;
        StateHasChanged();
    }

    public async Task SubmitUser()
    {
        await Submit.InvokeAsync(registerDto); // calls your database method in parent
        Hide();
    }
}

