@page "/dashboard"
@using EvictionFiler.Application.DTOs.DashboardDto
@using EvictionFiler.Application.DTOs.LegalCaseDto
@using EvictionFiler.Application.DTOs.PaginationDto
@using EvictionFiler.Application.Interfaces.IRepository
@using EvictionFiler.Client.SpinnerService
@inject SpinnerService spinnerservice
@using EvictionFiler.Client.Components.Layout
@using EvictionFiler.Domain.Entities
@inject IDashBoardRepository DashBoardRepository;

    <style >
    td {
        font-size: 13px !important;
    }
    .status-active {
        background-color: rgba(25,135,84,1);
        color: #fff;
        padding: 2px 7px;
        border-radius: 1rem;
        font-size: 12px;
    }

    .container {
        /* background-color: #F2F0EC; */
        border: solid 1px #F2F0EC;
        box-shadow: 0 15px 20px #F2F0EC !important;
    }

    .btn-primary {
        background-color: #1F365D;
        border-color: #1F365D;
    }

        .btn-primary:hover {
            background-color: #162646;
            border-color: #162646;
        }

    .page-link {
        color: #1F365D;
    }

        .page-link.active,
        .page-item.active .page-link {
            background-color: #1F365D;
            border-color: #1F365D;
            color: #F2F0EC;
        }

    table.table thead th {
        color: #1F365D;
        background: #F2F0EC;
        margin-bottom: 0px !important;
    }

    h5, p, small {
        color: #1F365D;
    }

    .adv-btn {
        color: #1F365D;
        background: #FFF;
    }

        .adv-btn:hover {
            color: #FFF;
            background: #1F365D;
        }

        .adv-btn.active-adv-btn {
            background-color: #1F365D !important;
            color: #F2F0EC !important;
            border-color: #1F365D !important;
        }


    .table-responsive {
        overflow-x: auto; /* Enable horizontal scroll */
        position: relative;
    }

    table th, table td {
        white-space: nowrap;
    }

    th.sticky, td.sticky {
        position: sticky;
        right: 0;
        background: #F2F0EC; /* Same as container background */
        z-index: 2;
        text-align: center;
    }

    /* Make sure header sticky stays above other cells */
    th.sticky {
        z-index: 3;
    }

    .search-box {
        width: 100%;
        padding-right: 3rem; /* space for the button */
        padding-left: 1rem;
        /* border-radius: 1.5rem; */
        border: 2px solid #020336;
        background-color: #FFF; /* dark background */
        color: black;
        height: 2.5rem;
        font-size:14px;
    }

        .search-box::placeholder {
            color: darkgrey;
        }

        .search-box:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.2);
            background: #c6d1e3;
        }

    .search-btn {
        position: absolute;
        right: 0.7rem;
        top: 50%;
        transform: translateY(-50%);
        border: none;
        background: none;
        color: #020336;
        cursor: pointer;
        padding: 0;
        font-size: 1.2rem;
    }

        .search-btn:hover {
            color: #1F365D;
        }

    .status-delete {
        background-color: rgba(220,53,69,1);
        color: #fff;
        padding: 2px 7px;
        border-radius: 1rem;
        font-size: 12px;
    }

    .status-archive {
        background-color: rgba(255, 193, 7, 1);
        color: #fff;
        padding: 2px 7px;
        border-radius: 1rem;
        font-size: 12px;
    }
</style>



<div>
   <NavMenu />
 <body class="p-4">
 <div class="container p-4 rounded shadow-sm ">
    <div class="row g-2 mb-3 mt-2">
        <!-- Four default search boxes -->
        <div class="col-md-3 position-relative">
                    <input class="form-control search-box"
                           placeholder="Search by Case"
                           @bind="selectedCase"
                           @oninput="OnCaseInput"
                           autocomplete="off" />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>

                    <ul class="list-group position-absolute w-100" style="z-index:1000; font-size:14px"
                        hidden="@(string.IsNullOrWhiteSpace(selectedCase) || !caseSuggestionsChecked)">
                        @if (caseSuggestions.Any())
                        {
                            @foreach (var suggestion in caseSuggestions)
                            {
                                <li class="list-group-item list-group-item-action"
                                    style="cursor:pointer;"
                                    @onclick="() => SelectCase(suggestion)">
                                    @suggestion
                                </li>
                            }
                        }
                        else
                        {
                            <li class="list-group-item text-muted">
                                No result found
                            </li>
                        }
                    </ul>
        </div>
        <div class="col-md-3 position-relative">
                    <input class="form-control search-box"
                           placeholder="Search Client by Code/Name"
                           @bind="selectedClient"
                           @oninput="OnClientInput"
                           autocomplete="off" />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>

                    <ul class="list-group position-absolute w-100" style="z-index:1000; font-size:14px"
                        hidden="@(string.IsNullOrWhiteSpace(selectedClient) || !clientSuggestionsChecked)">
                        @if (clientSuggestions.Any())
                        {
                            @foreach (var suggestion in clientSuggestions)
                            {
                                <li class="list-group-item list-group-item-action"
                                    style="cursor:pointer;"
                                    @onclick="() => SelectClient(suggestion)">
                                    @suggestion
                                </li>
                            }
                        }
                        else
                        {
                            <li class="list-group-item text-muted">
                                No result found
                            </li>
                        }
                    </ul>


        </div>
        <div class="col-md-3 position-relative">
                    <input class="form-control search-box"
                           placeholder="Search Tenant by Code/Name"
                           @bind="selectedTenant"
                           @oninput="OnTenantInput"
                           autocomplete="off" />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>

            <ul class="list-group position-absolute w-100" style="z-index:1000; font-size:14px"
                        hidden="@(string.IsNullOrWhiteSpace(selectedTenant) || !tenantSuggestionsChecked)">
                        @if (tenantSuggestions.Any())
                        {
                            @foreach (var suggestion in tenantSuggestions)
                            {
                                <li class="list-group-item list-group-item-action"
                                    style="cursor:pointer;"
                                    @onclick="() => SelectTenant(suggestion)">
                                    @suggestion
                                </li>
                            }
                        }
                        else
                        {
                            <li class="list-group-item text-muted">
                                No result found
                            </li>
                        }
                    </ul>
        </div>
       
           <div class="col-md-3 d-flex align-items-center">
                    <button id="advToggleButton" class="btn btn-outline-secondary adv-btn w-100" aria-expanded="false">
                        Advanced <span id="advIcon">▼</span>
                    </button>

            </div>
     
    </div>
            <div class="collapse mb-3" id="advancedFilters">
    <div class="row g-2 mb-3">
           <div class="col-md-3 position-relative">
                        <input class="form-control search-box" placeholder="Search LandLord by Code/Name" @bind="selectedLandlord"
                               @oninput="OnLandlordInput"
                               autocomplete="off" />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>

                        <ul class="list-group position-absolute w-100" style="z-index:1000; font-size:14px"
                            hidden="@(string.IsNullOrWhiteSpace(selectedLandlord) || !landlordSuggestionsChecked)">
                            @if (landlordSuggestions.Any())
                            {
                                @foreach (var suggestion in landlordSuggestions)
                                {
                                    <li class="list-group-item list-group-item-action"
                                        style="cursor:pointer;"
                                        @onclick="() => Selectlandlord(suggestion)">
                                        @suggestion
                                    </li>
                                }
                            }
                            else
                            {
                                <li class="list-group-item text-muted">
                                    No result found
                                </li>
                            }
                        </ul>
        </div>
        <div class="col-md-3 position-relative">
                        <input class="form-control search-box" placeholder="Search by Reason Holdover" @bind="selectedReasonholdover" @oninput="OnReasonHoldoverInput" autocomplete="off" />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>

                        <ul class="list-group position-absolute w-100" style="z-index:1000; font-size:14px"
                            hidden="@(string.IsNullOrWhiteSpace(selectedReasonholdover) || !reasonholdoverSuggestionsChecked)">
                            @if (reasonholdoverSuggestions.Any())
                            {
                                @foreach (var suggestion in reasonholdoverSuggestions)
                                {
                                    <li class="list-group-item list-group-item-action"
                                        style="cursor:pointer;"
                                        @onclick="() => SelectreasonHoldover(suggestion)">
                                        @suggestion
                                    </li>
                                }
                            }
                            else
                            {
                                <li class="list-group-item text-muted">
                                    No result found
                                </li>
                            }
                        </ul>

        </div>

        <div class="col-md-3 position-relative">
            <input class="form-control search-box" placeholder="Search by Action Date" @bind="searchTermDate" />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>
        </div>
        <div class="col-md-3 position-relative">
            <input class="form-control search-box" placeholder="Search by Status" @bind="searchTermStatus"  />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>
        </div>
       
    </div>
    </div>
    <div class="row mb-3">
         <div class="col-md-12">
            <button type="submit" class="btn bg-navy text-white me-2" style="font-size:18px ; width:100%" @onclick="Search">Search</button>
        </div>
    </div>
</div>
    @if (searchResults != null && searchResults.Items.Any())
    {
        <div class="row mt-3 d-flex justify-content-start">
            @foreach (var item in searchResults.Items)
            {
                <div class="col-md-4 mb-3">
                    <div class="card shadow-sm h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="fw-bold mb-0">Search Information</h6>
                                @* <i class="bi bi-search text-navy" style="cursor: pointer; font-size: 16px;"></i> *@
                            </div>

                            <div class="table-responsive">
                                <table class="table table-borderless mb-0">
                                    <tbody>
                                        <tr class="border-bottom">
                                            <td class="fw-bold text-uppercase">Case Code:</td>
                                            <td>@(string.IsNullOrWhiteSpace(item.Casecode) ? "-" : item.Casecode)</td>
                                        </tr>
                                        <tr class="border-bottom">
                                            <td class="fw-bold text-uppercase" style="width: 35%;">Landlord's Name:</td>
                                            <td>@(string.IsNullOrWhiteSpace(item.LandLords?.FirstName + item.LandLords?.LastName) ? "-" : item.LandLords.FirstName + " " + item.LandLords.LastName)</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (isSearched)
    {
        <tr  class="mt-5" style="display:flex; justify-content:center; font-size:14px">
            <td colspan="10" class="text-muted fs-6">  <i class="bi bi-exclamation-circle me-2"></i>No results found.</td>
        </tr>
      
    }


        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

    </body>
</div>

<script>
    // Get elements
    var advButton = document.getElementById('advToggleButton');
    var advIcon = document.getElementById('advIcon');
    var advancedCollapse = document.getElementById('advancedFilters');

    // Bootstrap collapse instance
    var bsCollapse = new bootstrap.Collapse(advancedCollapse, {
        toggle: false
    });

    // Button click par toggle hoga
    advButton.addEventListener('click', function () {
        bsCollapse.toggle();
    });

    // Collapse open hone par
    advancedCollapse.addEventListener('shown.bs.collapse', function () {
        advButton.classList.add('active-adv-btn');
        advIcon.innerHTML = "▲"; // arrow up
        advButton.setAttribute("aria-expanded", "true");
    });

    // Collapse close hone par
    advancedCollapse.addEventListener('hidden.bs.collapse', function () {
        advButton.classList.remove('active-adv-btn');
        advIcon.innerHTML = "▼"; // arrow down
        advButton.setAttribute("aria-expanded", "false");
    });
</script>


@code {
    private string searchText;
    private bool isSearched = false;

    private string searchcasecode = string.Empty;
    private string searchTermClient = string.Empty;
    private string searchTermTenant = string.Empty;
    private string searchTermLandLord = string.Empty;
    private string searchTermCaseType = string.Empty;
    private string searchTermStatus = string.Empty;
    private string searchTermDept = string.Empty;
    private string searchTermDate = string.Empty;
    private string searchTermResonHoldover = string.Empty;

    private PaginationDto<LegalCase> searchResults;
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchTerm = "";

    private string selectedClient = string.Empty;
    private bool clientSuggestionsChecked = false;
    private List<string> clientSuggestions = new List<string>();

    private string selectedReasonholdover = string.Empty;
    private bool reasonholdoverSuggestionsChecked = false;
    private List<string> reasonholdoverSuggestions = new List<string>();

    private string selectedTenant = string.Empty;
    private bool tenantSuggestionsChecked = false;
    private List<string> tenantSuggestions = new List<string>();

    private string selectedCase= string.Empty;
    private bool caseSuggestionsChecked = false;
    private List<string> caseSuggestions = new List<string>();

    private string selectedLandlord = string.Empty;
    private bool landlordSuggestionsChecked = false;
    private List<string> landlordSuggestions = new List<string>();

    private async Task Search()
    {
        // ✅ Check if all search fields are empty
        if (string.IsNullOrWhiteSpace(selectedCase) &&
            string.IsNullOrWhiteSpace(selectedClient) &&
            string.IsNullOrWhiteSpace(selectedTenant) &&
            string.IsNullOrWhiteSpace(selectedLandlord) &&
            string.IsNullOrWhiteSpace(selectedReasonholdover) &&
            string.IsNullOrWhiteSpace(searchTermDate) &&
            string.IsNullOrWhiteSpace(searchTermStatus))
        {
            // Agar koi bhi filter fill nahi kiya gaya
            searchResults = null;
            isSearched = true;

            // Spinner hatao
            spinnerservice.Hide();

            return;
        }

        spinnerservice.Show();
        isSearched = true;

        var filters = new CaseFilterDto
        {
            CaseCode = selectedCase,
            Client = selectedClient,
            Tenant = selectedTenant,
            LandLord = selectedLandlord,
            ReasonHoldover = selectedReasonholdover,
            ActionDate = searchTermDate,
            Status = searchTermStatus
        };
        searchResults = await DashBoardRepository.Search(currentPage, pageSize, filters);

        selectedClient = string.Empty;
        selectedCase = string.Empty;
        selectedTenant = string.Empty;
        selectedLandlord = string.Empty;
        selectedReasonholdover = string.Empty;
        searchTermDate = string.Empty;
        searchTermStatus = string.Empty;

        spinnerservice.Hide();
    }
    private async Task OnClientInput(ChangeEventArgs e)
    {
        selectedClient = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedClient))
        {
            clientSuggestions = await DashBoardRepository.GetClientSuggestions(selectedClient);
            clientSuggestionsChecked = true;
        }
        else
        {
            clientSuggestions = new List<string>();
            clientSuggestionsChecked = false; 
        }
    }

    private async Task OnTenantInput(ChangeEventArgs e)
    {
        selectedTenant = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedTenant))
        {
            tenantSuggestions = await DashBoardRepository.GetTenantSuggestions(selectedTenant);
            tenantSuggestionsChecked = true;
        }
        else
        {
            tenantSuggestions = new List<string>();
            tenantSuggestionsChecked = false;
        }
    }

    private async Task OnCaseInput(ChangeEventArgs e)
    {
        selectedCase = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedCase))
        {
            caseSuggestions = await DashBoardRepository.GetCaseSuggestions(selectedCase);
            caseSuggestionsChecked = true;
        }
        else
        {
            caseSuggestions = new List<string>();
            caseSuggestionsChecked = false;
        }
    }

    private async Task OnLandlordInput(ChangeEventArgs e)
    {
        selectedLandlord = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedLandlord))
        {
            landlordSuggestions = await DashBoardRepository.GetLandlordSuggestions(selectedLandlord);
            landlordSuggestionsChecked = true;
        }
        else
        {
            landlordSuggestions = new List<string>();
            landlordSuggestionsChecked = false;
        }
    }

    private async Task OnReasonHoldoverInput(ChangeEventArgs e)
    {
        selectedReasonholdover = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedReasonholdover))
        {
            reasonholdoverSuggestions = await DashBoardRepository.GetReasonHoldoverSuggestions(selectedReasonholdover);
            reasonholdoverSuggestionsChecked = true;
        }
        else
        {
            reasonholdoverSuggestions = new List<string>();
            reasonholdoverSuggestionsChecked = false;
        }
    }

    private void SelectClient(string client)
    {
        selectedClient = client;
        clientSuggestions.Clear();
        clientSuggestionsChecked = false;
    }

    private void Selectlandlord(string client)
    {
        selectedLandlord = client;
        landlordSuggestions.Clear();
        landlordSuggestionsChecked = false;
    }

    private void SelectTenant(string tenant)
    {
        selectedTenant = tenant;
        tenantSuggestions.Clear();
        tenantSuggestionsChecked = false;
    }

    private void SelectCase(string cases)
    {
        selectedCase = cases;
        caseSuggestions.Clear();
        caseSuggestionsChecked = false;
    }

    private void SelectreasonHoldover(string cases)
    {
        selectedReasonholdover = cases;
        reasonholdoverSuggestions.Clear();
        reasonholdoverSuggestionsChecked = false;
    }
}
