@page "/dashboard"

@using EvictionFiler.Application.DTOs.DashboardDto
@using EvictionFiler.Application.DTOs.LegalCaseDto
@using EvictionFiler.Application.DTOs.PaginationDto
@using EvictionFiler.Application.Interfaces.IRepository
@using EvictionFiler.Application.Interfaces.IServices
@using EvictionFiler.Client.Jwt
@using EvictionFiler.Client.SpinnerService
@inject SpinnerService spinnerservice
@using EvictionFiler.Client.Components.Layout
@using EvictionFiler.Domain.Entities
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims
@inject JwtAuthStateProviders _authStateProvider
@using System.Globalization

@inject ILegalCaseService _service
@inject IDashBoardRepository DashBoardRepository;

    <style >
    td {
        font-size: 11px !important;
    }
    .status-active {
        background-color: rgba(25,135,84,1);
        color: #fff;
        padding: 2px 7px;
        border-radius: 1rem;
        font-size: 12px;
    }

    .container {
        /* background-color: #F2F0EC; */
        border: solid 1px #F2F0EC;
        box-shadow: 0 15px 20px #F2F0EC !important;
    }

    .btn-primary {
        background-color: #1F365D;
        border-color: #1F365D;
    }

        .btn-primary:hover {
            background-color: #162646;
            border-color: #162646;
        }

    .page-link {
        color: #1F365D;
    }

        .page-link.active,
        .page-item.active .page-link {
            background-color: #1F365D;
            border-color: #1F365D;
            color: #F2F0EC;
        }

    table.table thead th {
        color: #1F365D;
        background: #F2F0EC;
        margin-bottom: 0px !important;
    }

    h5, p, small {
        color: #1F365D;
    }

    .adv-btn {
        color: #1F365D;
        background: #FFF;
    }

        .adv-btn:hover {
            color: #FFF;
            background: #1F365D;
        }

        .adv-btn.active-adv-btn {
            background-color: #1F365D !important;
            color: #F2F0EC !important;
            border-color: #1F365D !important;
        }


    .table-responsive {
        overflow-x: auto; /* Enable horizontal scroll */
        position: relative;
    }

    table th, table td {
        white-space: nowrap;
    }

    th.sticky, td.sticky {
        position: sticky;
        right: 0;
        background: #F2F0EC; /* Same as container background */
        z-index: 2;
        text-align: center;
    }

    /* Make sure header sticky stays above other cells */
    th.sticky {
        z-index: 3;
    }

    .search-box {
        width: 100%;
        padding-right: 3rem; /* space for the button */
        padding-left: 1rem;
        /* border-radius: 1.5rem; */
        border: 2px solid #020336;
        background-color: #FFF; /* dark background */
        color: black;
        height: 2.5rem;
        font-size:14px;
    }

        .search-box::placeholder {
            color: darkgrey;
        }

        .search-box:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.2);
            background: #c6d1e3;
        }

    .search-btn {
        position: absolute;
        right: 0.7rem;
        top: 50%;
        transform: translateY(-50%);
        border: none;
        background: none;
        color: #020336;
        cursor: pointer;
        padding: 0;
        font-size: 1.2rem;
    }

        .search-btn:hover {
            color: #1F365D;
        }

    .status-delete {
        background-color: rgba(220,53,69,1);
        color: #fff;
        padding: 2px 7px;
        border-radius: 1rem;
        font-size: 12px;
    }

    .status-archive {
        background-color: rgba(255, 193, 7, 1);
        color: #fff;
        padding: 2px 7px;
        border-radius: 1rem;
        font-size: 12px;
    }

    .dashboard-card {
        border-radius: 10px;
        transition: 0.3s ease;
        font-size: 13px; /* Content font size */
    }

        .dashboard-card:hover {
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }

        .dashboard-card h5 {
            font-size: 14px; /* Title font size */
            margin-bottom: 0;
            font-weight:bold;
            color: #020336;
        }

    .circle {
        width: 140px;
        height: 140px;
        border-radius: 50%;
        font-size: 1.5rem;
        font-weight: bold;
    }
</style>



<div>
   <NavMenu />
 <body class="p-4">
 <div class="container p-4 rounded shadow-sm ">
    <div class="row g-2 mb-3 mt-2">
        <!-- Four default search boxes -->
        <div class="col-md-3 position-relative">
                    <input class="form-control search-box"
                           placeholder="Search by Case"
                           @bind="selectedCase"
                           @oninput="OnCaseInput"
                           autocomplete="off" />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>

                    <ul class="list-group position-absolute w-100" style="z-index:1000; font-size:14px"
                        hidden="@(string.IsNullOrWhiteSpace(selectedCase) || !caseSuggestionsChecked)">
                        @if (caseSuggestions.Any())
                        {
                            @foreach (var suggestion in caseSuggestions)
                            {
                                <li class="list-group-item list-group-item-action"
                                    style="cursor:pointer;"
                                    @onclick="() => SelectCase(suggestion)">
                                    @suggestion
                                </li>
                            }
                        }
                        else
                        {
                            <li class="list-group-item text-muted">
                                No result found
                            </li>
                        }
                    </ul>
        </div>
        <div class="col-md-3 position-relative">
                    <input class="form-control search-box"
                           placeholder="Search Client by Code/Name"
                           @bind="selectedClient"
                           @oninput="OnClientInput"
                           autocomplete="off" />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>

                    <ul class="list-group position-absolute w-100" style="z-index:1000; font-size:14px"
                        hidden="@(string.IsNullOrWhiteSpace(selectedClient) || !clientSuggestionsChecked)">
                        @if (clientSuggestions.Any())
                        {
                            @foreach (var suggestion in clientSuggestions)
                            {
                                <li class="list-group-item list-group-item-action"
                                    style="cursor:pointer;"
                                    @onclick="() => SelectClient(suggestion)">
                                    @suggestion
                                </li>
                            }
                        }
                        else
                        {
                            <li class="list-group-item text-muted">
                                No result found
                            </li>
                        }
                    </ul>


        </div>
        <div class="col-md-3 position-relative">
                    <input class="form-control search-box"
                           placeholder="Search Tenant by Code/Name"
                           @bind="selectedTenant"
                           @oninput="OnTenantInput"
                           autocomplete="off" />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>

            <ul class="list-group position-absolute w-100" style="z-index:1000; font-size:14px"
                        hidden="@(string.IsNullOrWhiteSpace(selectedTenant) || !tenantSuggestionsChecked)">
                        @if (tenantSuggestions.Any())
                        {
                            @foreach (var suggestion in tenantSuggestions)
                            {
                                <li class="list-group-item list-group-item-action"
                                    style="cursor:pointer;"
                                    @onclick="() => SelectTenant(suggestion)">
                                    @suggestion
                                </li>
                            }
                        }
                        else
                        {
                            <li class="list-group-item text-muted">
                                No result found
                            </li>
                        }
                    </ul>
        </div>
       
           <div class="col-md-3 d-flex align-items-center">
                    <button id="advToggleButton" class="btn btn-outline-secondary adv-btn w-100" aria-expanded="false">
                        Advanced <span id="advIcon">▼</span>
                    </button>

            </div>
     
    </div>
            <div class="collapse mb-3" id="advancedFilters">
    <div class="row g-2 mb-3">
           <div class="col-md-3 position-relative">
                        <input class="form-control search-box" placeholder="Search LandLord by Code/Name" @bind="selectedLandlord"
                               @oninput="OnLandlordInput"
                               autocomplete="off" />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>

                        <ul class="list-group position-absolute w-100" style="z-index:1000; font-size:14px"
                            hidden="@(string.IsNullOrWhiteSpace(selectedLandlord) || !landlordSuggestionsChecked)">
                            @if (landlordSuggestions.Any())
                            {
                                @foreach (var suggestion in landlordSuggestions)
                                {
                                    <li class="list-group-item list-group-item-action"
                                        style="cursor:pointer;"
                                        @onclick="() => Selectlandlord(suggestion)">
                                        @suggestion
                                    </li>
                                }
                            }
                            else
                            {
                                <li class="list-group-item text-muted">
                                    No result found
                                </li>
                            }
                        </ul>
        </div>
        <div class="col-md-3 position-relative">
                        <input class="form-control search-box" placeholder="Search by Reason Holdover" @bind="selectedReasonholdover" @oninput="OnReasonHoldoverInput" autocomplete="off" />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>

                        <ul class="list-group position-absolute w-100" style="z-index:1000; font-size:14px"
                            hidden="@(string.IsNullOrWhiteSpace(selectedReasonholdover) || !reasonholdoverSuggestionsChecked)">
                            @if (reasonholdoverSuggestions.Any())
                            {
                                @foreach (var suggestion in reasonholdoverSuggestions)
                                {
                                    <li class="list-group-item list-group-item-action"
                                        style="cursor:pointer;"
                                        @onclick="() => SelectreasonHoldover(suggestion)">
                                        @suggestion
                                    </li>
                                }
                            }
                            else
                            {
                                <li class="list-group-item text-muted">
                                    No result found
                                </li>
                            }
                        </ul>

        </div>

        <div class="col-md-3 position-relative">
            <input class="form-control search-box" placeholder="Search by Action Date" @bind="searchTermDate" />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>
        </div>
        <div class="col-md-3 position-relative">
            <input class="form-control search-box" placeholder="Search by Status" @bind="searchTermStatus"  />
            <button class="search-btn" type="button">
                <i class="fa fa-search"></i>
            </button>
        </div>
       
    </div>
    </div>
    <div class="row mb-3">
         <div class="col-md-12">
            <button type="submit" class="btn bg-navy text-white me-2" style="font-size:18px ; width:100%" @onclick="Search">Search</button>
        </div>
    </div>
</div>


     <div class="container-fluid my-4">
            <div class="row text-center">

                <!-- Total Cases -->
                <div class="col-md-3 col-6">
                    <div class="circle  text-white d-flex align-items-center justify-content-center mx-auto mb-2" style="background-color:#020336">
                        <h4 class="mb-0">@totalCases</h4>
                    </div>
                    <h6 class="fw-bold">Total Cases</h6>
                </div>

                <!-- Active Cases -->
                <div class="col-md-3 col-6">
                    <div class="circle bg-success text-white d-flex align-items-center justify-content-center mx-auto mb-2">
                        <h4 class="mb-0">@activeCases</h4>
                    </div>
                    <h6 class="fw-bold">Active Cases</h6>
                </div>

                <!-- Pending Cases -->
                <div class="col-md-3 col-6">
                    <div class="circle bg-warning text-white d-flex align-items-center justify-content-center mx-auto mb-2">
                        <h4 class="mb-0">0</h4>
                    </div>
                    <h6 class="fw-bold">Pending Cases</h6>
                </div>

                <!-- Completed Cases -->
                <div class="col-md-3 col-6">
                    <div class="circle bg-info text-white d-flex align-items-center justify-content-center mx-auto mb-2">
                        <h4 class="mb-0">0</h4>
                    </div>
                    <h6 class="fw-bold">Completed Cases</h6>
                </div>
            </div>
        </div>
    <div class="row  g-4 mt-2">

            <!-- Card 1 -->
            <div class="col">
                <div class="card dashboard-card p-3 h-100">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5>📅 Today's Hearings</h5>
                        <span class="badge bg-primary">3</span>
                    </div>
                    <div class="content flex-grow-1" style="min-height: 100px;">
                        <ul class="mb-2 ps-3 text-muted">
                            <li>Hearing 1 - 10:00 AM</li>
                            <li>Hearing 2 - 12:30 PM</li>
                            <li>Hearing 3 - 03:00 PM</li>
                        </ul>
                    </div>

                    <a href="#" class="text-decoration-none text-primary">View All Hearings</a>
                </div>
            </div>

            <!-- Card 2 -->
            <div class="col">
                <div class="card dashboard-card p-3 h-100">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5>⏰ Deadlines</h5>
                        <span class="badge bg-danger">2</span>
                    </div>
                    <div class="content flex-grow-1" style="min-height: 100px;">
                    <ul class="mb-2 ps-3">
                        <li class="text-warning">Task 1 - Due Today</li>
                        <li class="text-danger">Task 2 - Overdue</li>
                    </ul>
                    </div>
                    <a href="#" class="text-decoration-none text-primary">View Deadlines</a>
                </div>
            </div>

            <!-- Card 3 -->
            <div class="col">
                <div class="card dashboard-card p-3 h-100">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5>🗂️ Cases This Week</h5>
                        <span class="badge bg-success">5</span>
                    </div>
                    <div class="content flex-grow-1" style="min-height: 100px;">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item px-0 py-1 border-0">
                                <a href="#" class="text-decoration-none text-muted">📅 Filed on Monday</a>
                            </li>
                            <li class="list-group-item px-0 py-1 border-0">
                                <a href="#" class="text-decoration-none text-muted">📅 Filed on Tuesday</a>
                            </li>
                            <li class="list-group-item px-0 py-1 border-0">
                                <a href="#" class="text-decoration-none text-muted">📅 Filed on Wednesday</a>
                            </li>
                            <li class="list-group-item px-0 py-1 border-0">
                                <a href="#" class="text-decoration-none text-muted">📅 Filed on Thursday</a>
                            </li>
                            <li class="list-group-item px-0 py-1 border-0">
                                <a href="#" class="text-decoration-none text-muted">📅 Filed on Friday</a>
                            </li>
                        </ul>
                    </div>
                    <a href="#" class="text-decoration-none text-primary">View Cases</a>
                </div>
            </div>

            <!-- Card 4 -->
            <div class="col">
                <div class="card dashboard-card p-3 h-100">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5>📝 Approvals</h5>
                        <span class="badge bg-warning text-dark">4</span>
                    </div>
                    <div class="content flex-grow-1" style="max-height: 130px;">
                        <p class="text-muted mb-2">Awaiting landlord/lawyer review</p>
                        <p class="text-muted mb-2">Client has submitted documents for approval.</p>
                      

                    </div>

                    <a href="#" class="text-decoration-none text-primary">Review Documents</a>
                </div>
            </div>

            <!-- Card 5 -->
      @*       <div class="col">
                <div class="card dashboard-card p-3 h-100">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5>💰 Balance Alerts</h5>
                        <span class="badge bg-danger">₹15,000</span>
                    </div>
                    <p class="text-muted mb-2">2 unpaid invoices</p>
                    <a href="#" class="text-decoration-none text-primary">View Financials</a>
                </div>
            </div> *@

        </div>
    <div class="row mt-2">
          <div class="col-md-9">
                <div class="card shadow-sm p-3">
                    <h4>Case Pipeline</h4>
        <RadzenChart Style="height:450px;">
    <!-- X-Axis (Months) -->
    <RadzenCategoryAxis Padding="30">
        <RadzenAxisTitle Text="Months" />
        <Categories>
            <RadzenCategoryValue Text="Oct 1" />
            <RadzenCategoryValue Text="Oct 2" />
            <RadzenCategoryValue Text="Oct 3" />
            <RadzenCategoryValue Text="Oct 4" />
            <RadzenCategoryValue Text="Oct 5" />
        </Categories>
    </RadzenCategoryAxis>

    <!-- Y-Axis (Cases) -->
    <RadzenValueAxis Min="0" Max="20" Step="5">
        <RadzenAxisTitle Text="Cases" />
        @* <RadzenGridLines Visible="true" /> *@
    </RadzenValueAxis>

    <!-- Series -->
    <RadzenColumnSeries Data="@nonPayment" Title="NonPayment" CategoryProperty="Day" ValueProperty="Count" />
    <RadzenColumnSeries Data="@holdover" Title="Holdover" CategoryProperty="Day" ValueProperty="Count" />
    <RadzenColumnSeries Data="@otherType" Title="OtherType" CategoryProperty="Day" ValueProperty="Count" />
</RadzenChart>
</div>
</div>
          <div class="col-md-3">
                    <div class="card h-100">
                        <div class="card-header bg-white border-0">
                            <h6 class="fw-bold mb-0">Last Activity</h6>
                        </div>
                        <div class="card-body">
                            <ul class="list-unstyled">
                                <li class="d-flex align-items-center mb-3">
                                    <img src="https://i.pravatar.cc/40?img=31" class="rounded-circle me-3" />
                                    <div>
                                        <span class="fw-bold">Alex Johnson</span> served Summons<br />
                                        <small class="text-muted">12m ago</small>
                                    </div>
                                </li>
                                <li class="d-flex align-items-center mb-3">
                                    <img src="https://i.pravatar.cc/40?img=32" class="rounded-circle me-3" />
                                    <div>
                                        <span class="fw-bold">Maria Lopez</span> logged Affidavit<br />
                                        <small class="text-muted">18m ago</small>
                                    </div>
                                </li>
                                <li class="d-flex align-items-center">
                                    <img src="https://i.pravatar.cc/40?img=33" class="rounded-circle me-3" />
                                    <div>
                                        <span class="fw-bold">David Kim</span> updated defendant status<br />
                                        <small class="text-muted">20m ago</small>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
             
          </div>
 </div>
    <div class="row mt-2">
     <div class="col-md-4">
    <div class="card shadow-sm p-3">
                    <h4>Calender HeatMap</h4>
        <RadzenChart Style="height:350px" Palette="@(new string[] { "#4caf50", "#ffa500", "#ff4d4d" })">
            <!-- X-Axis -->
            <RadzenCategoryAxis Padding="10">
                <RadzenAxisTitle Text="Days" />
                <Categories>
                    @foreach (var item in calendarData)
                    {
                        <RadzenCategoryValue Text="@item.Day" />
                    }
                </Categories>
            </RadzenCategoryAxis>

            <!-- Y-Axis -->
            <RadzenValueAxis Min="0" Max="10" Step="2">
                <RadzenAxisTitle Text="Deadlines" />
            </RadzenValueAxis>

            <!-- LOW Priority (Green) -->
            <RadzenColumnSeries TItem="CalendarItem"
                                Data="@calendarData.Where(x => x.Count < 5).ToList()"
                                CategoryProperty="Day"
                                ValueProperty="Count"
                                Title="Low" />

            <!-- MEDIUM Priority (Orange) -->
            <RadzenColumnSeries TItem="CalendarItem"
                                Data="@calendarData.Where(x => x.Count >= 5 && x.Count < 8).ToList()"
                                CategoryProperty="Day"
                                ValueProperty="Count"
                                Title="Medium" />

            <!-- HIGH Priority (Red) -->
            <RadzenColumnSeries TItem="CalendarItem"
                                Data="@calendarData.Where(x => x.Count >= 8).ToList()"
                                CategoryProperty="Day"
                                ValueProperty="Count"
                                Title="High" />
        </RadzenChart>
    </div>
</div>
     <div class=" col-md-8">
                <div class="card shadow-sm p-3">
                   <h4>Financial Chart</h4>
                    <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12" Style="height:350px">
                        <RadzenRow>
                            <RadzenColumn Size="12">
                                <RadzenChart>
                                    <RadzenColumnSeries Data="@collected" CategoryProperty="Month" Title="Collected" LineType="LineType.Dashed" ValueProperty="Revenue">
                                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                    </RadzenColumnSeries>
                                    <RadzenColumnSeries Data="@boiled" CategoryProperty="Month" Title="Boiled" ValueProperty="Revenue">
                                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                    </RadzenColumnSeries>
                                    <RadzenColumnOptions Radius="5" Width="20" />
                                    <RadzenCategoryAxis Padding="20" />
                                    <RadzenValueAxis Formatter="@FormatAsUSD">
                                        <RadzenGridLines Visible="true" />
                                        <RadzenAxisTitle Text="Revenue in USD" />
                                    </RadzenValueAxis>
                                </RadzenChart>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>

            </div>
      </div>
 </div>

    @* Collaboration & Communication Shortcuts (Activity Style) *@
    <div class="container-fluid my-4">
            <div class="row g-4 mt-1">

                <!-- Inbox Preview -->
                <div class="col-md-4">
                    <div class="card  h-100">
                        <div class="card-header  fw-bold">
                            📥 Inbox Preview (NYCEF Sync)
                        </div>
                        <div class="card-body">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">
                                    <strong>Court Notice</strong> – Motion filed
                                    <br /><small class="text-muted">3m ago</small>
                                </li>
                                <li class="list-group-item">
                                    <strong>Opposing Counsel</strong> filed Answer
                                    <br /><small class="text-muted">6m ago</small>
                                </li>
                                <li class="list-group-item">
                                    <strong>Court Clerk</strong> uploaded Order
                                    <br /><small class="text-muted">10m ago</small>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Internal Messages / Case Notes -->
                <div class="col-md-4">
                    <div class="card  h-100">
                        <div class="card-header bg-white border-0">
                            <h6 class="fw-bold mb-0">💬 Internal Messages / Case Notes</h6>
                        </div>
                        <div class="card-body">
                            <ul class="list-unstyled">
                                <li class="d-flex align-items-center mb-3">
                                    <img src="https://i.pravatar.cc/40?img=21" class="rounded-circle me-3" />
                                    <div>
                                        <span class="fw-bold">John Doe</span> added case note<br />
                                        <small class="text-muted">5m ago</small>
                                    </div>
                                </li>
                                <li class="d-flex align-items-center mb-3">
                                    <img src="https://i.pravatar.cc/40?img=22" class="rounded-circle me-3" />
                                    <div>
                                        <span class="fw-bold">Team Lead</span> assigned new task<br />
                                        <small class="text-muted">9m ago</small>
                                    </div>
                                </li>
                                <li class="d-flex align-items-center">
                                    <img src="https://i.pravatar.cc/40?img=23" class="rounded-circle me-3" />
                                    <div>
                                        <span class="fw-bold">Jane Smith</span> drafted response<br />
                                        <small class="text-muted">15m ago</small>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div class="col-md-4 mb-4">
                    <div class="card task-card h-100">
                        <div class="card-body">
                            <!-- Title -->
                            <h5 class="card-title fw-bold mb-3">
                                <i class="fas fa-tasks text-primary"></i> Task Completion (This Week)
                            </h5>

                            <!-- Progress Bar -->
                            <div class="progress" style="height: 30px; border-radius: 8px; background-color: #f1f3f5;">
                                <div class="progress-bar text-white fw-bold"
                                     role="progressbar"
                                     style="width:@taskCompletion%; background-color:@GetProgressColor(); border-radius: 8px;"
                                     aria-valuenow="@taskCompletion" aria-valuemin="0" aria-valuemax="100">
                                    @($"{taskCompletion}%")
                                </div>
                            </div>

                            <!-- Summary -->
                            <div class="mt-3 d-flex justify-content-between">
                                <span class="fw-semibold text-secondary">Completed:</span>
                                <span class="fw-bold">@completedTasksThisWeek / @totalTasksThisWeek</span>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

    @* Alerts Dashboard Panel *@
    <div class="container-fluid my-4">
           
            <div class="row g-4">
                <!-- Overdue Notices -->
                <div class="col-md-4">
                    <div class="card h-100">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex align-items-center mb-3">
                                <div class="icon bg-danger text-white rounded-circle p-3 me-3"    style=" width: 50px;height: 50px; position: relative;">
                                    <i class="bi bi-exclamation-circle fs-5" style="    position: absolute;top: 24%; right: 30%;"></i>
                                </div>
                                <h5 class="card-title fw-bold mb-0" style="font-size:14px">Overdue Notices</h5>
                            </div>
                            <p class="text-muted flex-grow-1">
                                Automatic alerts for missed deadlines.
                            </p>
                            <small class="text-secondary">
                                e.g., "Predicate Notice response window expired — action needed"
                            </small>
                        </div>
                    </div>
                </div>

                <!-- NYSCEF Auto-Synced Alerts -->
                <div class="col-md-4">
                    <div class="card   h-100">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex align-items-center mb-3">
                                <div class="icon bg-warning text-white rounded-circle p-3 me-3" style=" width: 50px;height: 50px; position: relative;">
                                    <i class="bi bi-bell fs-5" style=" position: absolute;top: 24%; right: 30%;"></i>
                                </div>
                                <h5 class="card-title fw-bold mb-0" style="font-size:14px">NYSCEF Auto-Synced Alerts</h5>
                            </div>
                            <p class="text-muted flex-grow-1">
                                Real-time notifications for court filings.
                            </p>
                            <small class="text-secondary">
                                e.g., "Opposing counsel filed Answer — see attached"
                            </small>
                        </div>
                    </div>
                </div>

                <!-- Case Transfer Notifications -->
                <div class="col-md-4">
                    <div class="card   h-100">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex align-items-center mb-3">
                                <div class="icon bg-info text-white rounded-circle p-3 me-3" style=" width: 50px;height: 50px; position: relative;">
                                    <i class="bi bi-arrow-repeat fs-5" style="    position: absolute;top: 24%; right: 30%;"></i>
                                </div>
                                <h5 class="card-title fw-bold mb-0" style="font-size:14px">Case Transfer Notifications</h5>
                            </div>
                            <p class="text-muted flex-grow-1">
                                Instant updates for case reassignments.
                            </p>
                            <small class="text-secondary">
                                e.g., "Per diem coverage or reassignment alerts"
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    @if (searchResults != null && searchResults.Items.Any())
    {
        <div class="row mt-3 d-flex justify-content-start">
            @foreach (var item in searchResults.Items)
            {
                <div class="col-md-4 mb-3">
                    <div class="card shadow-sm h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="fw-bold mb-0">Search Information</h6>
                                @* <i class="bi bi-search text-navy" style="cursor: pointer; font-size: 16px;"></i> *@
                            </div>

                            <div class="table-responsive">
                                <table class="table table-borderless mb-0">
                                    <tbody>
                                        <tr class="border-bottom">
                                            <td class="fw-bold text-uppercase">Case Code:</td>
                                            <td>@(string.IsNullOrWhiteSpace(item.Casecode) ? "-" : item.Casecode)</td>
                                        </tr>
                                        <tr class="border-bottom">
                                            <td class="fw-bold text-uppercase" style="width: 35%;">Landlord's Name:</td>
                                            <td>@(string.IsNullOrWhiteSpace(item.LandLords?.FirstName + item.LandLords?.LastName) ? "-" : item.LandLords.FirstName + " " + item.LandLords.LastName)</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (isSearched)
    {
        <tr  class="mt-5" style="display:flex; justify-content:center; font-size:14px">
            <td colspan="10" class="text-muted fs-6">  <i class="bi bi-exclamation-circle me-2"></i>No results found.</td>
        </tr>
      
    }


        

    </body>
</div>

<script>
    // Get elements
    var advButton = document.getElementById('advToggleButton');
    var advIcon = document.getElementById('advIcon');
    var advancedCollapse = document.getElementById('advancedFilters');

    // Bootstrap collapse instance
    var bsCollapse = new bootstrap.Collapse(advancedCollapse, {
        toggle: false
    });

    // Button click par toggle hoga
    advButton.addEventListener('click', function () {
        bsCollapse.toggle();
    });

    // Collapse open hone par
    advancedCollapse.addEventListener('shown.bs.collapse', function () {
        advButton.classList.add('active-adv-btn');
        advIcon.innerHTML = "▲"; // arrow up
        advButton.setAttribute("aria-expanded", "true");
    });

    // Collapse close hone par
    advancedCollapse.addEventListener('hidden.bs.collapse', function () {
        advButton.classList.remove('active-adv-btn');
        advIcon.innerHTML = "▼"; // arrow down
        advButton.setAttribute("aria-expanded", "false");
    });
</script>


@code {
    private string searchText;
    private bool isSearched = false;
    private string searchTermStatus = string.Empty;
    private string searchTermDate = string.Empty;


    private PaginationDto<LegalCase> searchResults;
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchTerm = "";

    private string selectedClient = string.Empty;
    private bool clientSuggestionsChecked = false;
    private List<string> clientSuggestions = new List<string>();

    private string selectedReasonholdover = string.Empty;
    private bool reasonholdoverSuggestionsChecked = false;
    private List<string> reasonholdoverSuggestions = new List<string>();

    private string selectedTenant = string.Empty;
    private bool tenantSuggestionsChecked = false;
    private List<string> tenantSuggestions = new List<string>();

    private string selectedCase= string.Empty;
    private bool caseSuggestionsChecked = false;
    private List<string> caseSuggestions = new List<string>();

    private string selectedLandlord = string.Empty;
    private bool landlordSuggestionsChecked = false;
    private List<string> landlordSuggestions = new List<string>();

    private List<List<LegalCase>> legalcaseDto = new();
    private List<LegalCase> TodaylegalcaseDto = new();

    private int ActiveIndex = 0;
    private int totalCases = 0;
    private int activeCases = 0;
    private bool IsPrevDisabled => ActiveIndex == 0;
    private bool IsNextDisabled => ActiveIndex == legalcaseDto.Count - 1;
    private string? loggedInUserId;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            loggedInUserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            isAdmin = user.Claims.Any(c => c.Type == ClaimTypes.Role && c.Value == "Admin");
        }
        totalCases = await _service.GetTotalCasesCountAsync(loggedInUserId , isAdmin);
        activeCases = await _service.GetActiveCasesCountAsync(loggedInUserId, isAdmin);
    }

    private async Task Search()
    {
        // ✅ Check if all search fields are empty
        if (string.IsNullOrWhiteSpace(selectedCase) &&
            string.IsNullOrWhiteSpace(selectedClient) &&
            string.IsNullOrWhiteSpace(selectedTenant) &&
            string.IsNullOrWhiteSpace(selectedLandlord) &&
            string.IsNullOrWhiteSpace(selectedReasonholdover) &&
            string.IsNullOrWhiteSpace(searchTermDate) &&
            string.IsNullOrWhiteSpace(searchTermStatus))
        {
            // Agar koi bhi filter fill nahi kiya gaya
            searchResults = null;
            isSearched = true;

            // Spinner hatao
            spinnerservice.Hide();

            return;
        }

        spinnerservice.Show();
        isSearched = true;

        var filters = new CaseFilterDto
        {
            CaseCode = selectedCase,
            Client = selectedClient,
            Tenant = selectedTenant,
            LandLord = selectedLandlord,
            ReasonHoldover = selectedReasonholdover,
            ActionDate = searchTermDate,
            Status = searchTermStatus
        };
        searchResults = await DashBoardRepository.Search(currentPage, pageSize, filters);

        selectedClient = string.Empty;
        selectedCase = string.Empty;
        selectedTenant = string.Empty;
        selectedLandlord = string.Empty;
        selectedReasonholdover = string.Empty;
        searchTermDate = string.Empty;
        searchTermStatus = string.Empty;

        spinnerservice.Hide();
    }

    private async Task OnClientInput(ChangeEventArgs e)
    {
        selectedClient = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedClient))
        {
            clientSuggestions = await DashBoardRepository.GetClientSuggestions(selectedClient);
            clientSuggestionsChecked = true;
        }
        else
        {
            clientSuggestions = new List<string>();
            clientSuggestionsChecked = false; 
        }
    }

    private async Task OnTenantInput(ChangeEventArgs e)
    {
        selectedTenant = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedTenant))
        {
            tenantSuggestions = await DashBoardRepository.GetTenantSuggestions(selectedTenant);
            tenantSuggestionsChecked = true;
        }
        else
        {
            tenantSuggestions = new List<string>();
            tenantSuggestionsChecked = false;
        }
    }

    private async Task OnCaseInput(ChangeEventArgs e)
    {
        selectedCase = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedCase))
        {
            caseSuggestions = await DashBoardRepository.GetCaseSuggestions(selectedCase);
            caseSuggestionsChecked = true;
        }
        else
        {
            caseSuggestions = new List<string>();
            caseSuggestionsChecked = false;
        }
    }

    private async Task OnLandlordInput(ChangeEventArgs e)
    {
        selectedLandlord = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedLandlord))
        {
            landlordSuggestions = await DashBoardRepository.GetLandlordSuggestions(selectedLandlord);
            landlordSuggestionsChecked = true;
        }
        else
        {
            landlordSuggestions = new List<string>();
            landlordSuggestionsChecked = false;
        }
    }

    private async Task OnReasonHoldoverInput(ChangeEventArgs e)
    {
        selectedReasonholdover = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedReasonholdover))
        {
            reasonholdoverSuggestions = await DashBoardRepository.GetReasonHoldoverSuggestions(selectedReasonholdover);
            reasonholdoverSuggestionsChecked = true;
        }
        else
        {
            reasonholdoverSuggestions = new List<string>();
            reasonholdoverSuggestionsChecked = false;
        }
    }

    private void SelectClient(string client)
    {
        selectedClient = client;
        clientSuggestions.Clear();
        clientSuggestionsChecked = false;
    }

    private void Selectlandlord(string client)
    {
        selectedLandlord = client;
        landlordSuggestions.Clear();
        landlordSuggestionsChecked = false;
    }

    private void SelectTenant(string tenant)
    {
        selectedTenant = tenant;
        tenantSuggestions.Clear();
        tenantSuggestionsChecked = false;
    }

    private void SelectCase(string cases)
    {
        selectedCase = cases;
        caseSuggestions.Clear();
        caseSuggestionsChecked = false;
    }

    private void SelectreasonHoldover(string cases)
    {
        selectedReasonholdover = cases;
        reasonholdoverSuggestions.Clear();
        reasonholdoverSuggestionsChecked = false;
    }

    int totalTasksThisWeek = 25;
    int completedTasksThisWeek = 18;

    // Dynamic percentage
    double taskCompletion => totalTasksThisWeek == 0
    ? 0
    : Math.Round((double)completedTasksThisWeek / totalTasksThisWeek * 100, 0);

    // Dynamic color based on percentage
    private string GetProgressColor()
    {
        if (taskCompletion >= 80) return "#28a745";   
        else if (taskCompletion >= 50) return "#ff6b35"; 
        return "#dc3545";  
    }

    class CaseData
    {
        public string Day { get; set; }
        public int Count { get; set; }
    }


    List<CaseData> nonPayment = new()
    {
        new() { Day="Oct 1", Count=12 },
        new() { Day="Oct 2", Count=19 },
        new() { Day="Oct 3", Count=3 },
        new() { Day="Oct 4", Count=5 },
        new() { Day="Oct 5", Count=2 }
    };

    List<CaseData> holdover = new()
    {
        new() { Day="Oct 1", Count=7 },
        new() { Day="Oct 2", Count=11 },
        new() { Day="Oct 3", Count=5 },
        new() { Day="Oct 4", Count=8 },
        new() { Day="Oct 5", Count=3 }
    };

    List<CaseData> otherType = new()
    {
        new() { Day="Oct 1", Count=4 },
        new() { Day="Oct 2", Count=6 },
        new() { Day="Oct 3", Count=8 },
        new() { Day="Oct 4", Count=2 },
        new() { Day="Oct 5", Count=9 }
    };

    public class CalendarItem
    {
        public string Day { get; set; }
        public int Count { get; set; }
    }

    List<CalendarItem> calendarData = new()
    {
        new CalendarItem{ Day="Mon", Count=4},
        new CalendarItem{ Day="Tue", Count=7},
        new CalendarItem{ Day="Wed", Count=9},
        new CalendarItem{ Day="Thu", Count=5},
        new CalendarItem{ Day="Fri", Count=3}
    };

    public class FinancialItem
    {
        public string Month { get; set; }
        public decimal Billed { get; set; }
        public decimal Collected { get; set; }
    }

    List<FinancialItem> financialData = new List<FinancialItem>
    {
        new FinancialItem{ Month="Jan", Billed=80000, Collected=60000},
        new FinancialItem{ Month="Feb", Billed=90000, Collected=75000},
        new FinancialItem{ Month="Mar", Billed=70000, Collected=50000},
        new FinancialItem{ Month="Apr", Billed=95000, Collected=85000},
    };

    private async Task<List<LegalCase>> GetAllCases()
    {
        return await _service.GetAllAsync();
    }

    private void NextSlide()
    {
        if (ActiveIndex < legalcaseDto.Count - 1)
        {
            ActiveIndex++;
        }
    }

    private void PrevSlide()
    {
        if (ActiveIndex > 0)
        {
            ActiveIndex--;
        }
   }


    bool showDataLabels = false;

    class DataItem
    {
        public string Month { get; set; }
        public double Revenue { get; set; }
    }

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
    }

    List<SeriesColorRange> fillRange = new List<SeriesColorRange>()
                                        {
                                        new SeriesColorRange() {Min = 0, Max = 275000, Color = "red"},
                                        new SeriesColorRange() {Min = 275000, Max = 324000, Color = "orange"},
                                        new SeriesColorRange() {Min = 324000, Max = 10000000, Color = "#06cd06"},
                                        };

    DataItem[] boiled = new DataItem[] {
                                        new DataItem
                                        {
                                        Month = "Jan",
                                        Revenue = 20000
                                        },
                                        new DataItem
                                        {
                                        Month = "Feb",
                                        Revenue = 40000
                                        },
                                        new DataItem
                                        {
                                        Month = "March",
                                        Revenue = 60000
                                        },
                                        new DataItem
                                        {
                                        Month = "April",
                                        Revenue = 80000
                                        },
                                        };

    DataItem[] collected = new DataItem[] {
                                        new DataItem
                                        {
                                        Month = "Jan",
                                        Revenue = 70000
                                        },
                                        new DataItem
                                        {
                                        Month = "Feb",
                                        Revenue = 90000
                                        },
                                        new DataItem
                                        {
                                        Month = "March",
                                        Revenue = 110000
                                        },
                                        new DataItem
                                        {
                                        Month = "April",
                                        Revenue = 50000
                                        },

                                        };


}
