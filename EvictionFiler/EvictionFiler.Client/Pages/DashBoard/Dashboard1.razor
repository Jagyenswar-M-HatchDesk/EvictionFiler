@page "/dashboard" 
@using EvictionFiler.Application.DTOs.DashboardDto
@using EvictionFiler.Application.DTOs.LegalCaseDto
@using EvictionFiler.Application.DTOs.PaginationDto
@using EvictionFiler.Application.Interfaces.IRepository
@using EvictionFiler.Application.Interfaces.IServices
@using EvictionFiler.Client.Jwt
@using EvictionFiler.Client.SpinnerService
@inject SpinnerService spinnerservice
@using EvictionFiler.Client.Components.Layout
@using EvictionFiler.Domain.Entities
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims
@inject JwtAuthStateProviders _authStateProvider
@using System.Globalization

@inject ILegalCaseService _service
@inject ICaseHearingService _caseService
@inject IDashBoardRepository DashBoardRepository;
<style>
    :root {
    /* Light theme with Navy & Gold brand accents */
    --bg: #f6f7fb;
    /* app background */
    --card: #ffffff;
    /* cards */
    --border: #e9edf3;
    /* subtle borders */
    --text: #0f1728;
    /* primary text */
    --muted: #697386;
    /* secondary text */
    --navy: #0f2747;
    /* brand navy */
    --gold: #eab308;
    /* brand gold */
    --indigo: #5b67f2;
    /* supporting accent */
    --success: #10b981;
    /* green */
    --warning: #f59e0b;
    /* amber */
    --info: #06b6d4;
    /* cyan */
    --danger: #ef4444;
    /* red */
    --radius: 16px;
    --shadow: 0 8px 24px rgba(15, 23, 40, .06);
    }

    * {
    box-sizing: border-box
    }

    html,
    body {
    margin: 0;
    font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
    background: var(--bg);
    color: var(--text)
    }

    a {
    text-decoration: none;
    color: inherit
    }

    .container {
    max-width: 1240px;
    margin: 22px auto;
    padding: 0 16px
    }

    /* Topbar */
    .topbar {
    display: flex;
    align-items: center;
    margin-bottom: 6px;
    justify-content: space-between;
    gap: 12px;
    padding: 7px;
    background: var(--card);
    border: 1px solid var(--border);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    flex-wrap: wrap
    }



    .topbar1 {

    gap: 12px;
    padding: 14px;
    background: var(--card);
    border: 1px solid var(--border);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    flex-wrap: wrap
    }

    .brand {
    display: flex;
    align-items: center;
    gap: 10px;
    font-weight: 800;
    color: var(--navy)
    }

    .brand .logo {
    width: 28px;
    height: 28px;
    border-radius: 8px;
    background: linear-gradient(135deg, var(--navy), #274b87)
    }

    /* Search filters */
    .searchbar {
    flex: 1;
    display: flex;
    flex-wrap: wrap;

    margin-top: 10px;
    }

    .searchbar input {
    flex: 1 1 145px;
    padding: 8px 6px;
    border: 1px solid var(--border);
    border-radius: 8px;
    outline: 0;
    font-size: .9rem
    }

    .searchbar button {
    padding: 8px 14px;
    background: var(--navy);
    border: 0;
    border-radius: 8px;
    color: #fff;
    cursor: pointer
    }

    .top-icons {
    display: flex;
    gap: 12px;
    color: #64748b
    }

    /* Greeting */
    .greeting {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin: 14px 0
    }

    .greeting h2 {
    margin: 0;
    font-weight: 800;
    color: var(--navy);
    font-size:24px;

    }

    .chips {
    display: flex;
    gap: 8px;
    flex-wrap: wrap
    }

    .chip {
    border: 1px solid var(--border);
    background: #fff;
    color: #334155;
    padding: 6px 10px;
    border-radius: 999px;
    font-size: .85rem
    }

    /* Grid helpers */
    .grid {
    display: grid;
    gap: 12px
    }

    .cols-4 {
    grid-template-columns: repeat(4, 1fr)
    }

    .cols-3 {
    grid-template-columns: repeat(3, 1fr)
    }

    .cols-2 {
    grid-template-columns: repeat(2, 1fr)
    }

    @@media (max-width:1024px) {

    .cols-4,
    .cols-3 {
    grid-template-columns: repeat(2, 1fr)
    }
    }

    @@media (max-width:640px) {

    .cols-4,
    .cols-3,
    .cols-2 {
    grid-template-columns: 1fr
    }
    }

    /* Cards */
    .card {
    background: var(--card);
    border: 1px solid var(--border);
    border-radius: var(--radius);
    box-shadow: var(--shadow)
    }

    .pad {
    padding: 14px
    }

    .header {
    color: var(--muted);
    font-weight: 700;
    letter-spacing: .3px;
    text-transform: uppercase;
    font-size: .78rem
    }

    .muted {
    color: var(--muted)
    }

    /* Stat tiles */
    .tile {
    position: relative;
    height: 86px;
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 0 16px;
    border: 1px solid var(--border);
    border-radius: 14px;
    background: #fff;
    transition: .2s
    }

    .tile:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 22px rgba(0, 0, 0, .06)
    }

    .tile .icon {
    width: 40px;
    height: 40px;
    border-radius: 12px;
    display: grid;
    place-items: center;
    font-size: 20px;
    background: #0f27470f;
    color: var(--navy);
    border: 1px solid var(--border)
    }

    .tile .count {
    font-size: 1.6rem;
    font-weight: 800
    }

    .tile .label {
    color: var(--muted)
    }

    /* Tabs */
    .tabs {
    display: flex;
    gap: 8px;
    margin: 14px 0
    }

    .tab {
    padding: 8px 12px;
    border: 1px solid var(--border);
    border-radius: 12px;
    background: #fff;
    cursor: pointer
    }

    .tab.active {
    color: #fff;
    background: linear-gradient(135deg, var(--navy), #274b87);
    border-color: transparent
    }

    /*    .tabpanes>section {
    display: none
    } */

    .tabpanes>section.active {
    display: block
    }

    /* Feeds */
    .feed {
    display: flex;
    gap: 10px;
    padding: 10px 0;
    border-bottom: 1px dashed var(--border)
    }

    .feed:last-child {
    border-bottom: 0
    }

    .avatar {
    width: 36px;
    height: 36px;
    border-radius: 10px;
    background: #0f27470f;
    color: var(--navy);
    border: 1px solid var(--border);
    display: grid;
    place-items: center;
    font-weight: 700
    }

    /* Progress */
    .progress {
    height: 12px;
    width: 100%;
    background: #eef2ff;
    border-radius: 999px;
    overflow: hidden
    }

    .bar {
    height: 100%;
    background: linear-gradient(90deg, #facc15, #eab308)
    }

    /* SVG charts */
    .chart {
    height: 250px
    }

    .legend {
    display: flex;
    gap: 14px;
    flex-wrap: wrap;
    font-size: .85rem;
    color: var(--muted)
    }

    .legend i {
    display: inline-block;
    width: 10px;
    height: 10px;
    border-radius: 3px;
    margin-right: 6px
    }

    /* Accordion */
    .accordion .acc-head {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer
    }

    .accordion .acc-body {
    display: none;
    padding-top: 10px
    }

    .accordion.open .acc-body {
    display: block
    }

    footer {
    color: var(--muted);
    text-align: center;
    margin: 28px 0
    }

    .heatmap-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(34px, 1fr));
    gap: 10px;
    margin-top: 15px;
    }

    .day-box {
    width: 40px;
    height: 40px;
    border-radius: 6px;
    transition: background-color 0.3s ease;
    cursor: default;
    }

    .rz-chart {
    box-sizing: border-box;
    position: relative;
    height: 250px !important;
    width: 542px !important;
    margin-left: -40px !important;
    }

    @@media (max-width:640px) {

    .rz-chart {
    box-sizing: border-box;
    position: relative;
    height: 250px !important;
    width: 357px !important;
    margin-left: -40px !important;
    }
    }

    @@media (min-width: 640px) and (max-width: 768px) {
    .rz-chart {
    box-sizing: border-box;
    position: relative;
    height: 250px !important;
    width: 276px !important;
    margin-left: -40px !important;
    }
    }

    @@media (min-width: 768px) and (max-width: 900px) {
    .rz-chart {
    box-sizing: border-box;
    position: relative;
    height: 250px !important;
    width: 385px !important;
    margin-left: -40px !important;
    }
    }

    #pipelineChart {
    width: 100%;
    }

    @@media (max-width: 580px) {
    #pipelineChart .rz-chart-column rect {
    width: 8px !important; /* bars ka width */
    }
    }


</style>

<div class="container">
    <!-- Topbar -->
    <div class="topbar " >
        <div class="brand">
            <div class="logo"></div>
            <div>🏛️ HousingCourtFiler.com</div>
        </div>
        <div class="top-icons">
            <span title="New Action">🟦 New Action</span>
        </div>
    </div>
    <div class="topbar1 card">
        <div>
            <span style="color: grey; font-size: 14px;">CASE SEARCH & FILTERS</span>
        </div>
        <div class="searchbar row">
            <div class="col-md-2 ">
                <input class="form-control search-box"
                placeholder="Search by Case"
                @bind="selectedCase"
                @oninput="OnCaseInput"
                autocomplete="off" />


                <ul class="list-group position-absolute" style="z-index:1000; font-size:14px"
                hidden="@(string.IsNullOrWhiteSpace(selectedCase) || !caseSuggestionsChecked)">
                    @if (caseSuggestions.Any())
                    {
                        @foreach (var suggestion in caseSuggestions)
                        {
                            <li class="list-group-item list-group-item-action"
                            style="cursor:pointer;"
                            @onclick="() => SelectCase(suggestion)">
                                @suggestion
                            </li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item text-muted">
                            No result found
                        </li>
                    }
                </ul>
            </div>     
            <div class="col-md-2 ">
                <input class="form-control search-box"
                placeholder="Search Client by Code/Name"
                @bind="selectedClient"
                @oninput="OnClientInput"
                autocomplete="off" />


                <ul class="list-group position-absolute " style="z-index:1000; font-size:14px"
                hidden="@(string.IsNullOrWhiteSpace(selectedClient) || !clientSuggestionsChecked)">
                    @if (clientSuggestions.Any())
                    {
                        @foreach (var suggestion in clientSuggestions)
                        {
                            <li class="list-group-item list-group-item-action"
                            style="cursor:pointer;"
                            @onclick="() => SelectClient(suggestion)">
                                @suggestion
                            </li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item text-muted">
                            No result found
                        </li>
                    }
                </ul>


            </div>
            <div class="col-md-2 ">
                <input class="form-control search-box" placeholder="Search LandLord by Code/Name" @bind="selectedLandlord"
                @oninput="OnLandlordInput"
                autocomplete="off" />


                <ul class="list-group position-absolute" style="z-index:1000; font-size:14px"
                hidden="@(string.IsNullOrWhiteSpace(selectedLandlord) || !landlordSuggestionsChecked)">
                    @if (landlordSuggestions.Any())
                    {
                        @foreach (var suggestion in landlordSuggestions)
                        {
                            <li class="list-group-item list-group-item-action"
                            style="cursor:pointer;"
                            @onclick="() => Selectlandlord(suggestion)">
                                @suggestion
                            </li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item text-muted">
                            No result found
                        </li>
                    }
                </ul>
            </div>
            <div class="col-md-2 ">
                <input class="form-control search-box"
                placeholder="Search Tenant by Code/Name"
                @bind="selectedTenant"
                @oninput="OnTenantInput"
                autocomplete="off" />


                <ul class="list-group position-absolute" style="z-index:1000; font-size:14px"
                hidden="@(string.IsNullOrWhiteSpace(selectedTenant) || !tenantSuggestionsChecked)">
                    @if (tenantSuggestions.Any())
                    {
                        @foreach (var suggestion in tenantSuggestions)
                        {
                            <li class="list-group-item list-group-item-action"
                            style="cursor:pointer;"
                            @onclick="() => SelectTenant(suggestion)">
                                @suggestion
                            </li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item text-muted">
                            No result found
                        </li>
                    }
                </ul>
            </div>
            <div class="col-md-2 ">

                <input class="form-control search-box"
                placeholder="Search by Index #" 
                />
            </div>
            <div class="col-md-2">
                <button>Search</button>
            </div>


        </div>
        <div class="searchbar">
            <button onclick="@Resetsearch">Reset</button>
        </div>
    </div>

    <!-- Greeting & suggestions -->
    <div class="greeting">
        <h2 id="greet">Good Morning, @loginUser </h2>
        <div class="chips">
            <span class="chip">“Show me holdovers filed this week”</span>
            <span class="chip">“Deadlines in Queens today”</span>
            <span class="chip">“Unpaid invoices > $1,000”</span>
        </div>
    </div>

    <!-- Quick Snapshot tiles (Top Row) -->
    <div class="grid cols-4" style="margin-bottom:12px">
        <a class="tile" href="#hearings">
            <div class="icon">⚖️</div>
            <div>
                <div class="count" id="todayHearings">@totalCasesHearing</div>
                <div class="label">Hearings Today</div>
            </div>
        </a>
        <a class="tile" href="#deadlines">
            <div class="icon">🕔</div>
            <div>
                <div class="count" id="deadlineCount">5</div>
                <div class="label">Due Today / Overdue</div>
            </div>
        </a>
        <a class="tile" href="#filed">
            <div class="icon">📁</div>
            <div>
                <div class="count" id="filedWeek">@totalCases</div>
                <div class="label">Cases Filed This Week</div>
            </div>
        </a>
        <a class="tile" href="#approvals">
            <div class="icon">✅</div>
            <div>
                <div class="count" id="pendingApprovals">4</div>
                <div class="label">Pending Client Approvals</div>
            </div>
        </a>
    </div>

    <div class="grid cols-4" style="margin-bottom:18px">
        <a class="tile" href="#balances">
            <div class="icon">💳</div>
            <div>
                <div class="count" id="openBalances">$12k</div>
                <div class="label">Open Balance Alerts</div>
            </div>
        </a>
        <a class="tile" href="#trust">
            <div class="icon">🏦</div>
            <div>
                <div class="count" id="trustBalances">$8.4k</div>
                <div class="label">Trust Balances</div>
            </div>
        </a>
        <a class="tile" href="#progress">
            <div class="icon">📈</div>
            <div>
                <div class="count" id="taskPct">72%</div>
                <div class="label">Tasks Completed (wk)</div>
            </div>
        </a>
        <a class="tile" href="#alerts">
            <div class="icon">🔔</div>
            <div>
                <div class="count" id="alertCount">6</div>
                <div class="label">Smart Alerts</div>
            </div>
        </a>
    </div>

    <!-- Tabs (Middle/Bottom Rows combined) -->
    <div class="tabs" role="tablist">
        <button class="tab active" data-tab="charts">Charts & Visuals</button>
        <button class="tab" data-tab="alerts">Smart Alerts & Reminders</button>
        <button class="tab" data-tab="activity">Collaboration Feeds</button>
        <button class="tab" data-tab="tips">Practice Tips</button>
    </div>

    <div class="tabpanes">
        <!-- Charts & Visuals -->
        <section id="charts" class="active">
            <div class="grid cols-2">
                <div class="card pad">
                    <div class="header">Case Pipeline — Nonpayment vs Holdover vs Other</div>
                    <div id="pipelineChart" style="margin-top:-50px">
                        <RadzenMediaQuery Query="(max-width: 768px)" Change="OnMediaQueryChange" />


                        <RadzenStack>
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenChart>
                                        <RadzenColumnSeries Data="@pipelineData"
                                        CategoryProperty="Month"
                                        ValueProperty="NonPayment"
                                        Fill="#002B5C" />

                                        <RadzenColumnSeries Data="@pipelineData"
                                        CategoryProperty="Month"
                                        ValueProperty="Holdover"
                                        Fill="#00BFFF" />

                                        <RadzenColumnSeries Data="@pipelineData"
                                        CategoryProperty="Month"
                                        ValueProperty="Other"
                                        Fill="#FFA500" />

                                        <!-- width 22 + gap via spacing -->
                                        <RadzenColumnOptions Radius="2" Width="@columnWidth" />

                                        <!-- axis hidden but padding increased to add gap between categories -->
                                        <RadzenCategoryAxis Visible="false" Padding="30" />
                                        <RadzenLegend Visible="false" />
                                        <RadzenValueAxis Visible="false">
                                            <RadzenGridLines Visible="false" />
                                        </RadzenValueAxis>
                                    </RadzenChart>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </div>






                    <div class="legend"><span><i style="background:var(--navy)"></i>Nonpayment</span><span><i
                            style="background:var(--info)"></i>Holdover</span><span><i
                            style="background:var(--warning)"></i>Other</span>
                    </div>
                </div>
                <div class="card pad">
                    <div class="header">Financial Snapshot — Billed vs Collected</div>
                    <div id="finacialChart" style="margin-top:-50px">
                        <RadzenStack>
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenChart>
                                        <RadzenColumnSeries Data="@financialData"
                                        CategoryProperty="Month"
                                        ValueProperty="Collected"
                                        Fill="#eab308" />

                                        <RadzenColumnSeries Data="@financialData"
                                        CategoryProperty="Month"
                                        ValueProperty="Billed"
                                        Fill="#c4a000" />



                                        <!-- width 22 + gap via spacing -->
                                        <RadzenColumnOptions Radius="2" Width="28" />

                                        <!-- axis hidden but padding increased to add gap between categories -->
                                        <RadzenCategoryAxis Visible="false" Padding="30" />
                                        <RadzenLegend Visible="false" />
                                        <RadzenValueAxis Visible="false">
                                            <RadzenGridLines Visible="false" />
                                        </RadzenValueAxis>
                                    </RadzenChart>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </div>
                    <div class="legend"><span><i style="background:var(--gold)"></i>Collected</span><span><i
                            style="background:#c4a000"></i>Billed</span></div>
                </div>
            </div>
            <div class="grid cols-2" style="margin-top:12px">
                <div class="card pad">
                    <div class="header">Calendar Heatmap — Deadlines & Appearances</div>
                    @* <div id="heatmap" class="chart" style="height:220px"></div> *@
                    <div class="heatmap-grid">
                        @foreach (var day in calendarData)
                        {
                            <div class="day-box" style="background-color:@GetColor(day.Intensity)" title="@day.Date.ToString("MMM dd")">
                            </div>
                        }
                    </div>
                </div>
                <div class="card pad">
                    <div class="header">Task Completion (This Week)</div>
                    <div class="progress" style="margin:8px 0">
                        <div class="bar" style="width:72%"></div>
                    </div>
                    <div class="muted" style="margin-bottom:8px">18 / 25 tasks completed</div>
                    <div id="sparkline" style="margin-bottom:-50px">
                        <RadzenStack>
                            <RadzenChart >
                                <RadzenLineSeries Smooth="true"
                                Data="@revenue2024"
                                CategoryProperty="Date"
                                Title="2024"
                                ValueProperty="task"
                                RenderingOrder="1">
                                    <RadzenSeriesAnnotation Visible = "annotation"
                                    TItem="Datatask"
                                    Data="@revenue2024[7]"
                                    OffsetY="-16"
                                    Text="Acquisition" />

                                    <RadzenSeriesAnnotation Visible="annotation"
                                    TItem="Datatask"
                                    Data="@revenue2024[5]"
                                    OffsetY="-16"
                                    Text="IPO"
                                    Fill="#0a0a0a" />

                                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                                </RadzenLineSeries>

                                <!-- Axes removed -->
                                <RadzenCategoryAxis Visible="false" />
                                <RadzenLegend Visible="false" />
                                <RadzenValueAxis Visible="false">
                                    <RadzenGridLines Visible="false" />
                                </RadzenValueAxis>
                            </RadzenChart>
                        </RadzenStack>

                    </div> 





                </div>
            </div>
        </section>
        <!-- Smart Alerts & Reminders -->
        <section id="alerts" style="margin-top:10px">
            <div class="grid cols-2">
                <div class="card pad accordion" id="acc-cases">
                    <div class="acc-head">
                        <div class="header">Cases Today</div><button class="tab small" data-acc="acc-cases">Expand</button>
                    </div>
                    <div class="acc-body">
                        <div class="feed">
                            <div class="avatar">10</div>
                            <div>
                                <div style="font-weight:600">Hearing — 10:00 AM</div><small class="muted">Brooklyn Housing Part
                                    H</small>
                            </div>
                        </div>
                        <div class="feed">
                            <div class="avatar">1P</div>
                            <div>
                                <div style="font-weight:600">Appearance — 1:00 PM</div><small class="muted">Queens Part T</small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card pad accordion" id="acc-tasks">
                    <div class="acc-head">
                        <div class="header">Pending Tasks</div><button class="tab small" data-acc="acc-tasks">Expand</button>
                    </div>
                    <div class="acc-body">
                        <div style="display:flex; justify-content:space-between; margin:6px 0"><span>Predicate Notice
                                response</span><span
                            style="background:var(--danger); color:#fff; padding:2px 8px; border-radius:999px">Overdue</span>
                        </div>
                        <div style="display:flex; justify-content:space-between; margin:6px 0"><span>Discovery due</span><span
                            style="background:var(--warning); color:#fff; padding:2px 8px; border-radius:999px">Due Today</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="grid cols-3" style="margin-top:12px">
                <div class="card pad"><strong>Overdue Notices</strong>
                    <div style="display:flex; gap:8px; margin-top:8px"><span>⛔</span><small class="muted">“Predicate Notice
                            response window expired — action needed.”</small></div>
                </div>
                <div class="card pad"><strong>NYSCEF Auto‑Synced Alerts</strong>
                    <div style="display:flex; gap:8px; margin-top:8px"><span>🔄</span><small class="muted">“Opposing counsel
                            filed Answer — see attached.”</small></div>
                </div>
                <div class="card pad"><strong>Case Transfer Notifications</strong>
                    <div style="display:flex; gap:8px; margin-top:8px"><span>🔀</span><small class="muted">Per‑diem coverage or
                            reassignment alerts.</small></div>
                </div>
            </div>
        </section>

        <!-- Collaboration & Communication -->
        <section id="activity" style="margin-top:10px">
            <div class="grid cols-3">
                <div class="card pad">
                    <div class="header">Inbox Preview (NYSCEF Sync)</div>
                    <div class="feed">
                        <div class="avatar">CN</div>
                        <div>
                            <div style="font-weight:600">Court Notice — Motion filed</div><small class="muted">3m ago</small>
                        </div>
                    </div>
                    <div class="feed">
                        <div class="avatar">OC</div>
                        <div>
                            <div style="font-weight:600">Opposing Counsel — Answer filed</div><small class="muted">6m ago</small>
                        </div>
                    </div>
                    <div class="feed">
                        <div class="avatar">CC</div>
                        <div>
                            <div style="font-weight:600">Court Clerk — Order uploaded</div><small class="muted">10m ago</small>
                        </div>
                    </div>
                </div>
                <div class="card pad">
                    <div class="header">Internal Messages / Case Notes</div>
                    <div class="feed">
                        <div class="avatar">JD</div>
                        <div>
                            <div style="font-weight:600">John Doe pinned a note</div><small class="muted">5m ago</small>
                        </div>
                    </div>
                    <div class="feed">
                        <div class="avatar">TL</div>
                        <div>
                            <div style="font-weight:600">Team Lead assigned a new task</div><small class="muted">9m ago</small>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>

</div>


@code {
    bool showDataLabels = false;
    private string searchText;
    private bool isSearched = false;
    private string searchTermStatus = string.Empty;
    private string searchTermDate = string.Empty;


    private PaginationDto<LegalCase> searchResults;
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchTerm = "";

    private string selectedClient = string.Empty;
    private bool clientSuggestionsChecked = false;
    private List<string> clientSuggestions = new List<string>();

    private string selectedReasonholdover = string.Empty;
    private bool reasonholdoverSuggestionsChecked = false;
    private List<string> reasonholdoverSuggestions = new List<string>();

    private string selectedTenant = string.Empty;
    private bool tenantSuggestionsChecked = false;
    private List<string> tenantSuggestions = new List<string>();

    private string selectedCase= string.Empty;
    private bool caseSuggestionsChecked = false;
    private List<string> caseSuggestions = new List<string>();

    private string selectedLandlord = string.Empty;
    private bool landlordSuggestionsChecked = false;
    private List<string> landlordSuggestions = new List<string>();

    private List<List<LegalCase>> legalcaseDto = new();
    private List<LegalCase> TodaylegalcaseDto = new();

    private int ActiveIndex = 0;
    private int totalCases = 0;
    private int totalCasesHearing = 0;
    private int activeCases = 0;
    private bool IsPrevDisabled => ActiveIndex == 0;
    private bool IsNextDisabled => ActiveIndex == legalcaseDto.Count - 1;
    private string? loggedInUserId;
    private bool isAdmin = false;
    private string? loginUser { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        loginUser = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;


        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            loggedInUserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            isAdmin = user.Claims.Any(c => c.Type == ClaimTypes.Role && c.Value == "Admin");
        }
        totalCases = await _service.GetTotalCasesCountAsync(loggedInUserId , isAdmin);
        totalCasesHearing = await _caseService.GetAllTodayCaseHearingAsync();
        activeCases = await _service.GetActiveCasesCountAsync(loggedInUserId, isAdmin);
    }

     private async Task Search()
    {
        
        if (string.IsNullOrWhiteSpace(selectedCase) &&
            string.IsNullOrWhiteSpace(selectedClient) &&
            string.IsNullOrWhiteSpace(selectedTenant) &&
            string.IsNullOrWhiteSpace(selectedLandlord) &&
            string.IsNullOrWhiteSpace(selectedReasonholdover) &&
            string.IsNullOrWhiteSpace(searchTermDate) &&
            string.IsNullOrWhiteSpace(searchTermStatus))
        {
           
            searchResults = null;
            isSearched = true;

            spinnerservice.Hide();

            return;
        }

        spinnerservice.Show();
        isSearched = true;

        var filters = new CaseFilterDto
        {
            CaseCode = selectedCase,
            Client = selectedClient,
            Tenant = selectedTenant,
            LandLord = selectedLandlord,
            ReasonHoldover = selectedReasonholdover,
            ActionDate = searchTermDate,
            Status = searchTermStatus
        };
        searchResults = await DashBoardRepository.Search(currentPage, pageSize, filters);

        selectedClient = string.Empty;
        selectedCase = string.Empty;
        selectedTenant = string.Empty;
        selectedLandlord = string.Empty;
        selectedReasonholdover = string.Empty;
        searchTermDate = string.Empty;
        searchTermStatus = string.Empty;

        spinnerservice.Hide();
    }

    private async Task OnClientInput(ChangeEventArgs e)
    {
        selectedClient = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedClient))
        {
            clientSuggestions = await DashBoardRepository.GetClientSuggestions(selectedClient);
            clientSuggestionsChecked = true;
        }
        else
        {
            clientSuggestions = new List<string>();
            clientSuggestionsChecked = false; 
        }
    }

    private async Task OnTenantInput(ChangeEventArgs e)
    {
        selectedTenant = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedTenant))
        {
            tenantSuggestions = await DashBoardRepository.GetTenantSuggestions(selectedTenant);
            tenantSuggestionsChecked = true;
        }
        else
        {
            tenantSuggestions = new List<string>();
            tenantSuggestionsChecked = false;
        }
    }

    private async Task OnCaseInput(ChangeEventArgs e)
    {
        selectedCase = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedCase))
        {
            caseSuggestions = await DashBoardRepository.GetCaseSuggestions(selectedCase);
            caseSuggestionsChecked = true;
        }
        else
        {
            caseSuggestions = new List<string>();
            caseSuggestionsChecked = false;
        }
    }

    private async Task OnLandlordInput(ChangeEventArgs e)
    {
        selectedLandlord = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(selectedLandlord))
        {
            landlordSuggestions = await DashBoardRepository.GetLandlordSuggestions(selectedLandlord);
            landlordSuggestionsChecked = true;
        }
        else
        {
            landlordSuggestions = new List<string>();
            landlordSuggestionsChecked = false;
        }
    }

      private void SelectClient(string client)
    {
        selectedClient = client;
        clientSuggestions.Clear();
        clientSuggestionsChecked = false;
    }

    private void Selectlandlord(string client)
    {
        selectedLandlord = client;
        landlordSuggestions.Clear();
        landlordSuggestionsChecked = false;
    }

    private void SelectTenant(string tenant)
    {
        selectedTenant = tenant;
        tenantSuggestions.Clear();
        tenantSuggestionsChecked = false;
    }

    private void SelectCase(string cases)
    {
        selectedCase = cases;
        caseSuggestions.Clear();
        caseSuggestionsChecked = false;
    }

        private void Resetsearch()
    {
         selectedClient = string.Empty;
        selectedCase = string.Empty;
        selectedTenant = string.Empty;
        selectedLandlord = string.Empty;
        selectedReasonholdover = string.Empty;
        searchTermDate = string.Empty;
        searchTermStatus = string.Empty;
        
    }

     int columnWidth = 15; // default desktop width

    void OnMediaQueryChange(bool matches)
    {
        // matches == true means screen <= 768px
        columnWidth = matches ? 6 : 15;
        StateHasChanged();
    }

    public class CalendarDay
    {
        public DateTime Date { get; set; }
        public int Intensity { get; set; } // 0 se 4 tak
    }

    List<CalendarDay> calendarData = new();

    protected override void OnInitialized()
    {
        var startDate = new DateTime(2025, 9, 1);
        var endDate = new DateTime(2025, 9, 30);
        // Yahan apne data ke hisaab se Intensity assign kar sakte hain
        int[] intensities = new int[]
        {
            0,0,3,0,2,4,4,3,3,2,
            4,1,0,0,2,0,0,0,2,4,
            4,0,1,0,0,4,4,3,4,1,
            4,3,4,4,4,4,4,2,3,0,
            4,4,4,3,3,2,0,1,0,0,
        };

        var idx = 0;
        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            calendarData.Add(new CalendarDay
            {
                Date = date,
                Intensity = intensities[idx]
            });
            idx++;
        }
    }

    string GetColor(int intensity)
    {
        return intensity switch
        {
            0 => "#E0E0E0",    // Light grey (no activity)
            1 => "#A9BBD9",    // Light blue
            2 => "#7B8DC6",    // Medium blue
            3 => "#324B87",    // Dark blue
            4 => "#061D4A",    // Very dark blue (almost navy)
            _ => "#FFFFFF"
        };
    }



    class DataItem
    {
        public string Month { get; set; }
        public double NonPayment { get; set; }
        public double Holdover { get; set; }
        public double Other { get; set; }
    }

    List<DataItem> pipelineData = new List<DataItem>()
                                        {
                                        new DataItem(){Month="Jan", NonPayment=50, Holdover=30, Other=10},
                                        new DataItem(){Month="Feb", NonPayment=100, Holdover=60, Other=15},
                                        new DataItem(){Month="Mar", NonPayment=70, Holdover=95, Other=12},
                                        new DataItem(){Month="Apr", NonPayment=60, Holdover=75, Other=18},
                                        new DataItem(){Month="May", NonPayment=120, Holdover=85, Other=8},
                                        };

    class DataFinacial
    {
        public string Month { get; set; }
        public double Collected { get; set; }
        public double Billed { get; set; }
     
    }


    List<DataFinacial> financialData = new List<DataFinacial>()
                                        {
                                        new DataFinacial(){Month="Jan",Collected=50, Billed=30},
                                        new DataFinacial(){Month="Feb",Collected=100, Billed=60},
                                        new DataFinacial(){Month="Mar",Collected=70, Billed=95},
                                        new DataFinacial(){Month="Apr",Collected=60, Billed=75},
                                        new DataFinacial(){Month="May",Collected=120, Billed=85},
                                        };

                                        
                    @code {
                        bool annotation = false;

                        class Datatask
                        {
                            public string Date { get; set; }
                            public int task { get; set; }
                        }

                        Datatask[] revenue2024 = new Datatask[] {
                                        new Datatask
                                        {
                                        Date = "Jan",
                                        task = 234000
                                        },
                                        new Datatask
                                        {
                                        Date = "Feb",
                                        task = 269000
                                        },
                                        new Datatask
                                        {
                                        Date = "Mar",
                                        task = 233000
                                        },
                                        new Datatask
                                        {
                                        Date = "Apr",
                                        task = 244000
                                        },
                                        new Datatask
                                        {
                                        Date = "May",
                                        task = 214000
                                        },
                                        new Datatask
                                        {
                                        Date = "Jun",
                                        task = 253000
                                        },
                                        new Datatask
                                        {
                                        Date = "Jul",
                                        task = 274000
                                        },
                                        new Datatask
                                        {
                                        Date = "Aug",
                                        task = 284000
                                        },
                                        new Datatask
                                        {
                                        Date = "Sept",
                                        task = 273000
                                        },
                                        new Datatask
                                        {
                                        Date = "Oct",
                                        task = 282000
                                        },
                                        new Datatask
                                        {
                                        Date = "Nov",
                                        task = 289000
                                        },
                                        new Datatask
                                        {
                                        Date = "Dec",
                                        task = 294000
                                        }
                                        };
                    }

}