@using EvictionFiler.Application.DTOs
@using EvictionFiler.Application.DTOs.ClientDto
@using EvictionFiler.Application.Interfaces.IServices

@inject IClientService _clientService
@inject NavigationManager nav
@inject NavigationDataService _dataservice
@inject IJSRuntime JS

<div class="offcanvas offcanvas-end show border-start shadow bg-white"
tabindex="-1" id="createClient"
style="visibility:@(IsVisible ? "visible" : "hidden");"
aria-labelledby="createUserLabel">

    <div class="offcanvas-header border-bottom">
        <h5 class="offcanvas-title fw-bold color-text" id="createUserLabel">Select Client</h5>
        <button type="button" class="btn-close" @onclick="HideAsync" aria-label="Close"></button>
    </div>

    <div class="offcanvas-body p-0">
        <div class="d-flex align-items-center position-relative">
            <!-- CLIENT FORM -->
            <div class="form-wrapper @(activeTab != string.Empty ? "hidden" : "") flex-grow-1 p-3 pe-5">

                <div class="modal-body">
                    @if(IsVisibleClient)
                    {
                        <div class="modal-header">
                            <h5 class="modal-title">Selected Client</h5>
                        </div>
                    }
                    <input class="form-control mb-2" placeholder="Search client..." @oninput="OnInputChanged" @bind-value="showClient" readonly="@IsVisibleClient" />
                    @if(IsVisibleClient)
                    {
                        <span @onclick="ChangeClients"
                              class="text-primary text-decoration-underline"
                              role="button"
                              style="cursor: pointer;">
                            Change Client
                        </span>

                    }

                    @if(!IsVisibleClient)
                    {
                        <div class="modal-header">
                            <h5 class="modal-title">All Client</h5>
                        </div>
                        <ul class="list-group mt-2">
                            @foreach (var client in FilteredClients)
                            {
                                <li class="list-group-item list-group-item-action" @onclick="() => SelectClient(client)">
                                    @(client.FirstName + " " + client.LastName) - (@client.ClientCode)
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <div class="modal-header mt-4">
                            <h5 class="modal-title">Case Name</h5>
                        </div>
                        <input class="form-control mb-2" placeholder="Enter Case Name" @bind-value="_dataservice.CaseName" />
                    }

                </div>
            </div>

            <!-- Vertical Overlay Buttons -->

        </div>


    </div>

    <!-- Footer -->
    <div class="sticky-footer bg-white border-top p-3 d-flex justify-content-end gap-2">
        <button class="btn btn-outline-secondary px-4 fw-semibold" @onclick="HideAsync">Cancel</button>
        <button class="btn bg-navy text-white px-4 fw-semibold" @onclick="SubmitClientAsync">Add Case</button>
    </div>
</div>




@code {
    // [Parameter] public EventCallback<Guid> OnClientSelected { get; set; }

    private List<EditToClientDto> AllClients = new();
    private List<EditToClientDto> FilteredClients = new();
    private EditToClientDto SelectedClient = new();
    private string showClient="";
    private bool IsVisible = false;
    private bool IsVisibleClient = false;
    private string activeTab = string.Empty;

    public async Task Show(List<EditToClientDto> clients)
    {
        IsVisible = true;
        AllClients = clients;
        FilteredClients = AllClients;

        StateHasChanged();
    }

    private void OnInputChanged(ChangeEventArgs e)
    {
        var input = e.Value?.ToString()?.ToLower() ?? "";
        FilteredClients = AllClients
            .Where(c => c.FirstName?.ToLower().Contains(input) == true ||
                        c.LastName?.ToLower().Contains(input) == true ||
                        c.ClientCode?.ToLower().Contains(input) == true)
            .ToList();
    }

    private async Task SelectClient(EditToClientDto client)
    {
        SelectedClient = client;
        // showClient = SelectedClient.FirstName + " " + SelectedClient.LastName + " - (" + SelectedClient.ClientCode + ")";
        showClient = $"{SelectedClient.FirstName} {SelectedClient.LastName} - ({SelectedClient.ClientCode})";
        IsVisibleClient = true;
        //await OnClientSelected.InvokeAsync(clientId);
    }

    private void SetActiveTab(string tab) => activeTab = tab;

    public async Task HideAsync()
    {

        IsVisible = false;

        activeTab = string.Empty;
        StateHasChanged();
    }

    // private async Task SubmitClientAsync()
    // {
    //     if (SelectedClient.Id != Guid.Empty)
    //     {
    //         nav.NavigateTo($"/createcase/{SelectedClient.Id}");
    //     }
    //     else
    //     {
    //         // error message show karo ya logging
    //         await JS.InvokeVoidAsync("alert", "Please select a valid client.");
    //     }
    // }

    private async Task SubmitClientAsync()
    {
        if (SelectedClient.Id != Guid.Empty)
        {
            nav.NavigateTo($"/createcase1/{SelectedClient.Id}");
        }
        else
        {
            // error message show karo ya logging
            await JS.InvokeVoidAsync("alert", "Please select a valid client.");
        }
    }

    private void ChangeClients()
    {
        IsVisibleClient = false;
    }
}
