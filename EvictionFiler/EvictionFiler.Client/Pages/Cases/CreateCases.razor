@page "/createcase/{ClientId}"
@using EvictionFiler.Application.DTOs
@using EvictionFiler.Application.DTOs.ApartmentDto
@using EvictionFiler.Application.DTOs.BuildingDto
@using EvictionFiler.Application.DTOs.ClientDto
@using EvictionFiler.Application.DTOs.LandLordDto
@using EvictionFiler.Application.DTOs.LegalCaseDto
@using EvictionFiler.Application.DTOs.TenantDto
@using EvictionFiler.Application.Interfaces.IRepository
@using EvictionFiler.Application.Interfaces.IServices
@using EvictionFiler.Domain.Entities.Master
@inject IClientRoleRepository ClientRoleRepository
@inject ICaseTypeRepository CaseTypeRepository
@inject ICaseSubTypeRepository CaseSubTypeRepository
@inject IReasonHoldoverRepository ReasonHoldoverRepository
@inject ILandlordSevice _landlordService
@inject IBuildingService _buildingServiceService
@inject ILegalCaseService _legalCaseService
@inject ITenantService _tenantService
@inject IClientService _clientService
@inject NavigationManager nav
@inject NavigationDataService _dataService
@using Blazored.Typeahead
@using EvictionFiler.Domain.Entities

@rendermode InteractiveAuto
<style>
    .stepper-row::-webkit-scrollbar {
    height: 3px; /* thinner scrollbar */
    }

    .stepper-row::-webkit-scrollbar-thumb {
    background-color: #888;
    border-radius: 10px;
    }

    .stepper-row::-webkit-scrollbar-track {
    background: transparent;
    }

    /* For Firefox */
    .stepper-row {
    scrollbar-width: thin;
    scrollbar-color: #888 transparent;
    }

    .stepper-container {
    /*   background-color: #F7F6F3; */
    padding: 30px 20px;
    border-radius: 6px;
    /*   box-shadow: 0 1px 3px rgba(0,0,0,0.1); */
    overflow-x: auto;
    white-space: nowrap;
    }

    .stepper-row {
    display: flex;
    align-items: center;
    gap: 5px;
    min-width: max-content;
    overflow-x: auto; /* move it here */
    white-space: nowrap;
    }


    .stepper-step {
    display: flex;
    align-items: center;
    font-size: 14px;
    font-weight: 500;
    gap: 6px;
    }

    .stepper-step .circle {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 13px;
    flex-shrink: 0;
    }

    .circle.done {
    background-color: #5cb85c;
    color: white;
    }

    .circle.active {
    background-color: #1F365D;
    color: white;
    }

    .circle.upcoming {
    background-color: #ccc;
    color: white;
    }

    .text.done,
    .text.active {
    color: #007bff;
    font-weight: 600;
    }

    .text.upcoming {
    color: #aaa;
    }

    .arrow {
    color: #ccc;
    margin: 0 8px;
    }

    .nav-buttons {
    display: flex;
    gap: 6px;
    }

    .circle.done {
    background-color: #D4A844;
    color: white;
    }

    .text.done,
    .text.active {
    color: #1F365D;
    font-weight: 600;
    }

    .required-label::after {
        content: " *";
        color: red;
    }

    .custom-scroll::-webkit-scrollbar {
        width: 6px;
    }

    .custom-scroll::-webkit-scrollbar-thumb {
        background-color: #ccc;
        border-radius: 3px;
    }

    .custom-scroll {
        scrollbar-width: thin;
    }

    .required-label::after {
        content: " *";
        color: red;
    }

</style>

<!-- upper Step Tracker + Navigation Buttons -->
<div class="stepper-container position-fixed top-0 d-flex justify-content-between align-items-center flex-wrap v-100" style="scrollbar-width: thin;">
    <!-- Stepper Tracker -->
    <div class="stepper-row d-flex align-items-center">

        @for (int i = 0; i < stepTitles.Count; i++)
        {
            var isDone = i < currentStep;
            var isActive = i == currentStep;

            var circleClass = isDone ? "circle done"
            : isActive ? "circle active"
            : "circle upcoming";

            var textClass = isDone ? "text done"
            : isActive ? "text active"
            : "text upcoming";

            <div class="stepper-step">
                <div class="@circleClass">
                    @(isDone ? "✓" : (i + 1).ToString())
                </div>
                <span class="@textClass">@stepTitles[i]</span>

                @if (i < stepTitles.Count - 1)
                {
                    <span class="arrow">→</span>
                }
            </div>
        }
        
    </div>
  
</div>


<!-- Form Content -->
<div class="container-fluid px-4" style="margin-top: 100px; margin-bottom: 100px;">
   
    <div style="height: calc(100vh - 200px); overflow-y: auto;" class="custom-scroll">

     @if (currentStep == 0)
    {

        <div class="mx-auto p-4 border rounded shadow-sm bg-white" >
            <h5 class="text-center text-navy fw-bold">Case Details</h5>
            <hr class="border-gold mb-4" />

            <EditForm Model="@tenantSearchModel">
                <div class="row mb-3 align-items-center">
                        @if (!isTenantSelected)
                        {
                    <label class="col-sm-1 col-form-label fw-semibold text-navy">Tenant</label>
                    <div class="col-sm-10 position-relative">
                        <input type="text"
                               class="form-control"
                               value="@searchtenantText"
                               @oninput="HandleTenantInput"
                                   placeholder="Search tenant by name/code"  style="width:50%"/>

                        @if (filteredTenantList?.Any() == true)
                        {
                         
    bool isCodeSearch = !string.IsNullOrWhiteSpace(searchtenantText) &&
                        (char.IsDigit(searchtenantText[0]) || searchtenantText.ToLower().StartsWith("t")); // adjust prefix if needed


<ul class="list-group position-absolute w-100 shadow-sm z-3 mt-1"
    style="max-height: 200px; overflow-y: auto;">
    @foreach (var item in filteredTenantList)
    {
        <li class="list-group-item list-group-item-action"
            style="cursor: pointer;"
            @onclick="@(() => SelectTenant(item.Id))">
            @if (isCodeSearch)
            {
                <span>@item.TenantCode (@item.FirstName)</span>
            }
            else
            {
                <span>@item.FirstName (@item.TenantCode)</span>
            }
        </li>
    }
</ul>

                        }
                        else if (hasSearched && !string.IsNullOrWhiteSpace(searchtenantText))
                        {
                            <ul class="list-group position-absolute w-100 shadow-sm z-3 mt-1">
                                <li class="list-group-item text-muted">No matching tenants found.</li>
                            </ul>
                        }
                    </div>
                    }
                </div>
            </EditForm>

                @if (TenantDetails != null)
                {

                    <EditForm EditContext="@editContext">
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <InputRadioGroup @bind-Value="legalcaseDto.ReasonHoldoverId" class="mb-3 required-label">
                                    <div class="row align-items-center">
                                        <div class="col-auto">
                                            <label class="form-label mb-0" style="margin-top:5px">Reason Holdover:</label>
                                        </div>
                                        <div class="col">
                                            <div class="d-flex flex-wrap align-items-center gap-4">
                                                @foreach (var role in ReasonHoldoverList)
                                                {
                                                    <div class="d-flex align-items-center gap-2" @key="role.Id">
                                                        <div class="form-check d-flex align-items-center m-0">
                                                            <InputRadio class="form-check-input me-1" Value="@role.Id" />
                                                            <label class="form-check-label ms-1" style="margin-top:5px">
                                                                @role.Name
                                                            </label>
                                                        </div>

                                                        @if (legalcaseDto.ReasonHoldoverId == role.Id && role.Name == "Other")
                                                        {
                                                            <InputText class="form-control"
                                                                       placeholder="Please specify"
                                                                       style="max-width: 200px; height: 36px;"
                                                                       @bind-Value="legalcaseDto.ReasonDescription" />
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </InputRadioGroup>

                            </div>
                          
                           
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-12 d-flex align-items-center">
                                <label class="form-label fw-semibold me-3" style="min-width: 100px;">Explain:</label>
                                <InputText class="form-control" @bind-Value="legalcaseDto.ExplainDescription" placeholder="Enter Explanation" style="width: 50%;" />
                            </div>
                        </div>

                    </EditForm>
                    <div class="row mt-4">
                        <div class="col-md-12">
                            <div class="border rounded p-3 bg-light">
       
                                <div class="card shadow-sm">
                                    <div class="card-body">

                                        <!-- SECTION 1: TENANT DETAILS -->
                                        <h6 class="fw-bold text-primary mb-3">Tenant Details</h6>

                                      
                                        <div class="row mb-2">
                                            <div class="col-2 fw-semibold text-navy">Name:</div>
                                            <div class="col-4">@($"{TenantDetails.FirstName ?? ""} {TenantDetails.LastName ?? ""}".Trim() == "" ? "-" : $"{TenantDetails.FirstName} {TenantDetails.LastName}")</div>
                                            <div class="col-2 fw-semibold text-navy">Code:</div>
                                            <div class="col-4">@(!string.IsNullOrWhiteSpace(TenantDetails.TenantCode) ? TenantDetails.TenantCode : "-")</div>
                                        </div>

                                        <div class="row mb-2">
                                            <div class="col-2 fw-semibold text-navy">Email:</div>
                                            <div class="col-4">@(!string.IsNullOrWhiteSpace(TenantDetails.Email) ? TenantDetails.Email : "-")</div>
                                            <div class="col-2 fw-semibold text-navy">Phone:</div>
                                            <div class="col-4">@(!string.IsNullOrWhiteSpace(TenantDetails.Phone) ? TenantDetails.Phone : "-")</div>
                                        </div>

                                        <div class="row mb-2">
                                            <div class="col-2 fw-semibold text-navy">Language:</div>
                                            <div class="col-4">@(!string.IsNullOrWhiteSpace(TenantDetails.LanguageName) ? TenantDetails.LanguageName : "-")</div>
                                            <div class="col-2 fw-semibold text-navy">Unit/Apt No.:</div>
                                            <div class="col-4">@(!string.IsNullOrWhiteSpace(TenantDetails.UnitOrApartmentNumber) ? TenantDetails.UnitOrApartmentNumber : "-")</div>
                                        </div>

                                        <div class="row mb-2">
                                            <div class="col-3 fw-semibold text-navy">Is Unit Illegal:</div>
                                            <div class="col-3">@(!string.IsNullOrWhiteSpace(TenantDetails.IsUnitIllegalName) ? TenantDetails.IsUnitIllegalName : "-")</div>
                                            <div class="col-3 fw-semibold text-navy">Tenant of Record:</div>
                                            <div class="col-3">@((TenantDetails.TenantRecord.HasValue) ? (TenantDetails.TenantRecord.Value ? "Yes" : "No") : "-")</div>
                                        </div>

                                        <div class="row mb-2">
                                            <div class="col-3 fw-semibold text-navy">Still in Possession:</div>
                                            <div class="col-3">@((TenantDetails.HasPossession.HasValue) ? (TenantDetails.HasPossession.Value ? "Yes" : "No") : "-")</div>
                                            <div class="col-3 fw-semibold text-navy">Other Occupants:</div>
                                            <div class="col-3">@((TenantDetails.OtherOccupants.HasValue) ? (TenantDetails.OtherOccupants.Value ? "Yes" : "No") : "-")</div>
                                        </div>

                                        <div class="row mb-2">
                                            <div class="col-3 fw-semibold text-navy">Date Rent Due:</div>
                                            <div class="col-3">@(!string.IsNullOrWhiteSpace(TenantDetails.LastMonthWeekRentPaid) ? TenantDetails.LastMonthWeekRentPaid : "-")</div>
                                            <div class="col-3 fw-semibold text-navy">Monthly Rent:</div>
                                            <div class="col-3">@((TenantDetails.MonthlyRent.HasValue) ? TenantDetails.MonthlyRent.Value.ToString("C") : "-")</div>
                                        </div>

                                        <div class="row mb-2">
                                            <div class="col-3 fw-semibold text-navy">Tenant's Share:</div>
                                            <div class="col-3">@((TenantDetails.TenantShare.HasValue) ? TenantDetails.TenantShare.Value.ToString("C") : "-")</div>
                                            <div class="col-3 fw-semibold text-navy">Total Rent Owed:</div>
                                            <div class="col-3">@((TenantDetails.TotalRentOwed.HasValue) ? TenantDetails.TotalRentOwed.Value.ToString("C") : "-")</div>
                                        </div>

                                        <div class="row mb-2">
                                            <div class="col-3 fw-semibold text-navy">Social Services:</div>
                                            <div class="col-3">@(!string.IsNullOrWhiteSpace(TenantDetails.SocialServices) ? TenantDetails.SocialServices : "-")</div>
                                            <div class="col-3 fw-semibold text-navy">ERAP Received:</div>
                                            <div class="col-3">@((TenantDetails.ERAPPaymentReceivedDate.HasValue) ? TenantDetails.ERAPPaymentReceivedDate.Value.ToShortDateString() : "-")</div>
                                        </div>

                                        <div class="row mb-2">
                                            <div class="col-3 fw-semibold text-navy">Renewal Offered:</div>
                                            <div class="col-3">@((TenantDetails.RenewalOffer.HasValue) ? (TenantDetails.RenewalOffer.Value ? "Yes" : "No") : "-")</div>
                                            <div class="col-3 fw-semibold text-navy">Tenancy Type:</div>
                                            <div class="col-3">@(!string.IsNullOrWhiteSpace(TenantDetails.TenancyTypeName) ? TenantDetails.TenancyTypeName : "-")</div>
                                        </div>


                                        <!-- SECTION 2: PROPERTY / BUILDING -->
                                        @if (TenantDetails.Building != null)
                                        {
                                       
                                            <h6 class="fw-bold mt-4 text-success">Building Details</h6>
                                            <div class="row mb-2">
                                                <div class="col-3 fw-semibold text-navy">MDR Number:</div>
                                                <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Building.MDRNumber) ? "-" : TenantDetails.Building.MDRNumber)</div>
                                                <div class="col-3 fw-semibold text-navy">Regulation Status:</div>
                                                <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Building.RegulationStatusName) ? "-" : TenantDetails.Building.RegulationStatusName)</div>
                                            </div>
                                            <div class="row mb-2">
                                                <div class="col-3 fw-semibold text-navy">Address:</div>
                                                <div class="col-3">
                                                    @(string.IsNullOrWhiteSpace($"{TenantDetails.Building.Address1}{TenantDetails.Building.Address2}{TenantDetails.Building.City}{TenantDetails.Building.StateName}{TenantDetails.Building.Zipcode}")
                                                                                            ? "-" : $"{TenantDetails.Building.Address1}, {TenantDetails.Building.Address2}, {TenantDetails.Building.City}, {TenantDetails.Building.StateName} - {TenantDetails.Building.Zipcode}")
                                    </div>
                                                <div class="col-3 fw-semibold text-navy">Building Units:</div>
                                                <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Building.BuildingUnits) ? "-" : TenantDetails.Building.BuildingUnits)</div>
                                            </div>
                                        }

                                        <!-- SECTION 3: LANDLORD -->
                                        @if (TenantDetails.Landlord != null)
                                        {
                                            <h6 class="fw-bold mt-4 text-danger">Landlord Details</h6>
                                              <div class="row mb-2">
                                                <div class="col-3 fw-semibold text-navy">Name:</div>
                                                <div class="col-3">@TenantDetails.Landlord.FirstName @TenantDetails.Landlord.LastName </div>
                                                <div class="col-3 fw-semibold text-navy">LandLord Code:</div>
                                                <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Landlord.LandLordCode) ? "-" : TenantDetails.Landlord.LandLordCode)</div>
                                           
                                            </div>
                                           
                                            <div class="row mb-2">
                                                <div class="col-3 fw-semibold text-navy">Phone:</div>
                                                <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Landlord.Phone) ? "-" : TenantDetails.Landlord.Phone)</div>
                                                <div class="col-3 fw-semibold text-navy">Email:</div>
                                                <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Landlord.Email) ? "-" : TenantDetails.Landlord.Email)</div>
                                           
                                            </div>

                                            <div class="row mb-2">
                                                <div class="col-3 fw-semibold text-navy">Date of Referee Deed:</div>
                                                <div class="col-3">@TenantDetails.Landlord.DateOfRefreeDeed</div>
                                                <div class="col-3 fw-semibold text-navy">Landlord Type:</div>
                                                <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Landlord.LandlordTypeName) ? "-" : TenantDetails.Landlord.LandlordTypeName)</div>
                                            </div>
                                            <div class="row mb-2">
                                                <div class="col-3 fw-semibold text-navy">Address:</div>
                                                <div class="col-9">
                                                    @(string.IsNullOrWhiteSpace($"{TenantDetails.Landlord.Address1}{TenantDetails.Landlord.Address2}{TenantDetails.Landlord.City}{TenantDetails.Landlord.StateName}{TenantDetails.Landlord.Zipcode}")
                                                                                            ? "-" : $"{TenantDetails.Landlord.Address1}, {TenantDetails.Landlord.Address2}, {TenantDetails.Landlord.City}, {TenantDetails.Landlord.StateName} - {TenantDetails.Landlord.Zipcode}")
                                    </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

        </div>
    }

        @if (currentStep == 1)
        {
            <div class="mx-auto p-4 border rounded shadow-sm bg-white">
                <h5 class="text-center text-navy fw-bold">Summary View</h5>
                <hr class="border-gold mb-4" />

                @if (TenantDetails != null)
                {
                    <div class="card shadow-sm mb-4">
                        <div class="card-body">
                            <h6 class="fw-bold text-primary mb-3">Tenant Details</h6>


                            <div class="row mb-2">
                                <div class="col-2 fw-semibold text-navy">Name:</div>
                                <div class="col-4">@($"{TenantDetails.FirstName ?? ""} {TenantDetails.LastName ?? ""}".Trim() == "" ? "-" : $"{TenantDetails.FirstName} {TenantDetails.LastName}")</div>
                                <div class="col-2 fw-semibold text-navy">Code:</div>
                                <div class="col-4">@(!string.IsNullOrWhiteSpace(TenantDetails.TenantCode) ? TenantDetails.TenantCode : "-")</div>
                            </div>

                            <div class="row mb-2">
                                <div class="col-2 fw-semibold text-navy">Email:</div>
                                <div class="col-4">@(!string.IsNullOrWhiteSpace(TenantDetails.Email) ? TenantDetails.Email : "-")</div>
                                <div class="col-2 fw-semibold text-navy">Phone:</div>
                                <div class="col-4">@(!string.IsNullOrWhiteSpace(TenantDetails.Phone) ? TenantDetails.Phone : "-")</div>
                            </div>

                            <div class="row mb-2">
                                <div class="col-2 fw-semibold text-navy">Language:</div>
                                <div class="col-4">@(!string.IsNullOrWhiteSpace(TenantDetails.LanguageName) ? TenantDetails.LanguageName : "-")</div>
                                <div class="col-2 fw-semibold text-navy">Unit/Apt No.:</div>
                                <div class="col-4">@(!string.IsNullOrWhiteSpace(TenantDetails.UnitOrApartmentNumber) ? TenantDetails.UnitOrApartmentNumber : "-")</div>
                            </div>

                            <div class="row mb-2">
                                <div class="col-3 fw-semibold text-navy">Is Unit Illegal:</div>
                                <div class="col-3">@(!string.IsNullOrWhiteSpace(TenantDetails.IsUnitIllegalName) ? TenantDetails.IsUnitIllegalName : "-")</div>
                                <div class="col-3 fw-semibold text-navy">Tenant of Record:</div>
                                <div class="col-3">@((TenantDetails.TenantRecord.HasValue) ? (TenantDetails.TenantRecord.Value ? "Yes" : "No") : "-")</div>
                            </div>

                            <div class="row mb-2">
                                <div class="col-3 fw-semibold text-navy">Still in Possession:</div>
                                <div class="col-3">@((TenantDetails.HasPossession.HasValue) ? (TenantDetails.HasPossession.Value ? "Yes" : "No") : "-")</div>
                                <div class="col-3 fw-semibold text-navy">Other Occupants:</div>
                                <div class="col-3">@((TenantDetails.OtherOccupants.HasValue) ? (TenantDetails.OtherOccupants.Value ? "Yes" : "No") : "-")</div>
                            </div>

                            <div class="row mb-2">
                                <div class="col-3 fw-semibold text-navy">Date Rent Due:</div>
                                <div class="col-3">@(!string.IsNullOrWhiteSpace(TenantDetails.LastMonthWeekRentPaid) ? TenantDetails.LastMonthWeekRentPaid : "-")</div>
                                <div class="col-3 fw-semibold text-navy">Monthly Rent:</div>
                                <div class="col-3">@((TenantDetails.MonthlyRent.HasValue) ? TenantDetails.MonthlyRent.Value.ToString("C") : "-")</div>
                            </div>

                            <div class="row mb-2">
                                <div class="col-3 fw-semibold text-navy">Tenant's Share:</div>
                                <div class="col-3">@((TenantDetails.TenantShare.HasValue) ? TenantDetails.TenantShare.Value.ToString("C") : "-")</div>
                                <div class="col-3 fw-semibold text-navy">Total Rent Owed:</div>
                                <div class="col-3">@((TenantDetails.TotalRentOwed.HasValue) ? TenantDetails.TotalRentOwed.Value.ToString("C") : "-")</div>
                            </div>

                            <div class="row mb-2">
                                <div class="col-3 fw-semibold text-navy">Social Services:</div>
                                <div class="col-3">@(!string.IsNullOrWhiteSpace(TenantDetails.SocialServices) ? TenantDetails.SocialServices : "-")</div>
                                <div class="col-3 fw-semibold text-navy">ERAP Received:</div>
                                <div class="col-3">@((TenantDetails.ERAPPaymentReceivedDate.HasValue) ? TenantDetails.ERAPPaymentReceivedDate.Value.ToShortDateString() : "-")</div>
                            </div>

                            <div class="row mb-2">
                                <div class="col-3 fw-semibold text-navy">Renewal Offered:</div>
                                <div class="col-3">@((TenantDetails.RenewalOffer.HasValue) ? (TenantDetails.RenewalOffer.Value ? "Yes" : "No") : "-")</div>
                                <div class="col-3 fw-semibold text-navy">Tenancy Type:</div>
                                <div class="col-3">@(!string.IsNullOrWhiteSpace(TenantDetails.TenancyTypeName) ? TenantDetails.TenancyTypeName : "-")</div>
                            </div>

                        </div>
                    </div>

                    @if (TenantDetails.Building != null)
                    {
                        <div class="card shadow-sm mb-4">
                            <div class="card-body">
                        <h6 class="fw-bold mt-4 text-success">Property Details</h6>
                        <div class="row mb-2">
                            <div class="col-3 fw-semibold text-navy">MDR Number:</div>
                            <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Building.MDRNumber) ? "-" : TenantDetails.Building.MDRNumber)</div>
                            <div class="col-3 fw-semibold text-navy">Regulation Status:</div>
                            <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Building.RegulationStatusName) ? "-" : TenantDetails.Building.RegulationStatusName)</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-3 fw-semibold text-navy">Address:</div>
                            <div class="col-3">
                                @(string.IsNullOrWhiteSpace($"{TenantDetails.Building.Address1}{TenantDetails.Building.Address2}{TenantDetails.Building.City}{TenantDetails.Building.StateName}{TenantDetails.Building.Zipcode}")
                                                    ? "-" : $"{TenantDetails.Building.Address1}, {TenantDetails.Building.Address2}, {TenantDetails.Building.City}, {TenantDetails.Building.StateName} - {TenantDetails.Building.Zipcode}")
                </div>
                <div class="col-3 fw-semibold text-navy">Building Units:</div>
                <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Building.BuildingUnits) ? "-" : TenantDetails.Building.BuildingUnits)</div>
            </div>
                </div>
            </div>
                        }

                    @if (TenantDetails.Landlord != null)
                    {
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h6 class="fw-bold mt-4 text-danger">Landlord Details</h6>
                                <div class="row mb-2">
                                    <div class="col-3 fw-semibold text-navy">Name:</div>
                                    <div class="col-3">@TenantDetails.Landlord.FirstName @TenantDetails.Landlord.LastName </div>
                                    <div class="col-3 fw-semibold text-navy">LandLord Code:</div>
                                    <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Landlord.LandLordCode) ? "-" : TenantDetails.Landlord.LandLordCode)</div>

                                </div>

                                <div class="row mb-2">
                                    <div class="col-3 fw-semibold text-navy">Phone:</div>
                                    <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Landlord.Phone) ? "-" : TenantDetails.Landlord.Phone)</div>
                                    <div class="col-3 fw-semibold text-navy">Email:</div>
                                    <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Landlord.Email) ? "-" : TenantDetails.Landlord.Email)</div>

                                </div>

                                <div class="row mb-2">
                                    <div class="col-3 fw-semibold text-navy">Date of Referee Deed:</div>
                                    <div class="col-3">@TenantDetails.Landlord.DateOfRefreeDeed</div>
                                    <div class="col-3 fw-semibold text-navy">Landlord Type:</div>
                                    <div class="col-3">@(string.IsNullOrWhiteSpace(TenantDetails.Landlord.LandlordTypeName) ? "-" : TenantDetails.Landlord.LandlordTypeName)</div>
                                </div>
                                <div class="row mb-2">
                                    <div class="col-3 fw-semibold text-navy">Address:</div>
                                    <div class="col-9">
                                        @(string.IsNullOrWhiteSpace($"{TenantDetails.Landlord.Address1}{TenantDetails.Landlord.Address2}{TenantDetails.Landlord.City}{TenantDetails.Landlord.StateName}{TenantDetails.Landlord.Zipcode}")
                                                                    ? "-" : $"{TenantDetails.Landlord.Address1}, {TenantDetails.Landlord.Address2}, {TenantDetails.Landlord.City}, {TenantDetails.Landlord.StateName} - {TenantDetails.Landlord.Zipcode}")
                        </div>
                    </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted text-center">No tenant selected.</p>
                }
            </div>
        }

</div>
</div>

<!-- bottom Button Group -->
<div class="container my-4" style="position:fixed ; bottom:-17px;">
    <div >
        <hr />
    </div>
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <!-- Left Button -->
        <button class="btn bg-navy text-white" @onclick="Back" disabled="@(currentStep == 0)">← Back</button>

        <!-- Right Buttons -->
        <div class="d-flex gap-2" style="position:fixed; right:40px">
            @if (currentStep < lastStep)
            {
                <button class="btn btn-outline-warning" @onclick="ResetStep">Reset</button>
                <button class="btn bg-gold text-white" @onclick="Next" disabled="@IsNextDisabled">Next →</button>
            }
            @if (currentStep == lastStep)
            {
                <button class="btn btn-outline-warning" @onclick="ResetStep">Reset</button>
                <button class="btn btn-outline-warning" @onclick="SaveAsDraft">Save As Draft</button>
                <button class="btn btn-success" disabled="@IsNextDisabled" @onclick="Submit">Submit</button>
            }
        </div>
    </div>

</div>

@code {
    [Parameter] public string ClientId { get; set; }
    private CreateToEditLegalCaseModel legalcaseDto = new CreateToEditLegalCaseModel();
    int currentStep = 0;
    int lastStep = 1;
    private EditContext editContext;
    // Used for conditional rendering
    private bool hasSearched = false;

    private TenantSearchModel tenantSearchModel = new();
    private string searchtenantText = "";
    private List<EditToTenantDto> filteredTenantList = new();
    private CreateToLandLordDto? selectedLandlord;
    private CreateToBuildingDto? selectedBuilding;
    private CreateToTenantDto? selectedTenant;
    private bool isLandlordSelected = false;
    private bool isBuildingSelected = false;
    private bool isTenantSelected = false;
    private LandlordWithBuildings? landlordDetails;
    private BuildingWithTenant? buildingDetails;
    private EditToTenantDto? TenantDetails;

    private EditToTenantDto tenantDto = new EditToTenantDto();
    private EditToLandlordDto landLordDto = new EditToLandlordDto();
    private EditToBuildingDto apartmentDto = new EditToBuildingDto();

    private EditToClientDto clientDto = new EditToClientDto();

    private List<CreateToTenantDto> matchedTenants = new List<CreateToTenantDto>();
    private List<CreateToLandLordDto> matchedLandLords = new List<CreateToLandLordDto>();
    private List<CreateToClientDto> matchedClients = new List<CreateToClientDto>();
    private List<CreateToBuildingDto> matchedBuilding = new List<CreateToBuildingDto>();
    private bool showSuggestions = false;

    public List<ReasonHoldover> ReasonHoldoverList = new();


    protected override async Task OnInitializedAsync()
    {
        legalcaseDto = new CreateToEditLegalCaseModel();
        editContext = new EditContext(legalcaseDto);
       ReasonHoldoverList = await ReasonHoldoverRepository.GetAllTReasonHoldover();
        
        legalcaseDto.ClientId = Guid.Parse(ClientId);
    }

    List<string> stepTitles = new() {
        "Create Cases", "View"

    };


    private string selectedClientRoleName => ClientRoleList.FirstOrDefault(x => x.Id == legalcaseDto.ClientRoleId)?.Name;

    private async Task OnCaseTypeChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var selectedGuid))
        {
            legalcaseDto.CaseTypeId = selectedGuid;

            var selectedType = caseTypes.FirstOrDefault(ct => ct.Id == selectedGuid);
            selectedCaseTypeName = selectedType?.Name;

            if (selectedCaseTypeName == "Holdover")
            {
                caseSubTypes = await CaseSubTypeRepository.GetSubTypesByCaseTypeIdAsync(selectedGuid);
            }
            else
            {
                caseSubTypes = new();
                legalcaseDto.CaseSubTypeId = null;
            }

            // Force UI refresh
            StateHasChanged();
        }
    }

    private void Next()
    {
    
        currentStep++;
    }

    private bool IsNextDisabled =>  
        (currentStep == 0 && (
            TenantDetails == null ||
            string.IsNullOrWhiteSpace(TenantDetails.FirstName)
        ));

    private async Task HandleInput(ChangeEventArgs e)
    {
        searchText = e?.Value?.ToString() ?? "";
        hasSearched = true;
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            filteredList = await _landlordService.SearchLandlordsAsync(searchText, Guid.Parse(ClientId));

        }
        else
        {
            filteredList.Clear();
        }

    }

    private async Task HandleTenantInput(ChangeEventArgs e)
    {
        searchtenantText = e?.Value?.ToString() ?? "";
        hasSearched = true;

        Console.WriteLine($"Search Text: {searchtenantText}");
        Console.WriteLine($"Client ID: {legalcaseDto.ClientId}");

        if (!string.IsNullOrWhiteSpace(searchtenantText) && legalcaseDto.ClientId != Guid.Empty)
        {
            filteredTenantList = await _tenantService.SearchTenantsAsync(searchtenantText, legalcaseDto.ClientId);
        }
        else
        {
            filteredTenantList.Clear();
        }
    }


    private async Task HandleBuildingInput(ChangeEventArgs e)
    {
        searchBuildingText = e?.Value?.ToString() ?? "";

        if (!string.IsNullOrWhiteSpace(searchBuildingText) && landLordDto != null)
        {
            filteredBuildingList = await _buildingServiceService.SearchBuildingByCode(searchBuildingText, landLordDto.Id);
        }
        else
        {
            filteredBuildingList.Clear();
        }
    }

    private async Task SelectLandlord(Guid id)
    {
        landlordDetails = await _landlordService.GetLandlordWithBuildingsAsync(id);

        if (landlordDetails?.Landlord != null)
        {
            var fullName = $"{landlordDetails.Landlord.FirstName} {landlordDetails.Landlord.LastName}";

            searchText = fullName;
            landlordSearchModel.SelectedLandlord = fullName;

            landLordDto = landlordDetails.Landlord;
        }

        filteredList.Clear();
        hasSearched = false;
        isLandlordSelected = true;
        searchText = "";
        StateHasChanged();
    }

    private async Task SelectBuilding(Guid id)
    {
        buildingDetails = await _buildingServiceService.GetBuildingsWithTenantAsync(id);

        if (buildingDetails != null)
        {
            searchBuildingText = buildingDetails.Building.BuildingCode;
            buildingSearchModel.SelectedBuilding = buildingDetails.Building.BuildingCode;
            apartmentDto = buildingDetails.Building;
        }

        filteredBuildingList.Clear();
        isBuildingSelected = true;
        hasSearched = false;
    }

    private async Task SelectTenant(Guid id)
    {
        TenantDetails = await _tenantService.GetByIdAsync(id);

        if (TenantDetails != null)
        {
            var fullName = $"{TenantDetails.FirstName} {TenantDetails.LastName}";
            searchtenantText = fullName;
            tenantSearchModel.SelectedTenant = fullName;

            // ✅ Create and assign tenantDto properly
            tenantDto = new EditToTenantDto
           {
               Id = TenantDetails.Id,
                FirstName = TenantDetails.FirstName,
                LastName = TenantDetails.LastName,
                SSN = TenantDetails.SSN,
                Phone = TenantDetails.Phone,
                Email = TenantDetails.Email,
                LanguageId = TenantDetails.LanguageId,
                Borough = TenantDetails.Borough,
                HasPossession = TenantDetails.HasPossession,
                HasRegulatedTenancy = TenantDetails.HasRegulatedTenancy,
                Name_Relation = TenantDetails.Name_Relation,
                OtherOccupants = TenantDetails.OtherOccupants,
                Registration_No = TenantDetails.Registration_No,
                TenantRecord = TenantDetails.TenantRecord,
                HasPriorCase = TenantDetails.HasPriorCase,
                TenancyTypeId = TenantDetails.TenancyTypeId,
                RenewalOffer = TenantDetails.RenewalOffer,
                RentDueEachMonthOrWeek = TenantDetails.RentDueEachMonthOrWeek,
                SocialServices = TenantDetails.SocialServices,
                MonthlyRent = TenantDetails.MonthlyRent,
                LastMonthWeekRentPaid = TenantDetails.LastMonthWeekRentPaid,
                TenantShare = TenantDetails.TenantShare,
                ERAPPaymentReceivedDate = TenantDetails.ERAPPaymentReceivedDate,
                UnitOrApartmentNumber = TenantDetails.UnitOrApartmentNumber,
                TotalRentOwed = TenantDetails.TotalRentOwed,
                IsUnitIllegalId = TenantDetails.IsUnitIllegalId,
                BuildingId = TenantDetails.BuildingId,
                Building = TenantDetails.Building,
                Landlord = TenantDetails.Landlord,



            };
        }

     

        isTenantSelected = true;
        searchtenantText= "";
        filteredTenantList.Clear();
        hasSearched = false;
    }


    private void ResetStep()
    {
        switch (currentStep)
        {

            case 0:
                TenantDetails = null;
                isTenantSelected = false;
                searchtenantText = string.Empty;
                filteredTenantList?.Clear();
                break;
        }

        StateHasChanged(); 
    }

    void SaveAsDraft() => Console.WriteLine("Saving Draft...");

    void Back() => currentStep--;


    private async Task Submit()
    {
        var result = false;

        if (legalcaseDto == null || legalcaseDto.Id == Guid.Empty)
        {
            legalcaseDto.Id = Guid.NewGuid();
            legalcaseDto.LandLordId = tenantDto.Landlord?.Id ?? Guid.Empty;
            legalcaseDto.BuildingId = tenantDto.Building?.Id ?? Guid.Empty;
            legalcaseDto.TenantId = tenantDto?.Id ?? Guid.Empty;
            legalcaseDto.ClientId = Guid.Parse(ClientId);
            legalcaseDto.CaseName = _dataService.CaseName;

         legalcaseDto.ReasonHoldoverId = legalcaseDto.ReasonHoldoverId;
         legalcaseDto.ExplainDescription =  legalcaseDto.ExplainDescription;
            legalcaseDto.ReasonDescription = legalcaseDto.ReasonDescription;
         
            result = await _legalCaseService.AddLegalCasesAsync(legalcaseDto);
            _dataService.CaseName = null;
        }


        if (result)
        {
            nav.NavigateTo("/cases?success=true");
        }
    }

    private CancellationTokenSource _cts;
    private async Task OnTenantCodeChanged(ChangeEventArgs e)
    {
        _cts?.Cancel(); // cancel previous call
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        var input = e.Value?.ToString() ?? string.Empty;
        tenantDto.TenantCode = input;

        if (input.Length >= 3)
        {
            await Task.Delay(1000, token); // debounce
            matchedTenants = await _tenantService.SearchTenantbyCode(input);
            showSuggestions = matchedTenants.Any();
        }
        else
        {
            showSuggestions = false;
        }
    }

 

    private async Task OnClientCodeChanged(ChangeEventArgs e)
    {
        _cts?.Cancel(); // cancel previous call
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        var input = e.Value?.ToString() ?? string.Empty;
        clientDto.ClientCode = input;

        if (input.Length >= 3)
        {
            await Task.Delay(1000, token); // debounce
            matchedClients = await _clientService.SearchClientByCode(input);
            showSuggestions = matchedClients.Any();
        }
        else
        {
            showSuggestions = false;
        }
    }


    private async Task OnBuildingChanged(ChangeEventArgs e)
    {
        _cts?.Cancel(); // cancel previous call
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        var input = e.Value?.ToString() ?? string.Empty;
        apartmentDto.ApartmentCode = input;

        if (input.Length >= 3)
        {
            await Task.Delay(1000, token); // debounce
            // var apartnent = await _apartmentService.SearchBuildingByCode(input);
            // matchedBuilding = apartnent.Where(e => e.Id == Guid.Parse(ClientId)).ToList();
            showSuggestions = matchedBuilding.Any();
        }
        else
        {
            showSuggestions = false;
        }
    }
  
}
