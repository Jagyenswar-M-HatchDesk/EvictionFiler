@page "/CaseDetails/{caseId:guid}"
@using Blazored.Toast
@using Blazored.Toast.Services
@using EvictionFiler.Application.DTOs
@using EvictionFiler.Application.DTOs.ApartmentDto
@using EvictionFiler.Application.DTOs.FormTypeDto
@using EvictionFiler.Application.DTOs.LandLordDto
@using EvictionFiler.Application.DTOs.LegalCaseDto
@using EvictionFiler.Application.DTOs.TenantDto
@using EvictionFiler.Application.Interfaces.IRepository
@using EvictionFiler.Application.Interfaces.IRepository.MasterRepository
@using EvictionFiler.Application.Interfaces.IServices
@inject NavigationManager Navigation
@inject ILegalCaseService _service
@using EvictionFiler.Client.Jwt
@using EvictionFiler.Client.SpinnerService
@using EvictionFiler.Domain.Entities.Master
@using EvictionFiler.Infrastructure.Repositories
@inject SpinnerService spinnerservice
@inject ICaseFormRepository CaseFormRepository
@inject IFormTypesRepository FormTypesRepository
@inject ICaseFormService _CaseFormService
@inject IToastService ToastService
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Authorization;
@using EvictionFiler.Domain.Entities

@using System.Security.Claims
@inject JwtAuthStateProviders _authStateProvider

<style>
    :root {
        /* default palette (indigo/teal) */
        --brand-primary: #4f46e5; /* indigo-600 */
        --brand-primary-600: #4f46e5;
        --brand-primary-700: #4338ca;
        --brand-primary-50: #eef2ff;
        --brand-primary-text: #3730a3;
        --brand-accent: #10b981; /* emerald-500 */
        --brand-accent-100: #d1fae5;
        --brand-accent-text: #065f46;
    }
    /* Optional alt theme examples; swap by changing data-theme */
    html[data-theme="sky-rose"] {
        --brand-primary: #0284c7;
        --brand-primary-600: #0284c7;
        --brand-primary-700: #0369a1;
        --brand-primary-50: #e0f2fe;
        --brand-primary-text: #075985;
        --brand-accent: #e11d48;
        --brand-accent-100: #ffe4e6;
        --brand-accent-text: #881337;
    }

    html[data-theme="midalta"] {
        /* Replace with your brand hexes */
        --brand-primary: #0B3B6E;
        --brand-primary-600: #0B3B6E;
        --brand-primary-700: #0a2f57;
        --brand-primary-50: #E6EEF7;
        --brand-primary-text: #0B3B6E;
        --brand-accent: #14B8A6;
        --brand-accent-100: #CCFBF1;
        --brand-accent-text: #0F766E;
    }

    .sticky-blur {
        backdrop-filter: saturate(180%) blur(6px);
    }

    .bg-brand-primary {
        background-color: var(--brand-primary) !important;
    }

    .bg-brand-primary-50 {
        background-color: var(--brand-primary-50) !important;
    }

    .text-brand-primary {
        color: var(--brand-primary-text) !important;
    }

    .bg-brand-accent {
        background-color: var(--brand-accent) !important;
    }

    .bg-brand-accent-100 {
        background-color: var(--brand-accent-100) !important;
    }

    .text-brand-accent {
        color: var(--brand-accent-text) !important;
    }

    /* Simple timeline */
    .timeline {
        position: relative;
        border-left: 2px solid var(--bs-border-color);
        margin-left: .75rem;
        padding-left: 1.5rem;
    }

        .timeline .dot {
            position: absolute;
            left: -10px;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: var(--bs-secondary-bg);
            border: 2px solid var(--bs-border-color);
            box-shadow: 0 0 0 2px #fff;
        }

        .timeline .item {
            position: relative;
            padding-bottom: 1rem;
        }

            .timeline .item .dot {
                top: .25rem;
            }



    /* ====== Intake page responsive CSS (works with Bootstrap 5) ====== */

    /* Tokens */
    :root {
        --ef-radius: 14px;
        --ef-gap: 1rem;
        --ef-gap-sm: .75rem;
        --ef-gap-xs: .5rem;
    }

    /* General polish */
    .container {
        max-width: 1100px; /* keeps content readable on desktop */
    }

    .card {
        border-radius: var(--ef-radius);
    }

    .card-header {
        border-top-left-radius: var(--ef-radius);
        border-top-right-radius: var(--ef-radius);
    }

    /* Sticky header spacing on mobile so content doesn't hide under it */
    .sticky-top {
        backdrop-filter: saturate(120%) blur(6px);
        border-bottom: 1px solid rgba(0,0,0,.06);
    }

    /* Stepper dots */
    .step-dot {
        width: 10px;
        height: 10px;
        border-radius: 999px;
        display: inline-block;
        background: #cbd5e1; /* inactive */
    }

        .step-dot.active {
            background: #60a5fa;
        }
        /* info */
        .step-dot.done {
            background: #0d6efd;
        }
    /* primary */

    /* Minor tweaks for Bootstrap form controls on touch */
    .form-control, .form-select, .btn {
        border-radius: 12px;
    }

    .form-control, .form-select {
        min-height: 44px; /* good touch target */
    }

    .btn {
        min-height: 42px;
    }

    /* Review JSON block */
    details > pre {
        background: #0f172a;
        color: #e2e8f0;
        border-radius: 12px;
        padding: 12px;
        overflow: auto;
    }

    /* Footer action bar */
    @@media (min-width: 0px) {
        /* On small screens make actions stick and fill width cleanly */
        .ef-actions {
            position: sticky;
            bottom: 0;
            z-index: 10;
            background: rgba(255,255,255,.94);
            backdrop-filter: blur(6px);
            border-top: 1px solid rgba(0,0,0,.06);
            padding: .75rem .5rem;
        }
    }

    /* ---------- Mobile-first layout ---------- */
    @@media (max-width: 575.98px) {
        /* Tighten container padding */
        .container, .container-fluid {
            padding-left: .75rem !important;
            padding-right: .75rem !important;
        }
        /* Header stack */
        .sticky-top .d-flex.justify-content-between {
            flex-direction: column;
            align-items: flex-start !important;
            gap: .5rem;
        }
        /* Stepper dots wrap nicely */
        .sticky-top .d-flex.align-items-center.gap-2 {
            flex-wrap: wrap;
            gap: .4rem !important;
        }
        /* Card body spacing */
        .card-body.row.g-3 {
            row-gap: var(--ef-gap-sm) !important;
        }
        /* Form labels slightly smaller to reduce wrapping */
        .form-label {
            font-size: .9rem;
            margin-bottom: .25rem;
        }
        /* Inputs extend full width */
        .form-control, .form-select {
            font-size: 1rem;
        }
        /* Buttons fill width in footer and stack */
        .ef-actions .btn {
            width: 100%;
        }

            .ef-actions .btn + .btn {
                margin-top: .5rem;
            }
        /* Turn 2-column sections into single column */
        .row.g-3 > [class*="col-md-6"] {
            width: 100%;
            flex: 0 0 100%;
            max-width: 100%;
        }
        /* Download PDF button: keep visible but compact */
        .card-header .btn.btn-sm {
            padding: .25rem .5rem;
            font-size: .8rem;
        }
    }

    /* ---------- Small tablets ---------- */
    @@media (min-width: 576px) and (max-width: 767.98px) {
        .card-body.row.g-3 {
            row-gap: var(--ef-gap-sm) !important;
        }

        .form-control, .form-select {
            font-size: 1rem;
        }
    }

    /* ---------- Tablets / small laptops ---------- */
    @@media (min-width: 768px) and (max-width: 991.98px) {
        .card-body.row.g-3 {
            row-gap: var(--ef-gap) !important;
        }
    }

    /* ---------- Large screens ---------- */
    @@media (min-width: 992px) {
        .card-body.row.g-3 {
            row-gap: var(--ef-gap) !important;
        }
    }

    /* Accessibility: clear focus states even on mobile */
    :focus-visible {
        outline: 3px solid rgba(13,110,253,.35);
        outline-offset: 2px;
        border-radius: 10px;
    }

    /* Reduce animations if user prefers */
    @@media (prefers-reduced-motion: reduce) {
        * {
            animation: none !important;
            transition: none !important;
            scroll-behavior: auto !important;
        }
    }

    /* Print (nice PDF from browser too) */
    @@media print {
        .sticky-top, .ef-actions, details {
            display: none !important;
        }

        .card {
            box-shadow: none !important;
            border: 1px solid #ddd;
        }

        .card-header {
            background: #f8f9fa !important;
        }

        body {
            -webkit-print-color-adjust: exact;
            print-color-adjust: exact;
        }
    }

</style>


<body class="bg-body-tertiary">

    @if (legalcaseDto != null)
    {
        <!-- Top Bar -->
        <header class="position-sticky top-0 z-3 sticky-blur bg-body border-bottom">
            <div class="container-xxl py-3 d-flex align-items-center justify-content-between flex-wrap">
                <div class="d-flex align-items-center gap-3">
                    <div class="rounded-3 bg-brand-primary text-white d-grid" style="width:40px;height:40px;place-items:center">
                        <i class="bi bi-gavel"></i>
                    </div>
                    <div>
                        <h1 class="h4 mb-0 fw-bold" id="caseNumber">@(string.IsNullOrWhiteSpace(legalcaseDto.Casecode) ? "--" : legalcaseDto.Casecode)</h1>
                        <div class="text-secondary small" id="caseMeta">
                            Landlord &amp; Tenant • Created @(legalcaseDto.CreatedOn.ToString("dd/MM/yyyy") ?? "--")
                        </div>
                    </div>
                </div>
                <div class="d-flex align-items-center gap-2 flex-wrap">
                    <span id="statusBadge" class="badge bg-success">@(string.IsNullOrWhiteSpace(legalcaseDto.Status) ? "--" : legalcaseDto.Status)</span>
                    <span id="substatusBadge" class="badge text-brand-primary bg-brand-primary-50 border">@(string.IsNullOrWhiteSpace(legalcaseDto.CaseTypeName) ? "--" : legalcaseDto.CaseTypeName)</span>
                    <button class="btn btn-outline-secondary" @onclick="BackTocases">View Previous Cases</button>
                    <button class="btn bg-brand-primary text-white">New Action</button>
                </div>
            </div>
        </header>

        <main class="container-xxl py-4">
            <!-- Overview Stats -->
            <section class="row g-3 g-lg-4">
                <div class="col-12 col-md-6 col-lg-3">
                    <div class="card shadow-sm border-0 h-100">
                        <div class="card-body d-flex align-items-center gap-3">
                            <div class="rounded-3 bg-brand-primary-50 text-brand-primary d-flex align-items-center justify-content-center" style="width:42px;height:42px;">
                                <i class="bi bi-cash-stack"></i>
                            </div>
                            <div>
                                <div class="text-secondary text-uppercase small">Monthly Rent</div>
                                <div class="fw-semibold" id="monthlyRent">$@(legalcaseDto.MonthlyRent == null ? "--" : $"${legalcaseDto.MonthlyRent.Value:N2}")</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3">
                    <div class="card shadow-sm border-0 h-100">
                        <div class="card-body d-flex align-items-center gap-3">
                            <div class="rounded-3 bg-warning-subtle text-warning-emphasis d-flex align-items-center justify-content-center" style="width:42px;height:42px;">
                                <i class="bi bi-alarm"></i>
                            </div>
                            <div>
                                <div class="text-secondary text-uppercase small">Days Open</div>
                                <div class="fw-semibold" id="daysOpen">--</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3">
                    <div class="card shadow-sm border-0 h-100">
                        <div class="card-body d-flex align-items-center gap-3">
                            <div class="rounded-3 bg-brand-accent-100 text-brand-accent d-flex align-items-center justify-content-center" style="width:42px;height:42px;">
                                <i class="bi bi-person"></i>
                            </div>
                            <div>
                                <div class="text-secondary text-uppercase small">Tenant</div>
                                <div class="fw-semibold" id="tenantName">@(string.IsNullOrWhiteSpace(legalcaseDto.TenantName) ? "--" : legalcaseDto.TenantName)</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3">
                    <div class="card shadow-sm border-0 h-100">
                        <div class="card-body">
                            <div class="text-secondary text-uppercase small mb-1">Case Progress</div>
                            <div class="progress" role="progressbar" aria-label="Case progress" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                                <div class="progress-bar bg-success" id="progressBar" style="width: 0%">0%</div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Two Column -->
            <section class="row g-4 mt-1">
                <!-- Left -->
                <div class="col-12 col-lg-7 d-flex flex-column gap-4">
                    <!-- Tenant & Building -->
                    <div class="card shadow-sm border-0">
                        <div class="card-header bg-transparent">
                            <div class="fw-semibold d-flex align-items-center gap-2"><i class="bi bi-people"></i> Tenant &amp; Building</div>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="border rounded-3 p-3 h-100">
                                        <div class="fw-semibold mb-2">Tenant</div>
                                        <div class="text-secondary small">
                                            <div><span class="text-body">Name:</span> <span id="tenantName2">@(string.IsNullOrWhiteSpace(legalcaseDto.TenantName) ? "--" : legalcaseDto.TenantName)</span></div>
                                            <div><span class="text-body">Apartment:</span> <span id="tenantApt">@(string.IsNullOrWhiteSpace(legalcaseDto.UnitNumber) ? "--" : legalcaseDto.UnitNumber)</span></div>
                                            <div>
                                                <span class="text-body">Address:</span> <span id="tenantAddr">
                                                    @{
                                                        var partBuilding = new List<string>();

                                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.Address1)) partBuilding.Add(legalcaseDto.Address1);
                                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.Address2)) partBuilding.Add(legalcaseDto.Address2);
                                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.City)) partBuilding.Add(legalcaseDto.City);
                                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.StateName)) partBuilding.Add(legalcaseDto.StateName);
                                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.ZipCode)) partBuilding.Add(legalcaseDto.ZipCode);

                                                        var fullBuildingAddress = partBuilding.Any() ? string.Join(", ", partBuilding) : "--";
                                                    }
                                                    @fullBuildingAddress
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="border rounded-3 p-3 h-100">
                                        <div class="fw-semibold mb-2 d-flex align-items-center gap-2"><i class="bi bi-buildings"></i> Building</div>
                                        <div class="text-secondary small">
                                            <div><span class="text-body">Key:</span> <span id="bKey">--</span></div>
                                            <div><span class="text-body">MDR:</span> <span id="bMdr">@(string.IsNullOrWhiteSpace(legalcaseDto.Mdr) ? "--" : legalcaseDto.Mdr)</span></div>
                                            <div>
                                                <span class="text-body">Address:</span> <span id="bAddr">
                                                    @{
                                                        var partlandlord = new List<string>();

                                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.Address1)) partlandlord.Add(legalcaseDto.Address1);
                                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.Address2)) partlandlord.Add(legalcaseDto.Address2);
                                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.City)) partlandlord.Add(legalcaseDto.City);
                                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.StateName)) partlandlord.Add(legalcaseDto.StateName);
                                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.ZipCode)) partlandlord.Add(legalcaseDto.ZipCode);

                                                        var fulllandlordAddress = partlandlord.Any() ? string.Join(", ", partlandlord) : "--";
                                                    }
                                                    @fulllandlordAddress
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Court Info -->
                    <div class="card shadow-sm border-0">
                        <div class="card-header bg-transparent">
                            <div class="fw-semibold d-flex align-items-center gap-2"><i class="bi bi-hammer"></i> Court Information</div>
                        </div>
                        <div class="card-body">
                            <div class="row g-3 small" id="courtGrid">
                                <!-- Populated from DATA.court below if desired; default static boxes: -->
                                <div class="col-12 col-md-3 "><div class="border rounded-3 p-3"><div class="text-secondary">Court</div><div class="fw-medium">--</div></div></div>
                                <div class="col-12 col-md-3 "><div class="border rounded-3 p-3"><div class="text-secondary">Room #</div><div class="fw-medium">--</div></div></div>
                                <div class="col-12 col-md-3 "><div class="border rounded-3 p-3"><div class="text-secondary">Part</div><div class="fw-medium">--</div></div></div>
                                <div class="col-12 col-md-3 "><div class="border rounded-3 p-3"><div class="text-secondary">Judge</div><div class="fw-medium">--</div></div></div>
                                <div class="col-12 col-md-3 "><div class="border rounded-3 p-3"><div class="text-secondary">Index No.</div><div class="fw-medium">--</div></div></div>
                                <div class="col-12 col-md-3 "><div class="border rounded-3 p-3"><div class="text-secondary">Marshal</div><div class="fw-medium">--</div></div></div>
                                <div class="col-12 col-md-3 "><div class="border rounded-3 p-3"><div class="text-secondary">Docket No.</div><div class="fw-medium">--</div></div></div>
                            </div>
                        </div>
                    </div>

                    <!-- Tabs: Activity / Timeline / Actions -->
                    <div class="card shadow-sm border-0">
                        <div class="card-header bg-transparent">
                            <ul class="nav nav-tabs card-header-tabs" id="caseTabs" role="tablist">
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link active" id="activity-tab" data-bs-toggle="tab" data-bs-target="#activity" type="button" role="tab" aria-controls="activity" aria-selected="true">Activity</button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="timeline-tab" data-bs-toggle="tab" data-bs-target="#timeline" type="button" role="tab" aria-controls="timeline" aria-selected="false">Timeline</button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="actions-tab" data-bs-toggle="tab" data-bs-target="#actions" type="button" role="tab" aria-controls="actions" aria-selected="false">Actions</button>
                                </li>
                            </ul>
                        </div>
                        <div class="card-body tab-content">
                            <!-- Activity -->
                            <div class="tab-pane fade show active" id="activity" role="tabpanel" aria-labelledby="activity-tab">
                                <div class="table-responsive">
                                    <table class="table align-middle" id="activityTable" style="width:700px">
                                        <thead class="table-light">
                                            <tr>
                                                <th scope="col">ID</th>
                                                <th scope="col">Form Type</th>
                                                @if (isAdmin)
                                                {

                                                    <th scope="col">Created By</th>
                                                }
                                                <th scope="col">Created On</th>
                                                <th scope="col" class="text-nowrap">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (caseFormDto != null && caseFormDto.Any())
                                            {
                                                int index = 1;
                                                @foreach (var form in caseFormDto)
                                                {
                                                    <tr>
                                                        <td>@index</td>
                                                        <td>@form.FormTypeName</td>
                                                        @if (isAdmin)
                                                        {
                                                            <td>@form.CreatedByName</td>
                                                        }
                                                        <td>@form.CreatedOn.ToString("dd/MM/yyyy")</td>
                                                        <td class="d-flex " style="gap:2px">
                                                            <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => ViewPdf(form.File))">View</button>
                                                            <button class="btn btn-sm btn-outline-primary" @onclick="@(() => EditCaseDetail(form.Id))">Edit</button>
                                                            <button class="btn btn-sm btn-outline-danger" @onclick="@(() => DeleteCaseDetail(form.Id))">Delete</button>
                                                        </td>
                                                    </tr>
                                                    index++;
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="4" class="text-muted text-center">No notices generated yet.</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>

                            <!-- Timeline -->
                            <div class="tab-pane fade" id="timeline" role="tabpanel" aria-labelledby="timeline-tab">
                                <div class="mb-3">
                                    <div class="progress" role="progressbar" aria-label="Timeline progress" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                                        <div class="progress-bar bg-brand-primary" id="timelineProgress" style="width:0%">0%</div>
                                    </div>
                                    <div class="text-secondary small mt-1">Filed → Service → Hearing → Judgment → Enforcement</div>
                                </div>
                                <div class="timeline" id="timelineList">
                                    <div class="item" data-status="completed">
                                        <span class="dot bg-success"></span>
                                        <div class="text-secondary small">09/01/2025</div>
                                        <div class="fw-semibold">Case Created</div>
                                        <div class="text-secondary small">Initial intake and file opened</div>
                                    </div>
                                    <div class="item" data-status="completed">
                                        <span class="dot bg-success"></span>
                                        <div class="text-secondary small">09/05/2025</div>
                                        <div class="fw-semibold">Notice Served</div>
                                        <div class="text-secondary small">Written Demand to Terminate (move out)</div>
                                    </div>
                                    <div class="item" data-status="current">
                                        <span class="dot bg-brand-primary"></span>
                                        <div class="text-secondary small">10/01/2025</div>
                                        <div class="fw-semibold">Hearing Scheduled</div>
                                        <div class="text-secondary small">Awaiting confirmation from court</div>
                                    </div>
                                    <div class="item" data-status="upcoming">
                                        <span class="dot"></span>
                                        <div class="text-secondary small">--</div>
                                        <div class="fw-semibold">Judgment</div>
                                        <div class="text-secondary small">Pending hearing</div>
                                    </div>
                                    <div class="item" data-status="upcoming">
                                        <span class="dot"></span>
                                        <div class="text-secondary small">--</div>
                                        <div class="fw-semibold">Warrant/Enforcement</div>
                                        <div class="text-secondary small">To be requested if applicable</div>
                                    </div>
                                </div>
                            </div>

                            <!-- Actions -->
                            <div class="tab-pane fade" id="actions" role="tabpanel" aria-labelledby="actions-tab">
                                <div class="d-flex flex-wrap gap-2 mb-3">
                                    <button class="btn bg-brand-primary text-white">Send to Marshal</button>
                                    <button class="btn btn-secondary">Send to Process Server</button>
                                    <button class="btn btn-outline-secondary">Upload / View Documents</button>
                                    <button class="btn btn-outline-secondary">Add Notes</button>
                                </div>
                                <div class="row g-2 align-items-end">
                                    <div class="col-12 col-md-4">
                                        <label for="formType" class="form-label">File a Motion</label>
                                        <select class="form-select" @bind="noticeModel.FormTypeId">
                                            <option value="">-- Select Form Type --</option>
                                            @foreach (var formType in FilteredFormTypeList)
                                            {
                                                <option value="@formType.Id">@formType.Name</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-auto">
                                        <button class="btn btn-outline-primary" @onclick="GenerateNotice">  @(isEditMode ? "Update" : "Generate")</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right -->
                <div class="col-12 col-lg-5 d-flex flex-column gap-4">
                    <!-- Payment Info -->
                    <div class="card shadow-sm border-0">
                        <div class="card-header bg-transparent">
                            <div class="fw-semibold d-flex align-items-center gap-2"><i class="bi bi-cash-coin"></i> Payment Information</div>
                        </div>
                        <div class="card-body">
                            <div class="row g-3 small" id="paymentsGrid">
                                <div class="col-12 col-md-6 col-lg-3"><div class="border rounded-3 p-3"><div class="text-secondary">Account Balance</div><div class="fw-medium">--</div></div></div>
                                <div class="col-12 col-md-6 col-lg-3"><div class="border rounded-3 p-3"><div class="text-secondary">Account Credit</div><div class="fw-medium">--</div></div></div>
                                <div class="col-12 col-md-6 col-lg-3"><div class="border rounded-3 p-3"><div class="text-secondary">Balance on Case</div><div class="fw-medium">--</div></div></div>
                                <div class="col-12 col-md-6 col-lg-3"><div class="border rounded-3 p-3"><div class="text-secondary">Last Payment</div><div class="fw-medium">--</div></div></div>
                                <div class="col-12 col-md-6 col-lg-3"><div class="border rounded-3 p-3"><div class="text-secondary">Open Receivables</div><div class="fw-medium">--</div></div></div>
                            </div>
                        </div>
                    </div>

                    <!-- Contact Info -->
                    <div class="card shadow-sm border-0">
                        <div class="card-header bg-transparent">
                            <div class="fw-semibold">Contact Information</div>
                        </div>
                        <div class="card-body small d-flex flex-column gap-2">
                            <div class="d-flex align-items-center gap-2"><i class="bi bi-envelope"></i> <span id="contactEmail">@(string.IsNullOrWhiteSpace(legalcaseDto.ClientEmail) ? "--" : legalcaseDto.ClientEmail)</span></div>
                            <div class="d-flex align-items-center gap-2"><i class="bi bi-telephone"></i> <span id="contactPhone">@(string.IsNullOrWhiteSpace(legalcaseDto.ClientPhone) ? "--" : legalcaseDto.ClientPhone)</span></div>
                            <div class="d-flex align-items-center gap-2">
                                <i class="bi bi-geo-alt"></i> <span id="contactAddr">
                                    @{
                                        var partclient = new List<string>();

                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.Address1)) partclient.Add(legalcaseDto.Address1);
                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.Address2)) partclient.Add(legalcaseDto.Address2);
                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.City)) partclient.Add(legalcaseDto.City);
                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.StateName)) partclient.Add(legalcaseDto.StateName);
                                        if (!string.IsNullOrWhiteSpace(legalcaseDto.ZipCode)) partclient.Add(legalcaseDto.ZipCode);

                                        var fulllClientAddress = partclient.Any() ? string.Join(", ", partclient) : "--";
                                    }
                                    @fulllClientAddress
                                </span>
                            </div>
                            <div class="pt-1 d-flex gap-2">
                                <span class="badge bg-brand-primary text-white">Primary</span>
                                <span class="badge text-secondary-emphasis bg-secondary-subtle border border-secondary-subtle">Verified</span>
                            </div>
                        </div>
                    </div>

                    <!-- Rent Description -->
                    <div class="card shadow-sm border-0">
                        <div class="card-header bg-transparent">
                            <div class="fw-semibold">Rent Description</div>
                        </div>
                        <div class="card-body">
                            <div class="row g-3 small" id="rentGrid">
                                <div class="col-12 col-md-6 "><div class="border rounded-3 p-3"><div class="text-secondary">Monthly Rent</div><div class="fw-medium" id="rentMonthly">$@(legalcaseDto.MonthlyRent == null ? "--" : $"${legalcaseDto.MonthlyRent.Value:N2}")</div></div></div>
                                <div class="col-12 col-md-6 "><div class="border rounded-3 p-3"><div class="text-secondary">Distribution Total</div><div class="fw-medium" id="rentDist">--</div></div></div>
                                <div class="col-12 col-md-6"><div class="border rounded-3 p-3"><div class="text-secondary">Additional Charges</div><div class="fw-medium" id="rentAddtl">--</div></div></div>
                                <div class="col-12 col-md-6"><div class="border rounded-3 p-3"><div class="text-secondary">Legal Print</div><div class="fw-medium" id="rentLegal">--</div></div></div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </main>
    }

    <script>
        window.showBootstrapTab = function (tabId) {
          var triggerEl = document.querySelector(tabId);
          if (triggerEl) {
            var tab = bootstrap.Tab.getOrCreateInstance(triggerEl);
            tab.show();
          }
        };
    </script>
</body>



@code {
    [Parameter]
    public Guid caseId { get; set; }
    private IntakeModel legalcaseDto = new IntakeModel();
    private List<FormTypes> FilteredFormTypeList = new();
    private GenrateNoticeModel noticeModel = new GenrateNoticeModel();
    [Parameter] public Guid? CurrentCaseId { get; set; }
    private List<GenrateNoticeModel> caseFormDto = new();
    private string? loggedInUserId;
    private bool isAdmin = false;

    private bool isEditMode = false;


    protected override async Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            loggedInUserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            isAdmin = user.Claims.Any(c => c.Type == ClaimTypes.Role && c.Value == "Admin");
        }

        spinnerservice.Show();
        await LoadCaseDetails();
        await LoadCaseForms();
        spinnerservice.Hide();
    }

    private async Task LoadCaseDetails()
    {
        legalcaseDto = await _service.GetCaseByIdAsync(caseId);
        FilteredFormTypeList = await FormTypesRepository.GetFormTypesByCaseTypeAsync(legalcaseDto.CaseTypeId);
        CurrentCaseId = caseId;
        if (legalcaseDto != null)
        {



            legalcaseDto = new IntakeModel
                {
                    Id = legalcaseDto.Id,
                    ClientId = legalcaseDto.ClientId,
                    Casecode = legalcaseDto.Casecode,
                    CaseTypeId = legalcaseDto.CaseTypeId,
                    CaseTypeName = legalcaseDto.CaseTypeName,
                    IsERAPPaymentReceived = legalcaseDto.IsERAPPaymentReceived,
                    MonthlyRent = legalcaseDto.MonthlyRent,
                    TotalOwed = legalcaseDto.TotalOwed,
                    TenantShare = legalcaseDto.TenantShare,
                    RentDueEachMonthOrWeekId = legalcaseDto.RentDueEachMonthOrWeekId,
                    OralStart = legalcaseDto.OralStart,
                    OralEnd = legalcaseDto.OralEnd,
                    WrittenLease = legalcaseDto.WrittenLease,
                    DateTenantMoved = legalcaseDto.DateTenantMoved,
                    TenancyTypeId = legalcaseDto.TenancyTypeId,
                    CreatedOn = legalcaseDto.CreatedOn,
                    Status = legalcaseDto.IsActive ? "Active" : "Inactive",

                    // for client
                    ClientCode = legalcaseDto.ClientCode,
                    FirstName = legalcaseDto.FirstName,
                    LastName = legalcaseDto.LastName,
                    Address1 = legalcaseDto.Address1,
                    Address2 = legalcaseDto.Address2,
                    StateName = legalcaseDto.StateName,
                    ZipCode = legalcaseDto.ZipCode,
                    ClientEmail = legalcaseDto.Email,
                    ClientPhone = legalcaseDto.Phone,

                    // Landlord
                    FullName = legalcaseDto.FullName,
                    Phone = legalcaseDto.Phone,
                    Email = legalcaseDto.Email,
                    LandLordTypeId = legalcaseDto.LandLordTypeId ?? Guid.Empty,

                    // Building
                    Mdr = legalcaseDto.Mdr,
                    Units = legalcaseDto.Units,
                    BuildingAddress = legalcaseDto.BuildingAddress,
                    RegulationStatusId = legalcaseDto.RegulationStatusId ?? Guid.Empty,
                    // RegulationStatusName = legalcaseDto.RegulationStatusName,

                    // Tenant
                    TenantName = legalcaseDto.TenantName,
                    UnitNumber = legalcaseDto.UnitNumber,
                    IsUnitIllegalId = legalcaseDto.IsUnitIllegalId,
                    TenantRecord = legalcaseDto.TenantRecord,
                    HasPossession = legalcaseDto.HasPossession,
                    OtherOccupants = legalcaseDto.OtherOccupants
                };

        };
    }

    public async Task EditCaseDetail(Guid id)
    {
        spinnerservice.Show();
        var result = await _CaseFormService.GetCaseFormByIdAsync(id);

        if (result != null)
        {
            noticeModel = new GenrateNoticeModel
                {
                    Id = result.Id,
                    FormTypeId = result.FormTypeId,
                    File = result.File,
                    HTML = result.HTML,
                    CreatedOn = result.CreatedOn,
                };
            isEditMode = true;

        }
        spinnerservice.Hide();
        await JS.InvokeVoidAsync("showBootstrapTab", "#actions-tab");
    }



    private async Task GenerateNotice()
    {
        spinnerservice.Show();

        if (CurrentCaseId.HasValue && CurrentCaseId.Value != Guid.Empty && noticeModel.FormTypeId.HasValue)
        {
            bool success = false;

            if (isEditMode)
            {
                // UPDATE existing notice
                success = await _CaseFormService.UpdateCaseFormAsync(new GenrateNoticeModel
                    {
                        Id = noticeModel.Id,
                        LegalCaseId = CurrentCaseId.Value,
                        FormTypeId = noticeModel.FormTypeId,
                        File = noticeModel.File,
                        HTML = noticeModel.HTML,
                        CreatedOn = noticeModel.CreatedOn
                    });

                if (success)
                {
                    ToastService.ShowSuccess("Notice has been updated successfully!");
                }
            }
            else
            {
                // CREATE new notice
                success = await CaseFormRepository.GenerateNoticeAsync(
                    CurrentCaseId.Value,
                    noticeModel.FormTypeId.Value,
                       Guid.Parse(loggedInUserId)
                );

                if (success)
                {
                    ToastService.ShowSuccess("Notice has been generated successfully!");
                }
            }

            if (success)
            {
                await LoadCaseForms();

                // Reset form
                noticeModel = new GenrateNoticeModel();
                isEditMode = false;
                CurrentCaseId = caseId;
            }
        }

        spinnerservice.Hide();
    }


    private void ViewPdf(string filePath)
    {
        if (!string.IsNullOrWhiteSpace(filePath))
        {
            var fullUrl = Navigation.BaseUri.TrimEnd('/') + filePath;
            Navigation.NavigateTo(fullUrl, forceLoad: true);
        }
    }


    private async Task LoadCaseForms()
    {
        caseFormDto = await _CaseFormService.GetCaseFormsByCaseId(CurrentCaseId.Value, loggedInUserId, isAdmin);
    }

    // private void Createcase()
    // {
    //     Navigation.NavigateTo("/cases");
    // }

    public void BackTocases()
    {
        Navigation.NavigateTo("/legalcases");
    }


    public async Task DeleteCaseDetail(Guid id)
    {
        spinnerservice.Show();
        bool isDeleted = await _CaseFormService.DeleteDetailAsync(id);

        if (isDeleted)
        {
            caseFormDto = await _CaseFormService.GetCaseFormsByCaseId(CurrentCaseId.Value, loggedInUserId, isAdmin);
            ToastService.ShowSuccess("File  has been Deleted successfully!");
            StateHasChanged();
        }
        spinnerservice.Hide();
    }
}
