@page "/cases"
@using EvictionFiler.Application.DTOs.ClientDto
@using EvictionFiler.Application.DTOs.PaginationDto
@using EvictionFiler.Application.Interfaces.IServices
@using EvictionFiler.Domain.Entities
@inject ILegalCaseService _service
@inject IClientService _clientservice
@using EvictionFiler.Client.SpinnerService
@inject SpinnerService spinnerservice

@inject NavigationManager navManager
<PageTitle>Cases</PageTitle>

<!-- Bootstrap CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />

<style>
    .status-active {
    background-color: rgba(25,135,84,1);
    color: #fff;
    padding: 2px 7px;
    border-radius: 1rem;
    font-size: 12px;
    }

    .container {
    /* background-color: #F2F0EC; */
    border: solid 1px #F2F0EC;
    box-shadow: 0 15px 20px #F2F0EC !important;
    }

    .btn-primary {
    background-color: #1F365D;
    border-color: #1F365D;
    }

    .btn-primary:hover {
    background-color: #162646;
    border-color: #162646;
    }

    .page-link {
    color: #1F365D;
    }

    .page-link.active,
    .page-item.active .page-link {
    background-color: #1F365D;
    border-color: #1F365D;
    color: #F2F0EC;
    }

    table.table thead th {
    color: #1F365D;
    background: #F2F0EC;
    margin-bottom: 0px !important;
    }

    h5, p, small {
    color: #1F365D;
    }

    .adv-btn {
    color: #1F365D;
    background: #FFF;
    }

    .adv-btn:hover {
    color: #FFF;
    background: #1F365D;
    }

    .adv-btn.active-adv-btn {
    background-color: #1F365D !important;
    color: #F2F0EC !important;
    border-color: #1F365D !important;
    }


    .table-responsive {
    overflow-x: auto; /* Enable horizontal scroll */
    position: relative;
    }

    table th, table td {
    white-space: nowrap;
    }

    th.sticky, td.sticky {
    position: sticky;
    right: 0;
    background: #F2F0EC; /* Same as container background */
    z-index: 2;
    text-align: center;
    }

    /* Make sure header sticky stays above other cells */
    th.sticky {
    z-index: 3;
    }
</style>
<style>
    .search-box {
    width: 100%;
    padding-right: 3rem; /* space for the button */
    padding-left: 1rem;
    /* border-radius: 1.5rem; */
        border: 2px solid #020336;
    background-color: #FFF; /* dark background */
    color: black;
    height: 2.5rem;
    }

    .search-box::placeholder {
    color: darkgrey;
    }

    .search-box:focus {
    outline: none;
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.2);
    background: #c6d1e3;
    }

    .search-btn {
    position: absolute;
    right: 0.7rem;
    top: 50%;
    transform: translateY(-50%);
    border: none;
    background: none;
        color: #020336;
    cursor: pointer;
    padding: 0;
    font-size: 1.2rem;
    }

    .search-btn:hover {
    color: #1F365D;
    }

    .status-delete {
    background-color: rgba(220,53,69,1);
    color: #fff;
    padding: 2px 7px;
    border-radius: 1rem;
    font-size: 12px;
    }

    .status-archive {
    background-color: rgba(255, 193, 7, 1);
    color: #fff;
    padding: 2px 7px;
    border-radius: 1rem;
    font-size: 12px;

    }
</style>


<body class="p-4">

    <div class="container p-4 rounded shadow-sm mt-4">

        <!-- Title Row -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h5 class="m-0">Manage Legal Cases</h5>
            <button class="btn btn-primary" @onclick="SelectClientmodal">Select Client</button>

        </div>

        <!-- Search Filters -->
        <div class="row g-2 mb-3">
            <!-- Four default search boxes -->
            <div class="col-md-3 position-relative">
                <input class="form-control search-box" placeholder="Search by Case Code" @bind="searchcasecode" @bind:event="oninput" />
                <button class="search-btn" type="button">
                    <i class="fa fa-search"></i>
                </button>
            </div>
            <div class="col-md-3 position-relative">
                <input class="form-control search-box" placeholder="Search by Client" @bind="searchTermClient" @bind:event="oninput" />
                <button class="search-btn" type="button">
                    <i class="fa fa-search"></i>
                </button>
            </div>
            <div class="col-md-3 position-relative">
                <input class="form-control search-box" placeholder="Search by Tenant" @bind="searchTermTenant" @bind:event="oninput" />
                <button class="search-btn" type="button">
                    <i class="fa fa-search"></i>
                </button>
            </div>
            <div class="col-md-3 d-flex align-items-center">
                <button id="advToggleButton" class="btn btn-outline-secondary adv-btn w-100" data-bs-toggle="collapse" data-bs-target="#advancedFilters">
                    Advanced ▼
                </button>

            </div>
        </div>

        <!-- Advanced Filters -->
        <div class="collapse mb-3" id="advancedFilters">
            <div class="row g-2">
                <div class="col-md-3 position-relative">
                    <input class="form-control search-box" placeholder="Search by LandLord" @bind="searchTermLandLord" @bind:event="oninput" />
                    <button class="search-btn" type="button">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
                <div class="col-md-3 position-relative">
                    <input class="form-control search-box" placeholder="Search by Apt #" @bind="searchTermApt" @bind:event="oninput" />
                    <button class="search-btn" type="button">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
                <div class="col-md-3 position-relative">
                    <input class="form-control search-box" placeholder="Search by Case Type" @bind="searchTermCaseType" @bind:event="oninput" />
                    <button class="search-btn" type="button">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
                <div class="col-md-3 position-relative">
                    <input class="form-control search-box" placeholder="Search by Department" @bind="searchTermDept" @bind:event="oninput" />
                    <button class="search-btn" type="button">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
                <div class="col-md-3 position-relative">
                    <input class="form-control search-box" placeholder="Search by Action Date" @bind="searchTermDate" @bind:event="oninput" />
                    <button class="search-btn" type="button">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
                <div class="col-md-3 position-relative">
                    <input class="form-control search-box" placeholder="Search by Status" @bind="searchTermStatus" @bind:event="oninput" />
                    <button class="search-btn" type="button">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
                <div class="col-md-3 position-relative">
                    <input class="form-control search-box" placeholder="Extra Filter 7" @bind="searchTerm" @bind:event="oninput" />
                    <button class="search-btn" type="button">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
                <div class="col-md-3 position-relative">
                    <input class="form-control search-box" placeholder="Extra Filter 8" @bind="searchTerm" @bind:event="oninput" />
                    <button class="search-btn" type="button">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
            </div>
        </div>


        <!-- Data Table -->
        <div class="table-responsive mb-3">
            <table class="table table-hover align-middle text-center" style="margin-bottom: 0px;">
                <thead>
                    <tr>
                        <th>Case Code</th>
                        <th>Client </th>
                        <th>LandLord </th>
                        <th>Tenant </th>
                        <th>Reason Holdover</th> 
                        <th>Last Action Date</th>
                        <th>Status</th>

                        <th class="sticky">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (pagedcases != null && pagedcases.Items.Any())
                    {
                        @foreach (var cas in pagedcases.Items)
                        {

                            <tr>
                                <td>@(cas?.Casecode ?? "")</td>
                                <td>
                                    @($"{cas?.Clients?.ClientCode ?? ""} - {cas?.Clients?.FirstName ?? ""} {cas?.Clients?.LastName ?? ""}")
                                </td>
                                <td>
                                    @($"{cas?.LandLords?.LandLordCode ?? ""} - {cas?.LandLords?.FirstName ?? ""} {cas?.LandLords?.LastName ?? ""}")
                                </td>

                                <td>
                                    @($"{cas?.Tenants?.TenantCode ?? ""} - {cas?.Tenants?.FirstName ?? ""} {cas?.Tenants?.LastName ?? ""}")
                                </td>
                                <td>@(cas?.ReasonHoldover?.Name ?? "-")</td> 

                                <td>@( cas?.CreatedOn.ToString("MM/dd/yyyy"))</td>
                                @if (cas?.IsActive == true && cas.IsDeleted == false)
                                {
                                    <td><span class="status-active ms-2">Active</span></td>
                                }
                                @if (cas?.IsDeleted == true && cas.IsActive == false)
                                {
                                    <td><span class="status-delete ms-2">InActive</span></td>
                                }
                                @if (cas?.IsDeleted == false && cas.IsActive == false)
                                {
                                    <td><span class="status-archive  ms-2">Archive</span></td>
                                }

                                <td class="sticky">
                                    <i class="fa-solid fa-pen-to-square text-navy me-3" style="cursor:pointer"
                                    @onclick="@(() => EditCase(cas.Id))"
                                    title="Edit"></i>
                                    <i class="fa-solid fa-trash-can text-danger" title="Delete" style="cursor:pointer"></i>
                                </td>

                            </tr>

                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="10" class="text-muted">No Cases found.</td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        @if (pagedcases != null && pagedcases.TotalCount > 0)
        {
            <div class="d-flex justify-content-between mt-3">
                <small>
                    Showing @(((currentPage - 1) * pageSize) + 1)
                    to @(Math.Min(currentPage * pageSize, pagedcases.TotalCount))
                    of @pagedcases.TotalCount entries
                </small>
                <nav>
                    <ul class="pagination mb-0">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">←</button>
                        </li>
                        @for (int i = 1; i <= Math.Ceiling((double)pagedcases.TotalCount / pageSize); i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                            </li>
                        }
                        <li class="page-item @(currentPage == Math.Ceiling((double)pagedcases.TotalCount / pageSize) ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">→</button>
                        </li>
                    </ul>
                </nav>
            </div>
        }


    </div>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050;">
            <div class="toast show text-white bg-success">
                <div class="d-flex">
                    <div class="toast-body">
                        @successMessage
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto"
                    @onclick="() => successMessage = string.Empty"></button>
                </div>
            </div>
        </div>
    }

    <SelectClientModal @ref="clientModal" />

    <!-- Bootstrap JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
</body>
<script>
    var advButton = document.getElementById('advToggleButton');
    var advancedCollapse = document.getElementById('advancedFilters');

    advancedCollapse.addEventListener('shown.bs.collapse', function () {
    advButton.classList.add('active-adv-btn');
    });

    advancedCollapse.addEventListener('hidden.bs.collapse', function () {
    advButton.classList.remove('active-adv-btn');
    });
</script>


@code {
    private List<LegalCase> allcases = new List<LegalCase>();
    private string searchTerm = string.Empty;
    private string searchcasecode = string.Empty;
    private string searchTermClient = string.Empty;
    private string searchTermTenant = string.Empty;
    private string searchTermLandLord = string.Empty;
    private string searchTermCaseType = string.Empty;
    private string searchTermStatus = string.Empty;
    private string searchTermDept = string.Empty;
    private string searchTermDate = string.Empty;
    private string searchTermApt = string.Empty;

    private string showClient = string.Empty;
    private bool ViewSearch = false;

    private PaginationDto<EditToClientDto> AllClients = new();
    private List<EditToClientDto> FilteredClients = new();

    private SelectClientModal clientModal;
    private string successMessage;
    private Guid selectedClientId = new Guid();
    private PaginationDto<LegalCase> pagedcases;
    private int currentPage = 1;
    private int pageSize = 10;

    private void EditCase(Guid caseId)
    {
        navManager.NavigateTo($"/EditCase/{caseId}");
    }


    protected override async Task OnInitializedAsync()
    {
        spinnerservice.Show();
        var uri = new Uri(navManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("success", out var isSuccess) && isSuccess == "true")
        {
            successMessage = "Case Updated successfully!";
            await Task.Delay(1000);
            successMessage = string.Empty;

            navManager.NavigateTo("/cases", forceLoad: true);
        }
        await Task.Delay(500);

        await GetAllCases();
        spinnerservice.Hide();
    }


    private async Task GetAllCases()
    {
        pagedcases = await _service.GetAllAsync(currentPage, pageSize);
       
        AllClients = await _clientservice.GetAllClientsAsync(currentPage, pageSize);
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= Math.Ceiling((double)pagedcases.TotalCount / pageSize))
        {
            currentPage = page;
            await GetAllCases();
        }
    }

    void FocusOnNavigate()
    {
        navManager.NavigateTo("/case");
    }

    // private IEnumerable<LegalCase> cases =>
    // pagedcases.Where(c =>
    //     (string.IsNullOrWhiteSpace(searchcasecode) || (!string.IsNullOrWhiteSpace(c.Casecode) && c.Casecode.Contains(searchcasecode, StringComparison.OrdinalIgnoreCase))) &&
    //     (string.IsNullOrWhiteSpace(searchTermClient) || (!string.IsNullOrWhiteSpace(c.Clients?.ClientCode) && c.Clients.ClientCode.Contains(searchTermClient, StringComparison.OrdinalIgnoreCase))) &&
    //     (string.IsNullOrWhiteSpace(searchTermTenant) || (!string.IsNullOrWhiteSpace(c.Tenants?.TenantCode) && c.Tenants.TenantCode.Contains(searchTermTenant, StringComparison.OrdinalIgnoreCase))) &&
    //     (string.IsNullOrWhiteSpace(searchTermLandLord) || (!string.IsNullOrWhiteSpace(c.LandLords?.LandLordCode) && c.LandLords.LandLordCode.Contains(searchTermLandLord, StringComparison.OrdinalIgnoreCase))) &&
    //     (string.IsNullOrWhiteSpace(searchTermApt) || (!string.IsNullOrWhiteSpace(c.Buildings?.ApartmentCode) && c.Buildings.ApartmentCode.Contains(searchTermApt, StringComparison.OrdinalIgnoreCase))) &&
    //     // (string.IsNullOrWhiteSpace(searchTermCaseType) || (!string.IsNullOrWhiteSpace(c.CaseType) && c.CaseType.Contains(searchTermCaseType, StringComparison.OrdinalIgnoreCase))) &&
    //     // (string.IsNullOrWhiteSpace(searchTermDept) || (!string.IsNullOrWhiteSpace(c.D) && c.Department.Contains(searchTermDept, StringComparison.OrdinalIgnoreCase))) &&
    //     (string.IsNullOrWhiteSpace(searchTermDate) ||
    //        (DateTime.TryParse(searchTermDate, out var date) && c.CreatedOn.Date == date.Date))


    // );

    private bool StatusMatches(LegalCase c, string status)
    {
        return status.ToLower() switch
        {
            "active" => c.IsActive == true && !c.IsDeleted == false,
            "inactive" => !c.IsActive == false && c.IsDeleted == true,
            "archive" => !c.IsActive == false && !c.IsDeleted == false,
            _ => true // If status search term doesn't match known values, don't filter
        };
    }


    // private void OnInputChanged(ChangeEventArgs e)
    // {
    //     var input = e.Value?.ToString()?.ToLower() ?? "";
    //     FilteredClients = AllClients
    //         .Where(c => c.FirstName?.ToLower().Contains(input) == true ||
    //                     c.LastName?.ToLower().Contains(input) == true ||
    //                     c.ClientCode?.ToLower().Contains(input) == true)
    //         .ToList();
    //     ViewSearch = FilteredClients.Any();

    // }
    private async Task SelectClient(CreateToClientDto client)
    {

        // showClient = SelectedClient.FirstName + " " + SelectedClient.LastName + " - (" + SelectedClient.ClientCode + ")";
        showClient = $"{client.FirstName} {client.LastName} - ({client.ClientCode})";
        ViewSearch = false;
        //await OnClientSelected.InvokeAsync(clientId);
    }

    private async Task SelectClientmodal()
    {
        await clientModal.Show(AllClients.Items);
    }
}

