@page "/createcase/{ClientId}"
@using EvictionFiler.Application.DTOs
@using EvictionFiler.Application.DTOs.ApartmentDto
@using EvictionFiler.Application.DTOs.ClientDto
@using EvictionFiler.Application.DTOs.LandLordDto
@using EvictionFiler.Application.DTOs.TenantDto
@using EvictionFiler.Client.Services
@inject LandLordService _landlordService
@inject ApartmentService _apartmentService
@inject LegalCasesService _legalCaseService
@inject TenantService _tenantService
@inject ClientService _clientService
@inject NavigationManager nav
@inject NavigationDataService _dataService
@using Blazored.Typeahead

@rendermode InteractiveAuto
<style>
    .stepper-row::-webkit-scrollbar {
    height: 3px; /* thinner scrollbar */
    }

    .stepper-row::-webkit-scrollbar-thumb {
    background-color: #888;
    border-radius: 10px;
    }

    .stepper-row::-webkit-scrollbar-track {
    background: transparent;
    }

    /* For Firefox */
    .stepper-row {
    scrollbar-width: thin;
    scrollbar-color: #888 transparent;
    }

    .stepper-container {
    /*   background-color: #F7F6F3; */
    padding: 10px 20px;
    border-radius: 6px;
    /*   box-shadow: 0 1px 3px rgba(0,0,0,0.1); */
    overflow-x: auto;
    white-space: nowrap;
    }

    .stepper-row {
    display: flex;
    align-items: center;
    gap: 5px;
    min-width: max-content;
    overflow-x: auto; /* move it here */
    white-space: nowrap;
    }


    .stepper-step {
    display: flex;
    align-items: center;
    font-size: 14px;
    font-weight: 500;
    gap: 6px;
    }

    .stepper-step .circle {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 13px;
    flex-shrink: 0;
    }

    .circle.done {
    background-color: #5cb85c;
    color: white;
    }

    .circle.active {
    background-color: #1F365D;
    color: white;
    }

    .circle.upcoming {
    background-color: #ccc;
    color: white;
    }

    .text.done,
    .text.active {
    color: #007bff;
    font-weight: 600;
    }

    .text.upcoming {
    color: #aaa;
    }

    .arrow {
    color: #ccc;
    margin: 0 8px;
    }

    .nav-buttons {
    display: flex;
    gap: 6px;
    }

    .circle.done {
    background-color: #D4A844;
    color: white;
    }

    .text.done,
    .text.active {
    color: #1F365D;
    font-weight: 600;
    }

    .required-label::after {
        content: " *";
        color: red;
    }

</style>

<!-- Step Tracker + Navigation Buttons -->
<div class="stepper-container d-flex justify-content-between align-items-center flex-wrap v-100" style="scrollbar-width: thin;">
    <!-- Stepper Tracker -->
    <div class="stepper-row d-flex align-items-center">

        @for (int i = 0; i < stepTitles.Count; i++)
        {
            var isDone = i < currentStep;
            var isActive = i == currentStep;

            var circleClass = isDone ? "circle done"
            : isActive ? "circle active"
            : "circle upcoming";

            var textClass = isDone ? "text done"
            : isActive ? "text active"
            : "text upcoming";

            <div class="stepper-step">
                <div class="@circleClass">
                    @(isDone ? "✓" : (i + 1).ToString())
                </div>
                <span class="@textClass">@stepTitles[i]</span>

                @if (i < stepTitles.Count - 1)
                {
                    <span class="arrow">→</span>
                }
            </div>
        }
    </div>

</div>

<!-- Form Content -->
<div class="container pt-4">
    @if (currentStep == 0)
    {
        <div class="mx-auto p-4 border rounded shadow-sm bg-white" style="max-width: 800px;">
            <h5 class="text-center text-navy fw-bold">Basic Information</h5>
            <hr class="border-gold mb-4" />

            <!-- Client Role + Representative Name -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label fw-semibold text-navy required-label">Client Role</label>
                    <select class="form-select" @bind="legalcaseDto.ClientRole">
                        <option value="">-- Select Client Role --</option>
                        <option value="Landlord/Owner">Landlord/Owner</option>
                        <option value="Tenant/Occupant">Tenant/Occupant</option>
                        <option value="Property Manager">Property Manager</option>
                        <option value="Legal Representative">Legal Representative</option>
                    </select>
                </div>

                @if (legalcaseDto.ClientRole == "Legal Representative")
                {
                    <div class="col-md-6">
                        <label class="form-label fw-semibold text-navy required-label">Representative Name</label>
                        <input type="text" class="form-control" @bind="legalcaseDto.LegalRepresentative" placeholder="Enter Representative Name" />
                    </div>
                }
            </div>

            <!-- Case Type + Other Case Type -->
            <div class="row mb-3 d-flex align-items-center">
                <div class="col-md-6">
                    <label class="form-label fw-semibold text-navy required-label">Case Type</label>
                    <select class="form-select" @bind="otherCaseType">
                        <option value="">-- Select Case Type --</option>
                        <option value="Holdover">Holdover</option>
                        <option value="Nonpayment">Nonpayment</option>
                        <option value="Licensee">Licensee</option>
                        <option value="HP Action">HP Action</option>
                     
                    </select>
                </div>
                @if (otherCaseType == "Holdover")
                {
                  <div class="col-md-6 mt-1">
                        <label class="form-label fw-semibold text-navy required-label">Holdover Case Type</label>
                        <select class="form-select" @bind="holdoverSubType">
                        <option value="">-- Select Case Type --</option>
                            <option value="For Good Cause (6-A)">For Good Cause (6-A)</option>
                            <option value="Succession">Succession</option>
                            <option value="Other">Other</option>
                    
                    </select>
                  </div>
                }


                @if (otherCaseType == "Other")
                {
                    <div class="col-md-6">
                        <label class="form-label fw-semibold text-navy">Other Case Type</label>
                        <input type="text" class="form-control" @bind="legalcaseDto.CaseType" placeholder="Enter case type" />
                    </div>
                }
            </div>
        </div>
    }

    @if (currentStep == 1)
    {
        <div class="mx-auto p-4 border rounded shadow-sm bg-white" style="max-width: 900px;">
            <h5 class="text-center text-navy fw-bold">Landlord Information</h5>
            <hr class="border-gold mb-4" />

            <EditForm Model="@landlordSearchModel">
                <div class="row mb-3 align-items-center">
                    <label class="col-sm-2 col-form-label fw-semibold text-navy">Landlord</label>
                    <div class="col-sm-10 position-relative">
                        <input type="text"
                               class="form-control"
                               value="@searchText"
                               @oninput="HandleInput"
                               placeholder="Type landlord name..." />

                        @if (filteredList?.Any() == true)
                        {
                            <ul class="list-group position-absolute w-100 shadow-sm z-3 mt-1"
                                style="max-height: 200px; overflow-y: auto;">
                                @foreach (var item in filteredList)
                                {
                                    <li class="list-group-item list-group-item-action"
                                        style="cursor: pointer;"
                                        @onclick="@(() => SelectLandlord(item.Id))">
                                        @item.Name @(!string.IsNullOrEmpty(item.LandLordCode) ? $"({item.LandLordCode})" : "")

                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </EditForm>

            @if (landlordDetails != null)
            {
                <div class="row mt-4">
                    <div class="col-md-6">
                        <div class="border rounded p-3  bg-light">
                            <h6 class="text-navy fw-bold">Landlord Details</h6>
                            <p><strong>Name:</strong> @landlordDetails.Landlord.Name</p>
                            <p><strong>Email:</strong> @landlordDetails.Landlord.Email</p>
                            <p><strong>Phone:</strong> @landlordDetails.Landlord.Phone</p>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="border rounded p-3 bg-light">
                            <h6 class="text-navy mb-3 fw-bold">Buildings</h6>

                            @if (landlordDetails.Buildings?.Any() == true)
                            {
                                @foreach (var b in landlordDetails.Buildings)
                                {
                                    <div class="card mb-3 shadow-sm">
                                        <div class="card-body">
                                            <h6 class="card-title text-navy"><strong>Apartment Code:</strong> @b.ApartmentCode</h6>
                                            <p class="card-text mb-1"><strong>Address:</strong> @b.City</p>
                                            <p class="card-text mb-0"><strong>State:</strong> @b.State</p>
                                            <p class="card-text mb-1"><strong>Zipcode:</strong> @b.Zipcode</p>
                                            <p class="card-text mb-0"><strong>City:</strong> @b.PremiseType</p>
                                            <p class="card-text mb-1"><strong>MDR Number:</strong> @b.MDR_Number</p>
                                            <p class="card-text mb-0"><strong>Petitioner Interest:</strong> @b.PetitionerInterest</p>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p>No buildings found.</p>
                            }
                        </div>
                    </div>

                </div>
            }

        </div>
    }


@if (currentStep == 2)
{

        <div class="mx-auto p-4 border rounded shadow-sm bg-white" style="max-width: 900px;">
            <h5 class="text-center text-navy fw-bold"> Building/Property Details</h5>
            <hr class="border-gold mb-4" />

            <EditForm Model="@buildingSearchModel">
                <div class="row mb-3 align-items-center">
                    <label class="col-sm-2 col-form-label fw-semibold text-navy">Building/Property</label>
                    <div class="col-sm-10 position-relative">
                        <input type="text"
                               class="form-control"
                               value="@searchBuildingText"
                               @oninput="HandleBuildingInput"
                               placeholder="Search by Apartment Code..." />

                        @if (filteredBuildingList?.Any() == true)
                        {
                            <ul class="list-group position-absolute w-100 shadow-sm z-3 mt-1"
                                style="max-height: 200px; overflow-y: auto;">
                                @foreach (var item in filteredBuildingList)
                                {
                                    <li class="list-group-item list-group-item-action"
                                        style="cursor: pointer;"
                                        @onclick="@(() => SelectBuilding(item.Id))">
                                        @item.ApartmentCode

                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </EditForm>

            @if (buildingDetails != null)
            {
                <div class="row mt-4">
                    <div class="col-md-6">
                        <div class="border rounded p-3 bg-light">
                            <h6 class="text-navy mb-3 fw-bold">Building Details</h6>

                            <div class="card mb-3 shadow-sm">
                                <div class="card-body">
                                    <h6 class="card-title text-navy"><strong>Apartment Code:</strong> @buildingDetails.ApartmentCode</h6>
                                    <p class="card-text mb-1"><strong>City:</strong> @buildingDetails.City</p>
                                    <p class="card-text mb-1"><strong>State:</strong> @buildingDetails.State</p>
                                    <p class="card-text mb-1"><strong>Zipcode:</strong> @buildingDetails.Zipcode</p>
                                    <p class="card-text mb-1"><strong>Premise Type:</strong> @buildingDetails.PremiseType</p>
                                    <p class="card-text mb-1"><strong>MDR Number:</strong> @buildingDetails.MDR_Number</p>
                                    <p class="card-text mb-1"><strong>Petitioner Interest:</strong> @buildingDetails.PetitionerInterest</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

        </div>
}

</div>
<!-- Button Group -->
<div class="container my-4" style="position:fixed ; bottom:-17px">
    <div class="d-flex justify-content-between align-items-center">
        <button class="btn bg-navy text-white" @onclick="Back" disabled="@(currentStep == 0)">← Back</button>

        <div class="d-flex gap-2">
            @if (currentStep > 0 && currentStep < lastStep)
            {
                <button class="btn btn-outline-warning" @onclick="SaveAsDraft">Save as Draft</button>
            }
            @if (currentStep < lastStep)
            {
                <button class="btn bg-gold text-white" @onclick="Next" disabled="@IsNextDisabled">Next →</button>
            }
            @if (currentStep == lastStep)
            {
                <button class="btn btn-success" @onclick="Submit"> Submit</button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string ClientId { get; set; }

    int currentStep = 0;
    int lastStep = 2;

    List<string> stepTitles = new() {
        "Case & Role", "Landlord Info", "Property Info",
        // "Eviction 6-A", "NYC Properties",
        // "Court Status", "Documents", "Declarations"
    };

    private LandlordSearchModel landlordSearchModel = new();
    private BuildingSearchModel buildingSearchModel = new();
    private string searchText = "";
    private string searchBuildingText = "";
    private List<CreateLandLordDto> filteredList = new();
    private List<AddApartment> filteredBuildingList = new();
    private CreateLandLordDto? selectedLandlord;
    private AddApartment? SelectApartment;

    private async Task HandleInput(ChangeEventArgs e)
    {
        searchText = e?.Value?.ToString() ?? "";

        if (!string.IsNullOrWhiteSpace(searchText))
        {
            filteredList = await _landlordService.SearchLandlordsAsync(searchText);
        }
        else
        {
            filteredList.Clear();
        }
    }



    private async Task HandleBuildingInput(ChangeEventArgs e)
    {
        searchBuildingText = e?.Value?.ToString() ?? "";

        if (!string.IsNullOrWhiteSpace(searchBuildingText))
        {
            filteredBuildingList = await _apartmentService.SearchBuildingByCode(searchBuildingText);
        }
        else
        {
            filteredBuildingList.Clear();
        }
    }

    private LandlordWithBuildings? landlordDetails;
    private AddApartment buildingDetails;
   

    private async Task SelectLandlord(Guid id)
    {
        landlordDetails = await _landlordService.GetLandlordWithBuildingsAsync(id);

        if (landlordDetails?.Landlord != null)
        {
            searchText = landlordDetails.Landlord.Name;
            landlordSearchModel.SelectedLandlord = landlordDetails.Landlord.Name;
        }

        filteredList.Clear();
    }

    private async Task SelectBuilding(Guid id)
    {
        buildingDetails = await _apartmentService.GetByIdAsync(id);

        if (buildingDetails != null)
        {
            searchBuildingText = buildingDetails.ApartmentCode;
            
        }

        filteredBuildingList.Clear();
    }


    string first_name;
    string last_name;
    string gender = "male";
    string address;
    string phone;
    string code;
    string date;
    string month;
    string year;

    bool checkbox;
    bool checkbox_other;

    // Bank Info
    string bank;
    string branch;
    string email;
    string account_name;
    string account_number;
    string date_2;
    string month_2;
    string year_2;
    string selectedClientRole;
    string selectedCaseType;
    string otherCaseType;
    string holdoverSubType;

    private string attorney;
    private string firm;
    private string registeredAgent;
    private string residentialUnits;
    private string commercialUnits;
    private string dhcrRegistered;
    private string hpdViolations;
    private string yearBuilt;
    private string heatWater;
    private string BuildingCode;

    private CreateTenantDto tenantDto = new CreateTenantDto();
    private CreateLandLordDto landLordDto = new CreateLandLordDto();
    private AddApartment apartmentDto = new AddApartment();
    private CreateEditLegalCaseModel legalcaseDto = new CreateEditLegalCaseModel();
    private CreateClientDto clientDto = new CreateClientDto();

    private List<CreateTenantDto> matchedTenants = new List<CreateTenantDto>();
    private List<CreateLandLordDto> matchedLandLords = new List<CreateLandLordDto>();
    private List<CreateClientDto> matchedClients = new List<CreateClientDto>();
    private List<AddApartment> matchedBuilding = new List<AddApartment>();
    private bool showSuggestions = false;


    private bool IsNextDisabled =>
        (currentStep == 0 &&
        (
            string.IsNullOrWhiteSpace(legalcaseDto.ClientRole) ||
            (legalcaseDto.ClientRole == "Legal Representative" && string.IsNullOrWhiteSpace(legalcaseDto.LegalRepresentative)) ||
            string.IsNullOrWhiteSpace(otherCaseType) ||
            (otherCaseType == "Holdover" && string.IsNullOrWhiteSpace(holdoverSubType)) ||
            (otherCaseType == "Other" && string.IsNullOrWhiteSpace(legalcaseDto.CaseType))
        ))
        ||
        (currentStep == 1 &&
        string.IsNullOrWhiteSpace(landlordSearchModel.SelectedLandlord));


    void SaveAsDraft() => Console.WriteLine("Saving Draft...");
    private void Next()
    {
        if (otherCaseType == "Holdover")
            legalcaseDto.CaseType = holdoverSubType;
        else if (otherCaseType != "Other")
            legalcaseDto.CaseType = otherCaseType;

        currentStep++;
    }

    void Back() => currentStep--;



    protected override async Task OnInitializedAsync()
    {
        // AllClients = await _clientService.GetAllClientsAsync() ?? new();
        // await clientModal.Show(AllClients); // Open the popup on first load
    }

    // private void HandleClientSelected(Guid clientId)
    // {
    //     selectedClientId = clientId;

    //     // You can now use selectedClientId in form logic (e.g., load data, bind to DTO, etc.)
    //     Console.WriteLine($"Client selected: {clientId}");
    // }


    private async Task Submit()
    {
        var result = false;

        if (tenantDto == null || tenantDto.Id == Guid.Empty)
        {
            tenantDto.Id = Guid.NewGuid();
            await _tenantService.AddTenantAsync(tenantDto);
        }

        if (landLordDto == null || landLordDto.Id == Guid.Empty)
        {
            landLordDto.Id = Guid.NewGuid();
            //await _landlordService.AddLandLordAsync(landLordDto);
        }

        if (apartmentDto == null || apartmentDto.Id == Guid.Empty)
        {
            apartmentDto.Id = Guid.NewGuid();
            // await _apartmentService.AddApartmentAsync(apartmentDto);
        }

        if (legalcaseDto == null || legalcaseDto.Id == Guid.Empty)
        {
            legalcaseDto.Id = Guid.NewGuid();
            legalcaseDto.LandLordId = landLordDto.Id;
            legalcaseDto.ApartmentId = apartmentDto.Id;
            legalcaseDto.TenantId = tenantDto.Id;
            legalcaseDto.ClientId = Guid.Parse(ClientId);
            legalcaseDto.CaseName = _dataService.CaseName;

            if (legalcaseDto.CaseType == null)
                legalcaseDto.CaseType = otherCaseType;

            result = await _legalCaseService.AddLegalCasesAsync(legalcaseDto);

            _dataService.CaseName = null;
        }

        if (result)
        {
            nav.NavigateTo("/cases");
        }
    }




    private CancellationTokenSource _cts;
    private async Task OnTenantCodeChanged(ChangeEventArgs e)
    {
        _cts?.Cancel(); // cancel previous call
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        var input = e.Value?.ToString() ?? string.Empty;
        tenantDto.TenantCode = input;

        if (input.Length >= 3)
        {
            await Task.Delay(1000, token); // debounce
            matchedTenants = await _tenantService.SearchTenantbyCode(input);
            showSuggestions = matchedTenants.Any();
        }
        else
        {
            showSuggestions = false;
        }
    }
    private void SelectTenant(CreateTenantDto selectedTenant)
    {
        tenantDto = selectedTenant;
        showSuggestions = false;
    }

    private async Task OnLandLordCodeChanged(ChangeEventArgs e)
    {
        _cts?.Cancel(); // cancel previous call
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        var input = e.Value?.ToString() ?? string.Empty;
        landLordDto.LandLordCode = input;

        if (input.Length >= 3)
        {
            await Task.Delay(1000, token); // debounce
            var landlord = await _landlordService.SearchLandlordByCode(input);
            matchedLandLords = landlord.Where(e => e.Id == Guid.Parse(ClientId)).ToList();
            showSuggestions = matchedLandLords.Any();
        }
        else
        {
            showSuggestions = false;
        }
    }
    private void SelectLandLord(CreateLandLordDto selectedTenant)
    {
        landLordDto = selectedTenant;
        showSuggestions = false;
    }

    private async Task OnClientCodeChanged(ChangeEventArgs e)
    {
        _cts?.Cancel(); // cancel previous call
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        var input = e.Value?.ToString() ?? string.Empty;
        clientDto.ClientCode = input;

        if (input.Length >= 3)
        {
            await Task.Delay(1000, token); // debounce
            matchedClients = await _clientService.SearchClientByCode(input);
            showSuggestions = matchedClients.Any();
        }
        else
        {
            showSuggestions = false;
        }
    }
    private void SelectClient(CreateClientDto selectedClient)
    {
        // legalcaseDto.Company = selectedClient.Name;

        showSuggestions = false;
    }

    private async Task OnBuildingChanged(ChangeEventArgs e)
    {
        _cts?.Cancel(); // cancel previous call
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        var input = e.Value?.ToString() ?? string.Empty;
        apartmentDto.ApartmentCode = input;

        if (input.Length >= 3)
        {
            await Task.Delay(1000, token); // debounce
            var apartnent = await _apartmentService.SearchBuildingByCode(input);
            matchedBuilding = apartnent.Where(e => e.Id == Guid.Parse(ClientId)).ToList();
            showSuggestions = matchedBuilding.Any();
        }
        else
        {
            showSuggestions = false;
        }
    }
    // private void SelectBuilding(AddApartment selectedapartment)
    // {
    //     legalcaseDto.Address = selectedapartment.Address_1 + ", " + selectedapartment.Address_2;
    //     legalcaseDto.ZIP = selectedapartment.Zipcode;
    //     legalcaseDto.Class = selectedapartment.PremiseType;
    //     apartmentDto.Id = selectedapartment.Id;
    //     showSuggestions = false;
    // }
}
