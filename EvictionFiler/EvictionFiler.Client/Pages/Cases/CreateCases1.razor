@page "/createcase1"

@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@using EvictionFiler.Application.DTOs
@using EvictionFiler.Application.DTOs.ApartmentDto
@using EvictionFiler.Application.DTOs.ClientDto
@using EvictionFiler.Application.DTOs.LandLordDto
@using EvictionFiler.Application.DTOs.LegalCaseDto
@using EvictionFiler.Application.DTOs.OccupantDto
@using EvictionFiler.Application.DTOs.PaginationDto
@using EvictionFiler.Application.DTOs.TenantDto
@using EvictionFiler.Application.Interfaces.IRepository.MasterRepository
@using EvictionFiler.Application.Interfaces.IServices
@using EvictionFiler.Application.Services
@using EvictionFiler.Client.Components.Cases
@using EvictionFiler.Client.Jwt
@using EvictionFiler.Domain.Entities.Master
@using Blazored.Typeahead

@inject IClientRoleRepository ClientRoleRepository
@inject ICaseTypeRepository CaseTypeRepository
@inject ICaseSubTypeRepository CaseSubTypeRepository
@inject IRegulationStatusRepository RegulationStatusRepository
@inject IReasonHoldoverRepository ReasonHoldoverRepository
@inject ILandlordTypeRepository LandlordTypeRepository
@inject IRenewalStatusRepository RenewalStatusRepository
@inject IUnitIllegalRepository UnitIllegalRepository
@inject ITenancyTypeRepository TenancyTypeRepository
@inject IDateRentRepository DateRentRepository
@inject ILandlordSevice _landlordService
@inject IBuildingService _buildingService
@inject ILegalCaseService _legalCaseService
@inject ITenantService _tenantService
@inject IClientService _clientService
@inject ICaseProgramRepository _caseprogram
@inject IAdditionalTenantService _additionalTenant
@inject IAdditionalOccupantsService _additionalOccupant
@inject IStateRepository _stateRepository

@using EvictionFiler.Client.SpinnerService
@using EvictionFiler.Domian.Enums
@inject IJSRuntime JS
@inject NavigationManager nav
@inject SpinnerService spinnerservice
@using Microsoft.AspNetCore.Components.Authorization;
@using EvictionFiler.Domain.Entities

@using System.Security.Claims
@inject JwtAuthStateProviders _authStateProvider
<!--
EvictionFiler – Intake Wizard (Blazor + Bootstrap 5)
• Single self‑contained .razor component
• Stepper, progress bar, per‑step validation
• Clean Bootstrap 5 cards & grid
• Review screen and JS alert on submit (replace with API call)
-->

<style>
    .required-label::after {
    content: " *";
    color: red;
    }

    :root {
    --bg: #f7f9fc;
    --card: #ffffff;
    --ink: #0f172a;
    --muted: #64748b;
    --line: #e2e8f0;
    --brand: #4f46e5;
    --brand-2: #4338ca;
    --ok: #059669;
    --warn: #b45309;
    --danger: #b91c1c;
    --radius: 16px;
    --shadow: 0 6px 24px rgba(2, 6, 23, .08);
    }

    * {
    box-sizing: border-box
    }

    html,
    body {
    height: 100%
    }

    body {
    margin: 0;
    font: 14px/1.5 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif;
    background: radial-gradient(70% 120% at 50% -10%, #eef2ff 0%, var(--bg) 60%);
    color: var(--ink)
    }

    .wrap {
    max-width: 1200px;
    margin: auto;
    padding: 24px
    }

    header.top {
    position: sticky;
    top: 0;
    z-index: 10;
    background: rgba(255, 255, 255, .9);
    backdrop-filter: saturate(180%) blur(6px);
    border-bottom: 1px solid var(--line)
    }

    header.top .bar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 12px 24px;
    max-width: 1200px;
    margin: auto
    }

    .brand {
    display: flex;
    gap: 12px;
    align-items: center
    }

    .logo {
    width: 40px;
    height: 40px;
    border-radius: 14px;
    background: #0f172a;
    color: #fff;
    display: grid;
    place-items: center;
    font-weight: 700
    }

    .secure {
    display: inline-flex;
    gap: 8px;
    align-items: center;
    border-radius: 999px;
    padding: 6px 10px;
    border: 1px solid #d1fae5;
    background: #ecfdf5;
    color: #065f46;
    font-size: 12px
    }

    .stepper {
    padding: 0 24px 14px;
    max-width: 1200px;
    margin: auto
    }

    .track {
    height: 6px;
    background: #e5e7eb;
    border-radius: 999px;
    overflow: hidden
    }

    .meter {
    height: 100%;
    background: linear-gradient(90deg, var(--brand), var(--brand-2));
    width: 40%
    }

    .steps {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
    margin: 8px 0
    }

    .chip {
    display: flex;
    gap: 8px;
    align-items: center;
    color: #475569
    }

    .dot {
    width: 10px;
    height: 10px;
    border-radius: 999px;
    background: #cbd5e1
    }

    .dot.active {
    background: #818cf8
    }

    .dot.done {
    background: #4f46e5
    }

    .grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 24px
    }

    @@media (max-width:1024px) {
    .grid {
    grid-template-columns: 1fr
    }
    }

    .card {
    background: var(--card);
    border: 1px solid var(--line);
    border-radius: var(--radius);
    box-shadow: var(--shadow)
    }

    .card > header {
    padding: 18px 20px;
    border-bottom: 1px solid var(--line);
    display: flex;
    gap: 12px;
    align-items: flex-start
    }

    .k {
    width: 28px;
    height: 28px;
    border-radius: 12px;
    background: #0f172a;
    color: #fff;
    display: grid;
    place-items: center;
    font-size: 12px;
    font-weight: 700
    }

    .card .body {
    padding: 20px
    }

    .fields {
    display: grid;
    gap: 16px
    }

    .cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr))
    }

    .cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr))
    }

    @@media (max-width:820px) {
    .cols-2, .cols-3 {
    grid-template-columns: 1fr
    }
    }

    label.lbl {
    display: block;
    font-size: 12px;
    text-transform: uppercase;
    letter-spacing: .04em;
    font-weight: 700;
    color: #475569;
    margin-bottom: 6px
    }

    input.txt,
    select.sel {
    width: 100%;
    padding: 12px 14px;
    border: 1px solid #cbd5e1;
    border-radius: 12px;
    background: #fff;
    color: #0f172a;
    outline: none
    }

    input.txt:focus,
    select.sel:focus {
    border-color: #6366f1;
    box-shadow: 0 0 0 6px #eef2ff
    }

    .hint {
    font-size: 12px;
    color: #64748b;
    margin-top: 4px
    }

    .pill {
    display: inline-block;
    padding: 8px 12px;
    border: 1px solid #cbd5e1;
    border-radius: 12px;
    background: #fff;
    font-size: 13px
    }

    .aside.card {
    position: sticky;
    top: 106px;
    height: fit-content
    }

    .kv {
    display: flex;
    justify-content: space-between;
    gap: 12px
    }

    .kv .k {
    background: none;
    color: #64748b;
    width: auto;
    height: auto;
    border-radius: 0;
    font-weight: 600
    }

    .actions {
    position: sticky;
    bottom: 0;
    z-index: 10;
    background: rgba(255, 255, 255, .9);
    border-top: 1px solid var(--line)
    }

    .actions .row {
    max-width: 1200px;
    margin: auto;
    padding: 12px 24px;
    display: flex;
    justify-content: space-between;
    align-items: center
    }

    .btn {
    padding: 10px 16px;
    border-radius: 12px;
    border: 1px solid #cbd5e1;
    background: #fff;
    color: #0f172a
    }

    .btn.primary {
    background: var(--brand);
    border-color: transparent;
    color: #fff
    }

    .btn.danger {
    background: #fee2e2;
    border-color: #fecaca;
    color: #991b1b
    }

    .list {
    display: flex;
    flex-direction: column;
    gap: 8px
    }

    .list .row {
    display: flex;
    gap: 8px
    }

    .iconbtn {
    border: 1px solid #cbd5e1;
    background: #fff;
    border-radius: 10px;
    padding: 8px 10px;
    cursor: pointer
    }

    .pre {
    white-space: pre-wrap;
    background: #0b1020;
    color: #e2e8f0;
    border-radius: 12px;
    padding: 14px;
    overflow: auto;
    max-height: 360px
    }

    @@media (max-width:560px) {
    .logo {
    width: 36px;
    height: 36px
    }

    .brand h1 {
    font-size: 16px
    }

    .secure {
    display: none
    }
    }
</style>


<div class="container-fluid py-3 border-bottom bg-white sticky-top">
    <div class="d-flex justify-content-between align-items-center">

        <div class="d-flex align-items-center" style="gap:55px">
            @for (var i = 0; i < Steps.Count; i++)
            {
                var bgColor = i <= (int)CurrentStep ? "#1F365D" : "#6c757d"; // secondary color fallback

                <div class="d-flex align-items-center gap-2">
                    <span class="rounded-circle d-inline-block"
                    style="width:14px; height:14px; border: 1px solid #333; background-color:@bgColor;"></span>
                    <span>@Steps[i]</span>
                </div>
            }
        </div>


    </div>
    <div class="progress mt-3" style="height:6px;">
        <div class="progress-bar" role="progressbar" style="width:@Progress% ;  background-color:#1F365D !important"></div>
    </div>
</div>

<div class="container my-4">
    <EditForm EditContext="_editContext">
        <DataAnnotationsValidator />

        @* Case Info *@
        @if (CurrentStep == Step.CaseAndclient)
        {

            <div class="row">
                <div class="col-8">
                    <div class="card mb-3">
                        <div class="card-header fw-bold">Case Information</div>
                        <div class="card-body">
                            <div class="row">
                                <!-- Case Type Dropdown -->
                                <div class="col-6">
                                    <label class="form-label required-label">Case Type</label>
                                    <InputSelect class="form-select" @bind-Value="legalcaseDto.CaseTypeId">
                                        <option value="">-- Select type --</option>
                                        @foreach (var l in CaseTypeList)
                                        {
                                            <option value="@l.Id">@l.Name</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="() => legalcaseDto.CaseTypeId" />
                                </div>

                                <div class="col-6">


                                    <label class="form-label required-label">Client</label>

                                    <input type="text" class="form-control"
                                    placeholder="Type client name or code..."
                                    @bind-value="searchText" @bind-value:after="OnBindClientAfter"
                                    @oninput="OnSearchInput" />

                                    @if (selectedClient != null)
                                    {
                                        <button type="button"
                                        class="btn btn-sm position-absolute top-50 end-0 translate-middle-y me-3 p-0 border-0 bg-transparent"
                                        style="z-index: 10;"
                                        @onclick="ClearSelectedClient"
                                        title="Clear">
                                            <span style="font-size: 1.2rem;">✖</span>
                                        </button>
                                    }

                                    @if (filteredClients?.Any() == true)
                                    {
                                        <ul class="dropdown-menu show">
                                            @foreach (var c in filteredClients)
                                            {
                                                <li class="dropdown-item" @onclick="() => SelectClient(c)">
                                                    @c.FirstName @c.LastName / @c.ClientCode
                                                </li>
                                            }
                                        </ul>
                                    }
                                    @* <ValidationMessage For="() => legalcaseDto.ClientId" /> *@
                                </div>

                                @if (showClientTextbox)
                                {
                                    <hr class="mt-3" />
                                    <div class="card mt-3 p-3 ">
                                        <div class="row">
                                            <div class="col-4">
                                                <label class="form-label">Client Name</label>
                                                <InputText class="form-control" placeholder="Enter Name" @bind-Value="legalcaseDto.ClientName" />
                                            </div>
                                            <div class="col-4">
                                                <label class="form-label">Client Type</label>
                                                <InputSelect class="form-select" @bind-Value="legalcaseDto.ClientTypeId">
                                                    <option value="">-- Select Type --</option>
                                                    @foreach (var Own in ClientTypeList)
                                                    {
                                                        <option value="@Own.Id">@Own.Name</option>
                                                    }
                                                </InputSelect>
                                            </div>
                                            <div class="col-4">
                                                <label class="form-label">Email</label>
                                                <InputText class="form-control" placeholder="Enter Email" @bind-Value="legalcaseDto.ClientEmail" />
                                            </div>

                                            <div class="col-4 mt-3">
                                                <label class="form-label">Phone</label>
                                                <InputText class="form-control" placeholder="Enter Number" @bind-Value="legalcaseDto.ClientPhone" />
                                            </div>
                                            <div class="col-4 mt-3">
                                                <label class="form-label">Reference #</label>
                                                <InputText class="form-control" placeholder="Enter Reference" @bind-Value="legalcaseDto.Reference" />
                                            </div>
                                        </div>
                                    </div>
                                }
                                <!-- Existing client card -->
                                <!-- New client -->
                                @* @if (selectedClient == null && !string.IsNullOrWhiteSpace(searchText))
								{
									<hr />
									<div class="card mt-3 p-3 ">
										<div class="row">
											<div class="col-4">
												<label class="form-label">Client Name</label>
												<InputText class="form-control" @bind-Value="newClient.FirstName" />
											</div>
											<div class="col-4">
												<label class="form-label">Last Name</label>
												<InputText class="form-control" @bind-Value="newClient.LastName" />
											</div>
											<div class="col-4">
												<label class="form-label">Client Code</label>
												<InputText class="form-control" @bind-Value="newClient.ClientType" />
											</div>
										</div>

										<div class="row mt-3">
											<div class="col-4">
												<label class="form-label">Email</label>
												<InputText class="form-control" @bind-Value="newClient.Email" />
											</div>
											<div class="col-4">
												<label class="form-label">Phone</label>
												<InputText class="form-control" @bind-Value="newClient.Phone" />
											</div>
										</div>
									</div>
								} *@
                            </div>


                        </div>
                    </div>
                </div>

                <!-- Right side summary -->
                <div class="col-4">
                    <CasesSummary LegalCase="legalcaseDto"
                    ClientList="ClientList"
                    CaseTypeList="CaseTypeList"
                    CurrentStep="CurrentStep" />
                    <TipsSummary />
                </div>
            </div>


        }


        @if (CurrentStep == Step.Landlord)
        {
            <div class="row">
                <div class="col-8">
                    <div class="card mb-3">
                        <div class="card-header fw-bold">Landlord Information</div>
                        <div class="card-body ">
                            <div class="row mt-4">
                                <div class="col-md-6">
                                    <label class="form-label  required-label">Landlord / Owner Name </label>
                                    <input type="text" class="form-control"
                                    placeholder="Type client name or code..."
                                    @bind-value="searchlandlordText" @bind-value:after="SelectLandlords"
                                    @oninput="OnSearchLandlordInput" />
                                    @if (filteredLandlords?.Any() == true)
                                    {
                                        <ul class="dropdown-menu show">
                                            @foreach (var c in filteredLandlords)
                                            {
                                                <li class="dropdown-item" @onclick="() => SelectLandlord(c)">
                                                    @c.FirstName @c.LastName / @c.LandLordCode
                                                </li>
                                            }
                                        </ul>
                                    }
                                    <ValidationMessage For="() => legalcaseDto.landlordName" />
                                </div>


                                <div class="col-md-6">
                                    <label class="form-label  required-label">Contact Person </label>
                                    <InputText class="form-control" @bind-Value="legalcaseDto.ContactPersonName" placeholder="Enter Contact Person" />
                                    <ValidationMessage For="() => legalcaseDto.ContactPersonName" />
                                </div>


                            </div>

                            <div class="row mt-4">
                                <div class="col-md-6 mt-2">
                                    <label class="form-label  required-label">Landlord Address </label>
                                    <InputText class="form-control" @bind-Value="legalcaseDto.LandlordAddress" placeholder="Enter Address" />
                                    <ValidationMessage For="() => legalcaseDto.LandlordAddress" />
                                </div>
                                <div class="col-md-6 mt-2">
                                    <label class="form-label  required-label">Attorney Of Record </label>
                                    <InputText class="form-control" @bind-Value="legalcaseDto.AttorneyOfRecord" placeholder="Enter Attorney" />
                                    <ValidationMessage For="() => legalcaseDto.AttorneyOfRecord" />
                                </div>
                            </div>
                            <div class="row mt-4">
                                <div class="col-md-6">
                                    <label class="form-label  required-label">Law Firm </label>
                                    <InputText class="form-control" @bind-Value="legalcaseDto.LawFirm" placeholder="Enter Firm" />
                                    <ValidationMessage For="() => legalcaseDto.LawFirm" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <CasesSummary LegalCase="legalcaseDto" LandLordTypeList="LandLordTypeList" CurrentStep="CurrentStep" />

                    <TipsSummary />
                </div>
            </div>
        }
        @* BUILDING *@
        @if (CurrentStep == Step.Building)
        {
            <div class="row">
                <div class="col-8">
                    <div class="card mb-3">
                        <div class="card-header fw-bold ">Building Information</div>
                        <div class="card-body row g-3">
                            <div class="row mt-4">
                                <div class="col-md-6">
                                    <label class="form-label  required-label">Building</label>
                                    <input type="text" class="form-control"
                                    placeholder="Type client name or code..."
                                    @bind-value="searchBuildingText" @bind-value:after="OnBindBuldingAfter"
                                    @oninput="OnSearchBuildingInput" readonly="@IsNewBuilding" />
                                    @if (filteredBuildings?.Any() == true)
                                    {
                                        <ul class="dropdown-menu show">
                                            @foreach (var c in filteredBuildings)
                                            {
                                                <li class="dropdown-item" @onclick="() => SelectBuilding(c)">
                                                    @c.ApartmentCode @c.City / @c.BuildingCode
                                                </li>
                                            }
                                        </ul>
                                    }
                                    @* <ValidationMessage For="() => legalcaseDto.BuildingId" /> *@
                                </div>


                            </div>

                            <div class="row mt-4">
                                <div class="col-6">
                                    <label class="form-label  required-label">Street Address *</label>
                                    <InputText class="form-control" @bind-Value="legalcaseDto.BuildingAddress" placeholder="Enter Address" />
                                    <ValidationMessage For="() => legalcaseDto.BuildingAddress" />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label required-label">Unit / Apt </label>
                                    <InputText class="form-control" @bind-Value="legalcaseDto.UnitOrApartmentNumber" placeholder="Enter Units" />
                                    <ValidationMessage For="() => legalcaseDto.Units" />
                                </div>
                            </div>

                            <div class="row mt-4">
                                <div class="col-md-6">
                                    <label class="form-label  required-label">Borough / City </label>
                                    <InputText class="form-control" @bind-Value="legalcaseDto.Borough" placeholder="Enter Borough / City" />
                                    <ValidationMessage For="() => legalcaseDto.Borough" />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label  required-label">MDR Number </label>
                                    <InputText class="form-control" @bind-Value="legalcaseDto.Mdr" placeholder="Enter MDR Number" />
                                    <ValidationMessage For="() => legalcaseDto.Mdr" />
                                </div>
                            </div>


                            <div class="row mt-4">
                                <div class="col-md-6">
                                    <label class="form-label required-label">Units </label>
                                    <InputText class="form-control" @bind-Value="legalcaseDto.Units" placeholder="Enter Units" />
                                    <ValidationMessage For="() => legalcaseDto.Units" />
                                </div>
                                <div class="col-6">
                                    <label class="form-label  required-label">Rent Regulation *</label>
                                    <InputSelect class="form-select" @bind-Value="legalcaseDto.RegulationStatusId">
                                        <option value="">-- Select Type --</option>
                                        @foreach (var l in RegulationList)
                                        {
                                            <option value="@l.Id">@l.Name</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="() => legalcaseDto.RegulationStatusId" />
                                </div>
                            </div>





                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <CasesSummary LegalCase="legalcaseDto"
                    LandLordTypeList="LandLordTypeList"
                    RegulationList="RegulationList"
                    CurrentStep="CurrentStep" />


                    <TipsSummary />
                </div>
            </div>


        }

        @* TENANT *@
        @if (CurrentStep == Step.Tenant)
        {

            <div class="row">
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-header">
                            <div style="font-weight:700">Tenant / Occupant</div>
                            <div class="hint">Add multiple tenants and undertenants</div>
                        </div>

                        <div class="card-body">
                            <!-- Unit / Apt -->
                            <div class="row">
                                <div class="col-6">
                                    <label class="form-label required-label">Unit / Apt # (confirm)</label>
                                    <InputText class="form-control" @bind-Value="legalcaseDto.UnitOrApartmentNumber" placeholder="Enter Unit / Apt" />
                                </div>
                            </div>

                            <div class="row mt-3">
                                <div class="col-12">
                                    <label class="lbl">Tenants</label>
                                    @if (Tenants.Count > 0)
                                    {

                                        @foreach (var tenant in Tenants.Select((t, i) => new { t, i }))
                                        {
                                            <input class="form-control mb-2"
                                            placeholder="Tenant Name"
                                            @bind-value="Tenants[tenant.i]"
                                            @onblur="() => OnchangeAdditionalTenant(tenant.i)" />
                                        }

                                    }

                                    <button class="btn btn-sm btn-primary mt-2" @onclick="AddTenant">＋ Add Tenant</button>
                                </div>

                                <div class="col-12 mt-3">
                                    <label class="lbl">Undertenants / Other Occupants</label>
                                    @if (Undertenants.Count > 0)
                                    {

                                        @foreach (var undertenant in Undertenants.Select((t, i) => new { t, i }))
                                        {
                                            <input class="form-control mb-2"
                                            placeholder="Other Occupant Name"
                                            @bind-value="Undertenants[undertenant.i]"
                                            @onblur="() => OnchangeAdditionalOccupants(undertenant.i)" />
                                        }
                                    }

                                    <button class="btn btn-sm btn-primary mt-2" @onclick="AddUnder">＋ Add Undertenant/Occupant</button>
                                </div>
                            </div>





                        </div>
                    </div>



                </div>
                <div class="col-4">
                    <CasesSummary LegalCase="legalcaseDto"
                    IsUnitIllegalList="IsUnitIllegalList"
                    CurrentStep="CurrentStep" />



                    <TipsSummary />
                </div>
            </div>
        }

        @* Term *@
        @if (CurrentStep == Step.Terms)
        {
            <div class="row">
                <div class="col-md-8">
                    <div class="card mb-3">
                        <div class="card-header">
                            <div style="font-weight:700">Terms</div>
                            <div class="hint">Move‑in date controls 30/60/90. Tenancy type only controls special 10‑day.</div>
                        </div>
                        <div class="card-body">
                            <div class="row g-2">

                                <!-- Written Lease -->
                                <div class="col-md-4">
                                    <label class="form-label">Written Lease?</label>
                                    <div class="d-flex justify-content-start align-items-center  gap-2">
                                        <InputRadioGroup @bind-Value="legalcaseDto.WrittenLease">
                                            <div class="form-check d-flex justify-content-center gap-2">
                                                <InputRadio class="form-check-input" Value="true" />
                                                <label class="form-check-label">Yes</label>
                                            </div>
                                            <div class="form-check  d-flex justify-content-center gap-2">
                                                <InputRadio class="form-check-input " Value="false" />
                                                <label class="form-check-label">No</label>
                                            </div>
                                        </InputRadioGroup>
                                    </div>
                                </div>

                                <!-- Oral Start -->
                                @* <div class="col-md-4">
                                    <label class="form-label">Oral Aggrement</label>
                                    <InputRadioGroup @bind-Value="legalcaseDto.OralAgreeMent">
                                        <div class="form-check d-flex justify-content-center gap-2">
                                            <InputRadio class="form-check-input" Value="true" />
                                            <label class="form-check-label">Yes</label>
                                        </div>
                                        <div class="form-check  d-flex justify-content-center gap-2">
                                            <InputRadio class="form-check-input " Value="false" />
                                            <label class="form-check-label">No</label>
                                        </div>
                                    </InputRadioGroup>
                                </div> *@
                                <div class="col-md-4">
                                    <label class="form-label">Oral Aggrement</label>
                                    <div class="d-flex justify-content-start align-items-center  gap-2">
                                        <InputRadioGroup @bind-Value="legalcaseDto.OralAgreeMent">
                                            <div class="form-check d-flex justify-content-center gap-2">
                                                <InputRadio class="form-check-input" Value="true" />
                                                <label class="form-check-label">Yes</label>
                                            </div>
                                            <div class="form-check  d-flex justify-content-center gap-2">
                                                <InputRadio class="form-check-input " Value="false" />
                                                <label class="form-check-label">No</label>
                                            </div>
                                        </InputRadioGroup>
                                    </div>
                                </div>

                                <!-- Oral End -->
                                <div class="col-md-4">
                                    <label class="form-label">Program</label>
                                    <InputSelect class="form-select" @bind-Value="legalcaseDto.CaseProgramId">
                                        <option value="">-- Select Type --</option>
                                        @foreach (var l in CaseProgramList)
                                        {
                                            <option value="@l.Id">@l.Name</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="() => legalcaseDto.CaseProgramId" />
                                </div>

                            </div>
                            <div class="row g-2 mt-2">
                                <!-- Date Tenant Moved -->
                                <div class="col-md-4">
                                    <label class="form-label">Good Cause Applies?</label>
                                    <InputSelect class="form-select" @bind-Value="legalcaseDto.GoodCauseApplies">
                                        <option value="false">No (Exempt)</option>
                                        <option value="true">Yes (Owner ≥ 10)</option>
                                    </InputSelect>

                                </div>

                                <!-- Rent Due Day -->
                                <div class="col-md-4">
                                    <label class="form-label ">Move In Date</label>
                                    <InputDate class="form-control" @bind-Value="legalcaseDto.DateTenantMoved"  @bind-Value:after="CalcNoticeDays"/>
                                </div>

                                <!-- Monthly Rent -->
                                <div class="col-md-4">
                                    <label class="form-label ">Lease End (If any) </label>
                                    <InputDate class="form-control" @bind-Value="legalcaseDto.LeaseEnd" />
                                </div>
                            </div>


                        </div>
                    </div>
                </div>


                <div class="col-md-4">
                    <CasesSummary LegalCase="legalcaseDto"
                    TenancyTypeList="TenancyTypeList"
                    DateRentList="DateRentList"
                    CaseProgramList="CaseProgramList"
                    CurrentStep="CurrentStep" />
                    <TipsSummary />
                </div>
            </div>


        }

        @* CASE *@
        @if (CurrentStep == Step.Case)
        {
            <div class="row">
                <div class="col-md-8">
                    <div class="card mb-3">
                        <div class="card-header">
                            <div style="font-weight:700">Case</div>
                            <div class="hint">Pick the holdover scenario.</div>
                        </div>
                        <div class="card-body">
                            <div class="row g-2">
                                <!-- Tenancy Type -->
                                <div class="col-md-4">
                                    <label class="form-label required-label">Tenancy Type</label>
                                    <InputSelect class="form-select" @bind-Value="legalcaseDto.TenancyTypeId" @bind-Value:after="CalcNoticeDays">
                                        <option value="">-- Select Type --</option>
                                        @foreach (var l in TenancyTypeList)
                                        {
                                            <option value="@l.Id">@l.Name</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="() => legalcaseDto.TenancyTypeId" />
                                </div>



                                <!-- Oral Start -->
                                <div class="col-md-4">
                                    <label class="form-label">Date Notice Served</label>
                                    <InputDate class="form-control" @bind-Value="legalcaseDto.DateNoticeServed" @bind-Value:after="CalcExpireAligned"/>
                                </div>

                                <!-- Oral End -->
                                <div class="col-md-4">
                                    <label class="form-label">Calculated Notice Length</label>
                                    <InputNumber class="form-control" @bind-Value="legalcaseDto.CalculatedNoticeLength" />
                                </div>

                            </div>
                            <div class="row g-2 mt-2">
                                <!-- Expiration Date -->
                                <div class="col-md-4">
                                    <label class="form-label">Expiration Date (Auto)</label>
                                    <InputDate class="form-control" @bind-Value="legalcaseDto.ExpirationDate" />
                                </div>

                                <!-- Predicate -->
                                <div class="col-md-4">
                                    <label class="form-label  required-label">Predicate Notice (Auto) </label>
                                    <InputText class="form-control" @bind-Value="legalcaseDto.PredicateNotice" />
                                </div>


                            </div>


                        </div>
                    </div>
                </div>


                <div class="col-md-4">
                    <CasesSummary LegalCase="legalcaseDto"
                    TenancyTypeList="TenancyTypeList"
                    DateRentList="DateRentList"
                    CurrentStep="CurrentStep" />
                    <TipsSummary />
                </div>
            </div>

        }

        @* RENT *@

        @if (CurrentStep == Step.Rent)
        {
            <div class="row">
                <div class="col-md-8">
                    <div class="card mb-3">
                        <div class="card-header fw-bold">Rent Details</div>
                        <div class="card-body">
                            <div class="row g-2">

                                <!-- Rent Due Day -->
                                <div class="col-md-4">
                                    <label class="form-label  required-label">Date Rent is Due (Month/Week) </label>
                                    <InputSelect class="form-select" @bind-Value="legalcaseDto.RentDueEachMonthOrWeekId">
                                        <option value="">-- Select Type --</option>
                                        @foreach (var l in DateRentList)
                                        {
                                            <option value="@l.Id">@l.Name</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="() => legalcaseDto.RentDueEachMonthOrWeekId" />
                                </div>

                                <!-- Monthly Rent -->
                                <div class="col-md-4">
                                    <label class="form-label  required-label">Monthly Rent ($) </label>
                                    <InputNumber class="form-control" @bind-Value="legalcaseDto.MonthlyRent" placeholder="Enter Monthly Rent" />
                                    <ValidationMessage For="() => legalcaseDto.MonthlyRent" />
                                </div>

                                <!-- Tenant's Share -->
                                <div class="col-md-4">
                                    <label class="form-label">Tenant's Share ($)</label>
                                    <InputNumber class="form-control" @bind-Value="legalcaseDto.TenantShare" placeholder="Enter Total Share" />

                                </div>


                            </div>

                            <div class="row g-2 mt-2">
                                <div class="col-md-4">
                                    <label class="form-label">Social Services (If any)</label>
                                    <InputText class="form-control" @bind-Value="legalcaseDto.SocialService" placeholder="Enter Social Service" />

                                </div>

                                <div class="col-md-4">
                                    <label class="form-label">Last Month / Week Rent Paid </label>
                                    <InputText class="form-control" type="month" @bind-Value="LastrentPaid" placeholder="Enter Last Paid Rent Month" @bind-Value:after="FormatLastRentPaid" />

                                </div>
                                <!-- Total Rent Owed -->
                                <div class="col-md-4">
                                    <label class="form-label">Total Rent Owed ($)</label>
                                    <InputNumber class="form-control" @bind-Value="legalcaseDto.TotalOwed" placeholder="Enter Total Rent" />

                                </div>

                            </div>


                        </div>
                    </div>
                </div>


                <div class="col-md-4">
                    <CasesSummary LegalCase="legalcaseDto"
                    TenancyTypeList="TenancyTypeList"
                    DateRentList="DateRentList"
                    CurrentStep="CurrentStep" />
                    <TipsSummary />
                </div>
            </div>


        }

        @* Notice *@
        @if (CurrentStep == Step.Notice)
        {
            <div class="row">
                <div class="col-md-12">
                    <section class="card">
                        <header>
                            <div class="k">8</div>
                            <div>
                                <div style="font-weight:700">Notice Selector</div>
                                <div class="hint">Auto-selected predicate & merge preview</div>
                            </div>
                        </header>
                        <div class="body">
                            <div class="fields cols-2">
                                <div>
                                    <div class="pill">Selected: <strong id="selLabel">—</strong></div>
                                    <p class="hint" style="margin-top:8px">
                                        Move‑in → 30/60/90. Tenancy type → only special 10‑day. Expiration
                                        aligns to rent due day (default 1st).
                                    </p>
                                </div>
                                <div>
                                    <div class="pill">Export</div>
                                    <p class="hint" style="margin-top:8px">
                                        On submit, send <code>predicate</code> + <code>merge</code> to your
                                        doc engine.
                                    </p>
                                </div>
                            </div>
                            <div class="pre"><pre>@System.Text.Json.JsonSerializer.Serialize(MergeData, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre></div>


                        </div>
                    </section>
                </div>



            </div>


        }

        <div class="d-flex justify-content-between border-top pt-3 mt-3">
            <button type="button" class="btn btn-outline-secondary" @onclick="Prev" disabled="@(CurrentStep == Step.CaseAndclient)">← Back</button>
            @if (CurrentStep != Step.Notice)
            {
                <button type="button" class="btn" style="background-color:#1F365D !important; color:white" @onclick="Next">Next →</button>
            }
            else
            {
                <button type="button" class="btn btn-success" @onclick="SubmitAsync">Submit</button>
            }
        </div>
    </EditForm>

</div>

@code {
    private readonly List<string> Steps = new() { "Case & Client", "Landlord", "Building", "Tenant", "Terms", "Case", "Rent", "Notice" };
    private string ClientName { get; set; } = "";
    private string Tenancy { get; set; } = "";
    private DateTime? MovedIn { get; set; }
    private string RentDueDate { get; set; } = "1";
    private int CalcNoticeLength { get; set; }


    // Merge preview
    private NoticeMergeModel MergeData { get; set; } = new NoticeMergeModel();




    private IntakeModel legalcaseDto = new IntakeModel();
    [Parameter] public Step CurrentStep { get; set; }
    private EditContext _editContext;
    private ValidationMessageStore _messages;
    public List<IsUnitIllegal> IsUnitIllegalList = new();
    private List<RegulationStatus> RegulationList = new();
    private List<LandlordType> LandLordTypeList = new();
    private List<State> StateList = new();
    private List<ClientRole> ClientTypeList = new();
    private List<CaseType> CaseTypeList = new();
    private List<TenancyType> TenancyTypeList = new();
    private List<DateRent> DateRentList = new();
    private List<CaseProgram> CaseProgramList = new();
    private List<EditToClientDto> ClientList = new();
    private List<EditToLandlordDto> LandlordList = new();
    private List<EditToBuildingDto> BuildingList = new();
    private List<EditToTenantDto> TenantList = new();
    private List<EditToTenantDto> filteredTenantList = new();
    private List<AddtionalTenantDto> AdditionalTenantList = new();
    private List<AdditionalOccupantDto> AdditionalOccupantsList = new();
    private List<AdditioanlTenants> AdditionalTenantfromDbList = new();
    private string? loggedInUserId;
    private bool isAdmin = false;
    private bool? canbool = null;
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchTerm = "";
    private string LastrentPaid = "";

    protected override async Task OnInitializedAsync()
    {
        legalcaseDto = new IntakeModel();
        _editContext = new EditContext(legalcaseDto);
        _messages = new ValidationMessageStore(_editContext);


        LandLordTypeList = await LandlordTypeRepository.GetAllLandLordType();
        IsUnitIllegalList = await UnitIllegalRepository.GetAllUnitIllegal();
        RegulationList = await RegulationStatusRepository.GetAllRegulationStatus();
        TenancyTypeList = await TenancyTypeRepository.GetAllTenancyType();
        CaseTypeList = await CaseTypeRepository.GetAllCaseType();
        DateRentList = await DateRentRepository.GetAllDateRent();
        StateList = await _stateRepository.GetAllState();

        ClientTypeList = await ClientRoleRepository.GetAllClientRole();
        CaseProgramList = await _caseprogram.GetAllCaseProgram();
        // TypeOwnerList

        // legalcaseDto.ClientId = Guid.Parse(ClientId);

        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            loggedInUserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            isAdmin = user.Claims.Any(c => c.Type == ClaimTypes.Role && c.Value == "Admin");
        }
        ClientList = await _clientService.GetAllClient(loggedInUserId, isAdmin);
        LandlordList = await _landlordService.GetAllLandLordsAsync();


    }


    public string UnitNumber { get; set; }

    public List<string> Tenants { get; set; } = new();
    public List<string> Undertenants { get; set; } = new() { "John Doe", "Jane Doe" };

    public string UnitNo { get; set; } = "";

    public void FormatLastRentPaid()
    {
        var formatted = DateTime.ParseExact(LastrentPaid, "yyyy-MM", null)
                        .ToString("MMMM yyyy");

        legalcaseDto.LastRentPaid = formatted;

    }


    void AddTenant()
    {
        Tenants.Add(string.Empty);
    }
    void OnchangeAdditionalTenant(int index)
    {
        var name = Tenants[index];

        // If cleared, remove from AdditionalTenantList
        if (string.IsNullOrWhiteSpace(name))
        {
            var existing = AdditionalTenantList.ElementAtOrDefault(index);
            if (existing != null)
            {
                AdditionalTenantList.RemoveAt(index);
            }
            return;
        }

        // Update or add
        if (index < AdditionalTenantList.Count)
        {
            AdditionalTenantList[index].FirstName = name;
        }
        else
        {
            var additional = new AddtionalTenantDto()
                {
                    FirstName = name,
                    TenantId = TenantList.Select(e => e.Id).FirstOrDefault(),
                    CreatedOn = DateTime.Now,
                    IsActive = true,
                    IsDeleted = false, // better to keep false
                    IsVisible = true
                };

            AdditionalTenantList.Add(additional);
        }

        // Update legalcaseDto
        if (legalcaseDto.TenantName == null)
        {
            legalcaseDto.TenantName = AdditionalTenantList.FirstOrDefault()?.FirstName ?? "";
        }
    }


    void AddUnder()
    {
        Undertenants.Add(string.Empty);
    }

    // void OnchangeAdditionalOccupants()
    // {
    //     var additional = new AdditionalOccupantDto()
    //         {
    //             Name = Undertenants.Skip(Undertenants.Count - 1).FirstOrDefault() ?? "",
    //             CreatedOn = DateTime.Now,
    //             IsActive = true,
    //             IsDeleted = true,
    //         };

    //     AdditionalOccupantsList.Add(additional);

    // }

    void OnchangeAdditionalOccupants(int index)
    {
        var name = Tenants[index];

        // If cleared, remove from AdditionalTenantList
        if (string.IsNullOrWhiteSpace(name))
        {
            var existing = AdditionalOccupantsList.ElementAtOrDefault(index);
            if (existing != null)
            {
                AdditionalOccupantsList.RemoveAt(index);
            }
            return;
        }

        // Update or add
        if (index < AdditionalOccupantsList.Count)
        {
            AdditionalOccupantsList[index].Name = name;
        }
        else
        {
            var additional = new AdditionalOccupantDto()
                {
                    Name = name,
                    CreatedOn = DateTime.Now,
                    IsActive = true,
                    IsDeleted = false, // better to keep false
                    IsVisible = true
                };

            AdditionalOccupantsList.Add(additional);
        }


    }

    //void AddUnder() => Undertenants.Add(string.Empty);



    private string Progress => (((int)CurrentStep + 1) * 100.0 / Steps.Count).ToString("0");



    private async Task Next()
    {
        if (!ValidateCurrentStep()) return;
        // var client = ClientList.FirstOrDefault(x => x.Id == legalcaseDto.ClientId);
        // legalcaseDto.ClientName = client != null
        //     ? $"{client.FirstName} {client.LastName}".Trim()
        //     : "-";
        legalcaseDto.CaseTypeName = CaseTypeList.FirstOrDefault(x => x.Id == legalcaseDto.CaseTypeId)?.Name;
        legalcaseDto.LandLordTypeName = LandLordTypeList.FirstOrDefault(x => x.Id == legalcaseDto.LandLordTypeId)?.Name;
        legalcaseDto.RegulationStatusName = RegulationList.FirstOrDefault(x => x.Id == legalcaseDto.RegulationStatusId)?.Name;
        legalcaseDto.IsUnitIllegalName = IsUnitIllegalList.FirstOrDefault(x => x.Id == legalcaseDto.IsUnitIllegalId)?.Name;
        legalcaseDto.TenancyTypeName = TenancyTypeList.FirstOrDefault(x => x.Id == legalcaseDto.TenancyTypeId)?.Name;

        //CalcNoticeLength = CalcNoticeDays(Tenancy, MovedIn);
        var dueDay = ParseDueDay(RentDueDate);


        if (CurrentStep < Step.Notice) CurrentStep++;

        if (CurrentStep == Step.Notice)
        {
            BuildNoticeMerge();
        }
    }
    private void BuildNoticeMerge()
    {
        Guid parsedClientTypeId;
        MergeData = new NoticeMergeModel
            {
                // --- Client ---
                ClientName = legalcaseDto.ClientName ?? "(Unknown Client)",
                ClientType = legalcaseDto.ClientTypeId != null ? ClientTypeList.FirstOrDefault(x => x.Id == legalcaseDto.ClientTypeId)?.Name : " ",
                ClientEmail = legalcaseDto.ClientEmail ?? "",
                ClientPhone = legalcaseDto.ClientPhone ?? "",
                ClientRef = legalcaseDto.Reference ?? "",

                // --- Landlord ---
                LandlordName = legalcaseDto.landlordName ?? "",
                Contact = legalcaseDto.ContactPersonName ?? "",
                LandlordAddress = legalcaseDto.LandlordAddress ?? "",
                LandlordAttorney = legalcaseDto.AttorneyOfRecord ?? "",
                LandlordLawFirm = legalcaseDto.LawFirm ?? "",

                // --- Building ---
                Addr = legalcaseDto.BuildingAddress ?? "",
                Unit = legalcaseDto.UnitOrApartmentNumber ?? "",
                Borough = legalcaseDto.City ?? "",
                MDR = legalcaseDto.Mdr ?? "",
                Regulation = RegulationList.FirstOrDefault(x => x.Id == legalcaseDto.RegulationStatusId)?.Name,

                // --- Tenancy / Terms ---
                Tenancy = legalcaseDto.TenancyTypeName ?? "",
                Written = legalcaseDto.WrittenLease?.ToString(),
                OralAgreement = legalcaseDto.OralAgreeMent?.ToString(),
                CaseProgram = CaseProgramList.FirstOrDefault(x => x.Id == legalcaseDto.CaseProgramId)?.Name,

                GoodCauseApplies = legalcaseDto.GoodCauseApplies?.ToString(),
                MovedIn = legalcaseDto.DateTenantMoved?.ToDateTime(TimeOnly.MinValue),
                LeaseEnd = legalcaseDto.LeaseEnd?.ToDateTime(TimeOnly.MinValue),

                // --- Rent ---
                RentDueDate = DateRentList.FirstOrDefault(x => x.Id == legalcaseDto.RentDueEachMonthOrWeekId)?.Name,
                MonthlyRent = legalcaseDto.MonthlyRent,
                TenantShare = legalcaseDto.TenantShare?.ToString(),
                SocialServices = legalcaseDto.SocialService ?? "",
                LastPaid = legalcaseDto.LastRentPaid ?? "",
                TotalOwed = legalcaseDto.TotalOwed?.ToString(),

                // --- Tenants ---
                Tenants = Tenants.Where(t => !string.IsNullOrWhiteSpace(t)).ToList(),
                Undertenants = Undertenants.Where(u => !string.IsNullOrWhiteSpace(u)).ToList(),

                // --- Case / Notice ---
                Served = ToDateTime(legalcaseDto.DateNoticeServed),
                PredicateNotice = legalcaseDto.PredicateNotice
            };

        // Calculate notice-specific values
        //var days = CalcNoticeDays(MergeData.Tenancy, MergeData.MovedIn);
        MergeData.Days = legalcaseDto.CalculatedNoticeLength;

        //var dueDay = ParseDueDay(MergeData.RentDueDate);
        //MergeData.Expire = CalcExpireAligned(MergeData.Served, days, dueDay);
        MergeData.Expire = legalcaseDto.ExpirationDate;

        //MergeData.Template = PickPredicateNotice(MergeData.Tenancy);

        // Clean up tenant lists
        MergeData.Tenants = MergeData.Tenants.Where(t => !string.IsNullOrWhiteSpace(t)).ToList();
        MergeData.Undertenants = MergeData.Undertenants.Where(u => !string.IsNullOrWhiteSpace(u)).ToList();
    }

    private DateTime? ToDateTime(DateOnly? date)
    {
        return date.HasValue ? date.Value.ToDateTime(TimeOnly.MinValue) : (DateTime?)null;
    }


    private void OnClientChanged()
    {
        var client = ClientList.FirstOrDefault(x => x.Id == legalcaseDto.ClientId);
        if (client != null)
        {
            legalcaseDto.ClientName = $"{client.FirstName} {client.LastName}".Trim();
            legalcaseDto.ClientEmail = client.Email;
            legalcaseDto.ClientPhone = client.Phone;
            legalcaseDto.Address1 = client.Address1;
            legalcaseDto.Address2 = client.Address2;
            legalcaseDto.City = client.City;
            legalcaseDto.StateId = client.StateId;
            legalcaseDto.ZipCode = client.ZipCode;
        }
    }

    private bool ValidateCurrentStep()
    {
        _messages.Clear();

        switch (CurrentStep)
        {
            case Step.CaseAndclient:
                Require(() => legalcaseDto.CaseTypeId, nameof(legalcaseDto.CaseTypeId), "Case type required");
                //Require(() => legalcaseDto.ClientId, nameof(legalcaseDto.ClientId), "Client is required");

                break;
            // case Step.Client:
            //     Require(() => legalcaseDto.ClientName, nameof(legalcaseDto.ClientName), "Client Name is required");
            //     Require(() => legalcaseDto.ClientPhone, nameof(legalcaseDto.ClientPhone), "Phone is required");
            //     Require(() => legalcaseDto.ClientEmail, nameof(legalcaseDto.ClientEmail), "Email is required");


            //     break;
            case Step.Landlord:
                Require(() => legalcaseDto.landlordName, nameof(legalcaseDto.landlordName), "Full name is required");
                Require(() => legalcaseDto.ContactPersonName, nameof(legalcaseDto.ContactPersonName), "Contact Person is required");
                Require(() => legalcaseDto.LandlordAddress, nameof(legalcaseDto.LandlordAddress), "Address is required");
                Require(() => legalcaseDto.AttorneyOfRecord, nameof(legalcaseDto.AttorneyOfRecord), "Attorney is required");
                Require(() => legalcaseDto.LawFirm, nameof(legalcaseDto.LawFirm), "Firm is required");
                break;
            case Step.Building:
                Require(() => legalcaseDto.Mdr, nameof(legalcaseDto.Mdr), "MDR is required");
                // Require(() => legalcaseDto.BuildingId, nameof(legalcaseDto.BuildingId), "Select Building");
                Require(() => legalcaseDto.Units, nameof(legalcaseDto.Units), "Units required");
                Require(() => legalcaseDto.BuildingAddress, nameof(legalcaseDto.BuildingAddress), "Address required");
                Require(() => legalcaseDto.RegulationStatusId, nameof(legalcaseDto.RegulationStatusId), "Select regulation");
                break;
            case Step.Tenant:
                Require(() => legalcaseDto.TenantName, nameof(legalcaseDto.TenantName), "Tenant name required");
                // Require(() => legalcaseDto.UnitNumber, nameof(legalcaseDto.UnitNumber), "Unit required");
                // Require(() => legalcaseDto.IsUnitIllegalId, nameof(legalcaseDto.IsUnitIllegalId), "Select at least on option");
                break;
            case Step.Rent:
                Require(() => legalcaseDto.MonthlyRent, nameof(legalcaseDto.MonthlyRent), "Monthly rent required");
                Require(() => legalcaseDto.RentDueEachMonthOrWeekId, nameof(legalcaseDto.RentDueEachMonthOrWeekId), "rent due  required");
                Require(() => legalcaseDto.TenancyTypeId, nameof(legalcaseDto.TenancyTypeId), "Tenancy type  required");
                break;

                // case Step.Case:
                //     Require(() => legalcaseDto.CaseTypeId, nameof(legalcaseDto.CaseTypeId), "Case type required");
                //     break;
        }

        _editContext.NotifyValidationStateChanged();

        var errors = _editContext.GetValidationMessages().ToList();
        Console.WriteLine($"Validation errors at {CurrentStep}: {string.Join(", ", errors)}");

        var value = !_editContext.GetValidationMessages().Any();

        return value;
    }

    private bool ValidateAll()
    {
        var previous = CurrentStep;
        var ok = true;
        foreach (Step s in Enum.GetValues(typeof(Step)))
        {
            CurrentStep = s;
            ok &= ValidateCurrentStep();
        }
        CurrentStep = previous;
        return ok;
    }

    private void Require<T>(Expression<Func<T>> accessor, string fieldName, string message)
    {
        var value = accessor.Compile().Invoke();
        var isEmpty = value == null || (value is string str && string.IsNullOrWhiteSpace(str));
        if (isEmpty)
        {
            _messages.Add(new FieldIdentifier(legalcaseDto, fieldName), message);
        }
    }

    private void Prev()
    {
        if (CurrentStep > Step.CaseAndclient) CurrentStep--;
    }

    private async Task SubmitAsync()
    {
        spinnerservice.Show();
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userIdClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userIdClaim) && Guid.TryParse(userIdClaim, out Guid userGuid))
        {
            legalcaseDto.CreatedBy = userGuid;
        }
        else
        {
            // unauthenticated user
            legalcaseDto.CreatedBy = Guid.Empty;
        }
        // 1. Handle Client
        if (selectedClient == null)
        {
            // create new client
            var nameparts = legalcaseDto.ClientName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            newClient = new CreateToClientDto()
                {
                    FirstName = nameparts[0],
                    LastName = nameparts[1],
                    Email = legalcaseDto.ClientEmail,
                    Phone = legalcaseDto.ClientPhone,
                    ClientTypeId = legalcaseDto.ClientTypeId,
                    CreatedBy = legalcaseDto.CreatedBy

                };


            var clientId = await _clientService.CreateOnlyClient(newClient);
            legalcaseDto.ClientId = clientId;
        }
        else
        {
            // check if changed -> update
            if (selectedClient != null && HasClientChanged(selectedClient, legalcaseDto))
            {
                var nameparts = legalcaseDto.ClientName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                var updateclient = new EditToClientDto
                    {
                        Id = legalcaseDto.ClientId ?? Guid.Empty,
                        FirstName = nameparts[0],
                        LastName = nameparts[1],
                        Email = legalcaseDto.ClientEmail,
                        Phone = legalcaseDto.ClientPhone,
                        ClientTypeId = legalcaseDto.ClientTypeId,
                        Reference = legalcaseDto.Reference

                    };
                await _clientService.UpdateClientformCase(updateclient);
            }
        }

        // 2. Handle Landlord
        if (selectedlandlord == null)
        {
            var nameparts = searchlandlordText.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            newLandlord = new CreateToLandLordDto()
                {

                    FirstName = nameparts[0],
                    LastName = nameparts[1],
                    Address1 = legalcaseDto.LandlordAddress,
                    LawFirm = legalcaseDto.LawFirm,
                    ContactPersonName = legalcaseDto.ContactPersonName,
                    AttorneyOfRecord = legalcaseDto.AttorneyOfRecord,
                    ClientId = legalcaseDto.ClientId
                };
            var landlordId = await _landlordService.AddOnlyLandLordfromCase(newLandlord);
            legalcaseDto.LandlordId = landlordId;
        }
        else
        {
            if (selectedlandlord != null && HasLandlordChanged(selectedlandlord, legalcaseDto))
            {
                var updateLandLord = new EditToLandlordDto()
                    {
                        Id = legalcaseDto.LandlordId.Value,
                        Address1 = legalcaseDto.LandlordAddress,
                        AttorneyOfRecord = legalcaseDto.AttorneyOfRecord,
                        LawFirm = legalcaseDto.LawFirm,
                        ContactPersonName = legalcaseDto.ContactPersonName
                    };
                await _landlordService.UpdateLandLordsfromCase(updateLandLord);
            }
        }

        // 2. Handle Building
        if (selectedbuilding == null)
        {
            newBuilding = new CreateToBuildingDto()
                {

                    Address1 = legalcaseDto.BuildingAddress,
                    City = legalcaseDto.City,
                    BuildingUnits = legalcaseDto.Units,
                    ApartmentCode = legalcaseDto.UnitOrApartmentNumber,
                    MDRNumber = legalcaseDto.Mdr,
                    RegulationStatusId = legalcaseDto.RegulationStatusId,
                    LandlordId = legalcaseDto.LandlordId
                };
            var buildingId = await _buildingService.AddOnlyApartmentfromCase(newBuilding);
            legalcaseDto.BuildingId = buildingId;
        }
        else
        {
            if (selectedbuilding != null && HasBuildingChanged(selectedbuilding, legalcaseDto))
            {
                var completeAddress = legalcaseDto.BuildingAddress.Split(',');
                var updateBuilding = new EditToBuildingDto()
                    {
                        Id = legalcaseDto.BuildingId.Value,
                        Address1 = completeAddress[0],
                        Address2 = completeAddress[1],
                        City = legalcaseDto.Borough,
                        StateId = StateList.Where(e => e.Name.Contains(completeAddress[3])).Select(a => a.Id).FirstOrDefault(),
                        Zipcode = completeAddress[4],
                        BuildingUnits = legalcaseDto.Units,
                        ApartmentCode = legalcaseDto.UnitOrApartmentNumber,
                        MDRNumber = legalcaseDto.Mdr,
                        RegulationStatusId = legalcaseDto.RegulationStatusId,
                    };
                await _buildingService.UpdateonlyBuildingfromCase(updateBuilding);
            }
        }

        if (TenantList.Count > 0)
        {
            legalcaseDto.TenantId = TenantList.Select(e => e.Id).FirstOrDefault();
        }

        if (AdditionalTenantList.Count > 0)
        {
            await _additionalTenant.AddAdditionalTenantAsync(AdditionalTenantList);
        }

        if (legalcaseDto != null || legalcaseDto.Id == Guid.Empty)
        {


            var result = await _legalCaseService.CreateCasesAsync(legalcaseDto);

            if(!result.HasValue)
            {
                return;
            }

            if (AdditionalOccupantsList.Count > 0)
            {
                foreach(var occupant in AdditionalOccupantsList)
                {
                    occupant.LegalCaseId = result;
                }
                await _additionalOccupant.AddAdditionalOccupantsAsync(AdditionalOccupantsList);
            }

            nav.NavigateTo("/ManageCases/Manage-Cases?success=true");

        }


    }
    private bool HasClientChanged(EditToClientDto existing, IntakeModel dto)
    {
        return !dto.ClientName.Contains(existing.FirstName)
            || !dto.ClientName.Contains(existing.LastName!)
            || existing.Email != dto.ClientEmail
            || existing.Phone != dto.ClientPhone
            || existing.ClientTypeId != dto.ClientTypeId;
    }

    private bool HasLandlordChanged(EditToLandlordDto existing, IntakeModel dto)
    {
        return !dto.landlordName.Contains(existing.FirstName)
            || !dto.landlordName.Contains(existing.LastName!)
            || existing.Address1 != dto.LandlordAddress
            || existing.AttorneyOfRecord != dto.AttorneyOfRecord
            || existing.LawFirm != dto.LawFirm;
    }

    private bool HasBuildingChanged(EditToBuildingDto existing, IntakeModel dto)
    {
        return existing.City != dto.City
            || !dto.BuildingAddress.Contains(existing.CompletedAddress)
            || existing.ApartmentCode != dto.UnitOrApartmentNumber
            || existing.MDRNumber != dto.Mdr
            || existing.RegulationStatusId != dto.RegulationStatusId
            || existing.BuildingUnits != dto.Units;
    }

    // Helper functions
    private int DiffYears(DateTime? from, DateTime? to)
    {
        if (!from.HasValue || !to.HasValue) return 0;
        return (int)((to.Value - from.Value).TotalDays / 365);
    }

    private void CalcNoticeDays()
    {
        if (legalcaseDto.DateTenantMoved != null && legalcaseDto.TenancyTypeId != null)
        {
            int length = 0;
            var type = TenancyTypeList.Where(a => a.Id == legalcaseDto.TenancyTypeId).Select(e => e.Name).FirstOrDefault();
            if (new[] { "squatter", "licensee", "referee" }.Contains(type))
            {
                length = 10;
            }
            var yrs = DiffYears(legalcaseDto.DateTenantMoved?.ToDateTime(TimeOnly.MinValue), DateTime.Today);
            if (yrs < 1)
            {
                length = 30;

            }
            else if (yrs < 2)
            {
                length = 60;

            }
            else
            {
                length = 90;


            }
            legalcaseDto.CalculatedNoticeLength = length;

            legalcaseDto.PredicateNotice = (type ?? "").ToLower() switch
            {
                "licensee" => "10 Days Notice - Tenant Of Record Vacated (Licensee)",
                "referee" => "10 Days Notice - Referee Deed / Prior Owner",
                "squatter" => "10 Days Notice - Squatter / Intruder",
                "month-to-month" => $"{legalcaseDto.CalculatedNoticeLength} Days Notice - Month to Month",
                _ => ""
            };

            return;

        }

    }

    private int ParseDueDay(string str)
    {
        if (string.IsNullOrWhiteSpace(str)) return 1;
        if (int.TryParse(str, out var d)) return Math.Clamp(d, 1, 31);
        return 1;
    }

    private void CalcExpireAligned()
    {
        int dueDay = ParseDueDay(DateRentList.FirstOrDefault(x => x.Id == legalcaseDto.RentDueEachMonthOrWeekId)?.Name);
        int? days = legalcaseDto.CalculatedNoticeLength;
        var servedISO = ToDateTime(legalcaseDto.DateNoticeServed);

        if (!servedISO.HasValue || days == 0 )
        {
            legalcaseDto.ExpirationDate = null; // use null for DateOnly?
            return;
        }

        var target = servedISO.Value.AddDays((double)days);
        DateOnly expiration;

        if (dueDay == 1)
        {
            // last day of month
            expiration = new DateOnly(target.Year, target.Month, DateTime.DaysInMonth(target.Year, target.Month));
        }
        else
        {
            expiration = new DateOnly(target.Year, target.Month, dueDay - 1);
        }

        legalcaseDto.ExpirationDate = expiration;
    }


    private string PickPredicateNotice(string tenancy)
    {
        return tenancy switch
        {
            "licensee" => "10 Days Notice - Tenant Of Record Vacated (Licensee)",
            "referee" => "10 Days Notice - Referee Deed / Prior Owner",
            "squatter" => "10 Days Notice - Squatter / Intruder",
            "month" => $"{legalcaseDto.CalculatedNoticeLength} Days Notice - Month to Month",
            _ => ""
        };
    }

    public class NoticeMergeModel
    {
        // --- Client ---
        public string ClientName { get; set; }
        public string ClientType { get; set; }
        public string ClientEmail { get; set; }
        public string ClientPhone { get; set; }
        public string ClientRef { get; set; }

        // --- Landlord ---
        public string LandlordName { get; set; }
        public string Contact { get; set; }
        public string LandlordAddress { get; set; }
        public string LandlordAttorney { get; set; }
        public string LandlordLawFirm { get; set; }

        // --- Building ---
        public string Addr { get; set; }
        public string Unit { get; set; }
        public string Borough { get; set; }
        public string MDR { get; set; }
        public string Regulation { get; set; }

        // --- Tenancy / Terms ---
        public string Tenancy { get; set; }
        public string Written { get; set; }
        public string OralAgreement { get; set; }
        public string CaseProgram { get; set; }
        public string GoodCauseApplies { get; set; }
        public DateTime? MovedIn { get; set; }
        public DateTime? LeaseEnd { get; set; }

        // --- Rent ---
        public string RentDueDate { get; set; }
        public double? MonthlyRent { get; set; }
        public string TenantShare { get; set; }
        public string SocialServices { get; set; }
        public string LastPaid { get; set; }
        public string TotalOwed { get; set; }

        // --- Tenants ---
        public List<string> Tenants { get; set; } = new();
        public List<string> Undertenants { get; set; } = new();

        // --- Case / Notice ---
        public DateTime? Served { get; set; }
        public int? Days { get; set; }
        public DateOnly? Expire { get; set; }
        public string Template { get; set; }
        public string PredicateNotice { get; set; }
    }

    // public NoticeMergeModel BuildMerge(NoticeMergeModel model)
    // {
    //     var noticeServed = string.IsNullOrEmpty(model.Served) ? (DateTime?)null : DateTime.Parse(model.Served);
    //     var days = CalcNoticeDays(model.Tenancy, model.MovedIn);

    //     var dueDay = ParseDueDay(model.RentDueDate);
    //     model.Days = days;
    //     model.Expire = CalcExpireAligned(string.IsNullOrEmpty(model.Served) ? null : DateTime.Parse(model.Served), days, dueDay);
    //     model.Template = PickPredicateNotice(model.Tenancy);

    //     model.Tenants = model.Tenants.Where(t => !string.IsNullOrWhiteSpace(t)).ToList();
    //     model.Undertenants = model.Undertenants.Where(t => !string.IsNullOrWhiteSpace(t)).ToList();

    //     return model;
    // }

    private bool showClientTextbox = false;
    private EditToClientDto selectedClient;
    private string searchText;
    private CreateToClientDto newClient = new();
    private List<EditToClientDto> filteredClients = new();

    private bool IsNewLandlord = false;
    private EditToLandlordDto selectedlandlord;
    private string searchlandlordText;
    private CreateToLandLordDto newLandlord = new();
    private List<EditToLandlordDto> filteredLandlords = new();

    private bool IsNewBuilding = false;
    private EditToBuildingDto selectedbuilding;
    private CreateToBuildingDto newBuilding = new();
    private List<EditToBuildingDto> filteredBuildings = new();
    private string searchBuildingText;

    private EditToTenantDto selectedtenant;
    private List<EditToTenantDto> filteredTenant = new();
    private string searchTenantText;


    private void OnSearchLandlordInput(ChangeEventArgs e)
    {
        searchlandlordText = e.Value.ToString();
        filteredLandlords = LandlordList
            .Where(c => c.FirstName.Contains(searchlandlordText, StringComparison.OrdinalIgnoreCase)
                        || c.LastName.Contains(searchlandlordText, StringComparison.OrdinalIgnoreCase)
                        || c.LandLordCode.Contains(searchlandlordText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async void SelectLandlord(EditToLandlordDto landlord)
    {
        selectedlandlord = landlord;
        searchlandlordText = $"{landlord.FirstName} {landlord.LastName}";
        filteredLandlords.Clear();

        // Fill card
        legalcaseDto.LandlordId = landlord.Id;
        legalcaseDto.landlordName = $"{landlord.FirstName} {landlord.LastName}";
        legalcaseDto.ContactPersonName = landlord.ContactPersonName;
        legalcaseDto.LandlordAddress = landlord.Address1;
        legalcaseDto.AttorneyOfRecord = landlord.AttorneyOfRecord;
        legalcaseDto.LawFirm = landlord.LawFirm;

        BuildingList = await _buildingService.GetBuildingsByLandlordIdAsync(landlord.Id);


    }

    private async void SelectLandlords()
    {
        if (filteredLandlords.Count <= 0)
        {
            selectedlandlord = null;
            legalcaseDto.LandlordId = null;
            legalcaseDto.landlordName = searchlandlordText;
            legalcaseDto.ContactPersonName = null;
            legalcaseDto.LandlordAddress = null;
            legalcaseDto.AttorneyOfRecord = null;
            legalcaseDto.LawFirm = null;
        }

    }

    private void ClearSelectedLandlord()
    {
        selectedlandlord = null;
        searchlandlordText = string.Empty;
    }
    private void OnSearchBuildingInput(ChangeEventArgs e)
    {
        searchBuildingText = e.Value.ToString();
        filteredBuildings = BuildingList
            .Where(c => c.BuildingCode.Contains(searchBuildingText, StringComparison.OrdinalIgnoreCase)
                        || c.City.Contains(searchBuildingText, StringComparison.OrdinalIgnoreCase)
                        || c.Zipcode.Contains(searchBuildingText, StringComparison.OrdinalIgnoreCase)
                        || c.CompletedAddress.Contains(searchBuildingText, StringComparison.OrdinalIgnoreCase)
                        || c.StateName.Contains(searchBuildingText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
    private async void SelectBuilding(EditToBuildingDto building)
    {
        selectedbuilding = building;
        searchBuildingText = building.BuildingCode;
        filteredBuildings.Clear();

        // Fill card
        legalcaseDto.BuildingId = building.Id;
        legalcaseDto.BuildingAddress = building.CompletedAddress;
        legalcaseDto.Units = building.BuildingUnits;
        legalcaseDto.UnitOrApartmentNumber = building.ApartmentCode;
        legalcaseDto.Borough = building.City;
        legalcaseDto.Mdr = building.MDRNumber;
        legalcaseDto.RegulationStatusId = building.RegulationStatusId;

        TenantList = await _tenantService.GetTenantsByClientIdAsync(building.Id);
        filteredTenantList = TenantList;


        Tenants = filteredTenantList.Select(e => $"{e.FirstName} {e.LastName }").ToList();


        legalcaseDto.TenantName = Tenants.FirstOrDefault() ?? "";
        legalcaseDto.TenantId = filteredTenantList.Select(e => e.Id).FirstOrDefault();
        legalcaseDto.TenantRecord = filteredTenantList.Select(e => e.TenantRecord).FirstOrDefault();
        legalcaseDto.HasPossession = filteredTenantList.Select(e => e.HasPossession).FirstOrDefault();
        legalcaseDto.UnitNumber = filteredTenantList.Select(e => e.UnitOrApartmentNumber).FirstOrDefault() ?? "abc";
        legalcaseDto.IsUnitIllegalId = TenantList.Select(e => e.IsUnitIllegalId).FirstOrDefault();

        AdditionalTenantfromDbList = await _additionalTenant.GetAllAdditionalTenantsAsync(legalcaseDto.TenantId);

        Tenants.AddRange(AdditionalTenantfromDbList.Select(e => $"{e.FirstName} {e.LastName}").ToList());

    }

    private void OnBindBuldingAfter()
    {
        if (filteredBuildings.Count <= 0)
        {
            selectedbuilding = null;
            IsNewBuilding = true;
            // Fill card
            legalcaseDto.BuildingId = null;
            legalcaseDto.BuildingAddress = null;
            legalcaseDto.Units = null;
            legalcaseDto.UnitOrApartmentNumber = null;
            legalcaseDto.City = null;
            legalcaseDto.Mdr = null;
            legalcaseDto.RegulationStatusId = null;

            TenantList = new();
            Tenants = new();


            legalcaseDto.TenantName = null;
            legalcaseDto.UnitNumber = null;
            legalcaseDto.IsUnitIllegalId = null;
        }

    }


    private void OnSearchTenantInput(ChangeEventArgs e)
    {
        searchlandlordText = e.Value.ToString();
        Tenants = TenantList
            .Where(c => c.UnitOrApartmentNumber.Contains(legalcaseDto.UnitOrApartmentNumber, StringComparison.OrdinalIgnoreCase)
                        // || c.LastName.Contains(searchlandlordText, StringComparison.OrdinalIgnoreCase)
                        // || c.LandLordCode.Contains(searchlandlordText, StringComparison.OrdinalIgnoreCase)
                        )
            .Select(e => e.FirstName).ToList();
    }

    // private async void SelectTenant(EditToTenantDto Tenant)
    // {
    // 	selectedTenant = landlord;
    // 	searchlandlordText = $"{landlord.FirstName} {landlord.LastName}";
    // 	filteredLandlords.Clear();

    // 	// Fill card
    // 	legalcaseDto.LandlordId = landlord.Id;
    // 	legalcaseDto.landlordName = $"{landlord.FirstName} {landlord.LastName}";
    // 	legalcaseDto.ContactPersonName = landlord.ContactPersonName;
    // 	legalcaseDto.LandlordAddress = landlord.Address1;
    // 	legalcaseDto.AttorneyOfRecord = landlord.AttorneyOfRecord;
    // 	legalcaseDto.LawFirm = landlord.LawFirm;

    // 	BuildingList = await _buildingService.GetBuildingsByLandlordIdAsync(landlord.Id);


    // }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
        filteredClients = ClientList
            .Where(c => c.FirstName.Contains(searchText, StringComparison.OrdinalIgnoreCase)
                        || c.LastName.Contains(searchText, StringComparison.OrdinalIgnoreCase)
                        || c.ClientCode.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void OnBindClientAfter()
    {
        if (filteredClients.Count <= 0)
        {
            selectedClient = null;
            showClientTextbox = true;

            legalcaseDto.ClientId = null;
            legalcaseDto.ClientName = null;
            legalcaseDto.ClientEmail = null;
            legalcaseDto.ClientPhone = null;
            legalcaseDto.Address1 = null;
            legalcaseDto.Address2 = null;
            legalcaseDto.City = null;
            legalcaseDto.StateId = null;
            legalcaseDto.ZipCode = null;
        }

    }



    private void SelectClient(EditToClientDto client)
    {
        showClientTextbox = true;
        selectedClient = client;
        searchText = $"{client.FirstName} {client.LastName}";
        filteredClients.Clear();

        // Fill card
        legalcaseDto.ClientId = client.Id;
        legalcaseDto.ClientName = $"{client.FirstName} {client.LastName}";
        legalcaseDto.ClientEmail = client.Email;
        legalcaseDto.ClientPhone = client.Phone;
        legalcaseDto.Address1 = client.Address1;
        legalcaseDto.Address2 = client.Address2;
        legalcaseDto.City = client.City;
        legalcaseDto.StateId = client.StateId;
        legalcaseDto.ZipCode = client.ZipCode;
        legalcaseDto.ClientTypeId = client.ClientTypeId;
        legalcaseDto.Reference = client.Reference;
    }




    private void ClearSelectedClient()
    {
        selectedClient = null;
        searchText = string.Empty;
    }





    public class InputSelectNullableBool : InputSelect<bool?>
    {
        protected override bool TryParseValueFromString(string value, out bool? result, out string validationErrorMessage)
        {
            if (string.IsNullOrEmpty(value))
            {
                result = null;
                validationErrorMessage = null;
                return true;
            }

            if (bool.TryParse(value, out var parsed))
            {
                result = parsed;
                validationErrorMessage = null;
                return true;
            }

            result = null;
            validationErrorMessage = "Invalid selection.";
            return false;
        }
    }




    // private enum Step { Landlord = 0, Building = 1, Tenant = 2, Rent = 3, Case = 4, Review = 5 }
}

