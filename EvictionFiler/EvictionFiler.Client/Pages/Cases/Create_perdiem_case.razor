
  <style>
    /* ====== Design tokens ====== */
    :root {
      --bg: #f6f7fb;
      --card: #ffffff;
      --ink: #0f172a;
      --muted: #64748b;
      --primary: #1d4ed8;
      --primary-600: #1e40af;
      --success: #22c55e;
      --error: #dc2626;
      --border: #e2e8f0;
      --radius: 14px;
    }

    * {
      box-sizing: border-box;
    }

    html,
    body {
      height: 100%;
    }

    body {
      margin: 0;
      font: 14px/1.5 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
      color: var(--ink);
      background: radial-gradient(60% 100% at 50% 0%, #eef2ff 0%, var(--bg) 60%);
    }

    .container {
      max-width: 1120px;
      margin: 0 auto;
      padding: 24px 16px;
    }

    /* Header */
    .header {
      position: sticky;
      top: 0;
      z-index: 20;
      backdrop-filter: blur(8px);
      background: rgba(255, 255, 255, .9);
      border-bottom: 1px solid var(--border);
    }

    .header-inner {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 16px;
      padding: 12px 16px;
      max-width: 1120px;
      margin: 0 auto;
    }

    .brand {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .logo {
      width: 38px;
      height: 38px;
      border-radius: 12px;
      background: #0f172a;
      color: #fff;
      display: grid;
      place-items: center;
      font-weight: 800;
      letter-spacing: .5px;
    }

    .brand h1 {
      margin: 0;
      font-size: 16px;
    }

    .brand small {
      color: var(--muted);
    }

    .actions {
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
    }

    .btn {
      appearance: none;
      border: 1px solid var(--border);
      background: #fff;
      color: var(--ink);
      border-radius: 10px;
      padding: 10px 12px;
      font-weight: 600;
      cursor: pointer;
    }

    .btn.primary {
      background: var(--primary);
      color: #fff;
      border-color: transparent;
    }

    .btn.primary:hover {
      background: var(--primary-600);
    }

    .btn.ghost {
      background: transparent;
    }

    .btn[disabled] {
      opacity: .6;
      cursor: not-allowed;
    }

    /* Card & Grid */
    .card {
      background: var(--card);
      border: 1px solid var(--border);
      border-radius: var(--radius);
      box-shadow: 0 1px 0 rgba(2, 6, 23, .04);
      margin-bottom: 20px;
    }

    .card .head {
      padding: 14px 16px;
      border-bottom: 1px solid var(--border);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .card .head h2 {
      margin: 0;
      font-size: 16px;
    }

    .card .body {
      padding: 16px;
    }

    .row {
      display: grid;
      gap: 12px;
    }

    @@media (min-width: 700px) {
      .row.two {
        grid-template-columns: 1fr 1fr;
      }

      .row.three {
        grid-template-columns: repeat(3, 1fr);
      }

      .row.four {
        grid-template-columns: repeat(4, 1fr);
      }
    }

    /* Form */
    label {
      display: block;
      font-size: 12px;
      font-weight: 700;
      letter-spacing: .02em;
      text-transform: uppercase;
      color: #334155;
      margin: 2px 0 6px;
    }

    .req::after {
      content: " *";
      color: var(--error);
    }

    input[type="text"],
    input[type="email"],
    input[type="date"],
    input[type="time"],
    input[type="number"],
    select,
    textarea {
      width: 100%;
      border: 1px solid var(--border);
      border-radius: 10px;
      padding: 10px 12px;
      font: inherit;
      color: var(--ink);
      background: #fff;
    }

    textarea {
      min-height: 96px;
      resize: vertical;
    }

    .inline {
      display: flex;
      align-items: center;
      gap: 8px;
      flex-wrap: wrap;
    }

    .check {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .check input {
      width: 16px;
      height: 16px;
    }

    .radio {
      display: flex;
      align-items: center;
      gap: 10px;
      flex-wrap: wrap;
    }

    .radio label {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      text-transform: none;
      font-weight: 600;
      color: var(--ink);
    }

    /* Validation states */
    .field {
      position: relative;
    }

    .error-msg {
      color: var(--error);
      font-size: 12px;
      margin-top: 6px;
      display: none;
    }

    .invalid input,
    .invalid select,
    .invalid textarea {
      border-color: var(--error);
      outline: 2px solid rgba(220, 38, 38, .12);
    }

    .invalid .error-msg {
      display: block;
    }

    /* Footer actions */
    .footer {
      position: sticky;
      bottom: 0;
      z-index: 15;
      background: rgba(255, 255, 255, .92);
      backdrop-filter: blur(8px);
      border-top: 1px solid var(--border);
    }

    .footer-inner {
      max-width: 1120px;
      margin: 0 auto;
      padding: 12px 16px;
      display: flex;
      gap: 12px;
      justify-content: space-between;
    }

    .stack {
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
    }

    .stack .btn {
      min-width: 120px;
    }

    /* Toast */
    .toast {
      position: fixed;
      right: 16px;
      bottom: 16px;
      z-index: 50;
      padding: 12px 14px;
      border-radius: 10px;
      color: #fff;
      box-shadow: 0 10px 18px rgba(2, 6, 23, .15);
      display: none;
    }

    .toast.show {
      display: block;
    }

    .toast.ok {
      background: var(--success);
    }

    .toast.err {
      background: var(--error);
    }

    /* Print */
    @@page {
      size: Letter;
      margin: 16mm;
    }

    @@media print {

      .header,
      .footer,
      .d-print-none,
      .toast {
        display: none !important;
      }

      body {
        background: #fff;
      }

      .card {
        page-break-inside: avoid;
        box-shadow: none;
      }
    }
  </style>


<body>
  <!-- Header -->
  <div class="header d-print-none">
    <div class="header-inner">
      <div class="brand">
        <div class="logo">EF</div>
        <div>
          <h1>Per Diem Court Appearance Intake</h1>
          <small class="muted">Clean • Fast • Professional</small>
        </div>
      </div>
      <div class="actions">
        <button class="btn" onclick="window.print()">🖨️ Print PDF</button>
        <button class="btn primary" id="saveBtn">Save</button>
      </div>
    </div>
  </div>

  <div class="container">
    <form id="perdiem-form" novalidate>
      <!-- Attorney Assigning Case -->
      <section class="card">
        <div class="head">
          <h2>Attorney Assigning Case</h2>
        </div>
        <div class="body">
          <div class="row two">
            <div class="field">
              <label class="req">Hiring Attorney/Firm</label>
              <input type="text" name="hiringFirm" required />
              <div class="error-msg">Please enter the hiring attorney or firm.</div>
            </div>
            <div class="field">
              <label>Contact Person</label>
              <input type="text" name="contactPerson" />
            </div>
            <div class="field">
              <label>Phone / Email</label>
              <input type="text" name="contactPhoneEmail" placeholder="(555) 555-5555 / name@example.com" />
            </div>
          </div>
        </div>
      </section>

      <!-- Case Information -->
      <section class="card">
        <div class="head">
          <h2>Case Information</h2>
        </div>
        <div class="body">
          <div class="row">
            <label class="req">Case Type</label>
            <div class="radio" data-required-group="caseType">
              <label><input type="checkbox" name="caseType" value="Residential Holdover"> Residential Holdover</label>
              <label><input type="checkbox" name="caseType" value="Residential Nonpayment"> Residential
                Nonpayment</label>
              <label><input type="checkbox" name="caseType" value="HPD/Code Enforcement"> HPD/Code Enforcement</label>
              <label><input type="checkbox" name="caseType" value="Commercial Case"> Commercial Case</label>
              <label><input type="checkbox" name="caseType" value="Illegal Lockout"> Illegal Lockout</label>
              <label><input type="checkbox" name="caseType" value="Post-Eviction / Restoration"> Post‑Eviction /
                Restoration</label>
              <label class="inline"><input type="checkbox" id="caseTypeOtherCb"> Other</label>
              <input type="text" id="caseTypeOther" placeholder="Specify other" style="display:none;" />
            </div>
            <div class="error-msg" data-error-for="caseType">Select at least one case type.</div>
          </div>
          <div class="row two">
            <div class="field">
              <label class="req">Court Location</label>
              <input type="text" name="courtLocation" required />
              <div class="error-msg">Enter court location.</div>
            </div>
            <div class="field">
              <label>Part / Room #</label>
              <input type="text" name="partRoom" />
            </div>
            <div class="field">
              <label>Index / LT Docket #</label>
              <input type="text" name="docket" />
            </div>
            <div class="field">
              <label class="req">County / Borough</label>
              <input type="text" name="county" required />
              <div class="error-msg">Enter county/borough.</div>
            </div>
          </div>
        </div>
      </section>

      <!-- Party Representation -->
      <section class="card">
        <div class="head">
          <h2>Party Representation</h2>
        </div>
        <div class="body">
          <div class="row">
            <label class="req">Representing</label>
            <div class="radio" data-required-group="representing">
              <label><input type="radio" name="representing" value="Petitioner" /> Petitioner (Landlord/Owner/Managing
                Agent)</label>
              <label><input type="radio" name="representing" value="Respondent" /> Respondent (Tenant/Occupant)</label>
            </div>
            <div class="error-msg" data-error-for="representing">Choose who you represent.</div>
          </div>
          <div class="row two">
            <div class="field">
              <label class="req">Party Name(s)</label>
              <input type="text" name="partyNames" required />
              <div class="error-msg">Enter party name(s).</div>
            </div>
            <div class="field">
              <label>Opposing Counsel (if any)</label>
              <input type="text" name="opposingCounsel" />
            </div>
          </div>
        </div>
      </section>

      <!-- Appearance Details -->
      <section class="card">
        <div class="head">
          <h2>Appearance Details</h2>
        </div>
        <div class="body">
          <div class="row three">
            <div class="field">
              <label class="req">Date of Appearance</label>
              <input type="date" name="appearanceDate" required />
              <div class="error-msg">Select a date.</div>
            </div>
            <div class="field">
              <label class="req">Time of Appearance</label>
              <input type="time" name="appearanceTime" required />
              <div class="error-msg">Select a time.</div>
            </div>
            <div class="field">
              <label>&nbsp;</label>
              <div class="muted">(local court time)</div>
            </div>
          </div>
          <div class="row">
            <label class="req">Type of Appearance</label>
            <div class="radio" data-required-group="appearanceType">
              <label><input type="checkbox" name="appearanceType" value="First Appearance / Return Date"> First
                Appearance / Return Date</label>
              <label><input type="checkbox" name="appearanceType" value="Motion / OSC Hearing"> Motion / OSC
                Hearing</label>
              <label><input type="checkbox" name="appearanceType" value="Trial / Evidentiary Hearing"> Trial /
                Evidentiary Hearing</label>
              <label><input type="checkbox" name="appearanceType" value="Adjournment / Stipulation"> Adjournment /
                Stipulation</label>
              <label><input type="checkbox" name="appearanceType"
                  value="Post-Eviction Motion (Restoration, ERAP, etc.)"> Post‑Eviction Motion (Restoration, ERAP,
                etc.)</label>
              <label><input type="checkbox" name="appearanceType" value="HPD Compliance / Inspection Hearing"> HPD
                Compliance / Inspection Hearing</label>
              <label class="inline"><input type="checkbox" id="apptOtherCb"> Other</label>
              <input type="text" id="apptOther" placeholder="Specify other" style="display:none;" />
            </div>
            <div class="error-msg" data-error-for="appearanceType">Select at least one appearance type.</div>
          </div>
          <div class="row">
            <div class="field">
              <label>Relief / Action Requested Today</label>
              <textarea name="relief"></textarea>
            </div>
          </div>
        </div>
      </section>

      <!-- Case Background -->
      <section class="card">
        <div class="head">
          <h2>Case Background (Brief)</h2>
        </div>
        <div class="body">
          <div class="row">
            <div class="field">
              <label class="req">Key Facts to Know (bullet points)</label>
              <textarea name="keyFacts" placeholder="• Fact 1
• Fact 2
• Fact 3" required></textarea>
              <div class="error-msg">Provide at least a brief background.</div>
            </div>
          </div>
        </div>
      </section>

      <!-- Documents Provided & Special Instructions -->
      <section class="card">
        <div class="head">
          <h2>Documents & Instructions</h2>
        </div>
        <div class="body">
          <div class="row four" data-required-group="docs">
            <label class="check"><input type="checkbox" name="docs" value="Petition/Answer" /> Petition/Answer</label>
            <label class="check"><input type="checkbox" name="docs" value="Lease / Rent Ledger" /> Lease / Rent
              Ledger</label>
            <label class="check"><input type="checkbox" name="docs" value="Prior Orders" /> Prior Orders</label>
            <label class="check"><input type="checkbox" name="docs" value="Inspection Reports" /> Inspection
              Reports</label>
            <label class="check"><input type="checkbox" name="docs" value="Stipulations" /> Stipulations</label>
            <label class="check inline"><input type="checkbox" id="docsOtherCb" /> Other</label>
            <input type="text" id="docsOther" placeholder="Specify other" style="display:none;" />
          </div>
          <div class="error-msg" data-error-for="docs">Check at least one document or "Other".</div>
          <div class="row">
            <div class="field">
              <label>Special Instructions from Hiring Attorney</label>
              <textarea name="instructions"></textarea>
            </div>
          </div>
        </div>
      </section>

      <!-- Reporting Requirements -->
      <section class="card">
        <div class="head">
          <h2>Reporting Requirements</h2>
        </div>
        <div class="body">
          <div class="row three">
            <label class="check"><input type="checkbox" name="reporting" value="Written Court Report" /> Written Court
              Report (Outcome, Next Date, Judge’s Notes)</label>
            <label class="check"><input type="checkbox" name="reporting" value="Copy of Stipulation/Order" /> Copy of
              Any Stipulation/Order Signed</label>
            <label class="check"><input type="checkbox" name="reporting" value="Update Status in Platform" /> Updated
              Case Status in Platform</label>
          </div>
        </div>
      </section>

      <!-- Billing -->
      <section class="card">
        <div class="head">
          <h2>Billing</h2>
        </div>
        <div class="body">
          <div class="row">
            <label class="req">Rate / Compensation</label>
            <div class="radio" id="billingRadio">
              <label><input type="radio" name="billingMode" value="flat" checked> Flat</label>
              <input type="number" id="flatAmount" name="flatAmount" placeholder="$" min="0" step="0.01"
                style="width:160px;" />
              <label><input type="radio" name="billingMode" value="hourly"> Hourly</label>
              <input type="number" id="hourlyRate" name="hourlyRate" placeholder="$ / hr" min="0" step="0.01"
                style="width:160px; display:none;" />
              <input type="number" id="hourlyEstimate" name="hourlyEstimate" placeholder="est. hrs" min="0" step="0.25"
                style="width:120px; display:none;" />
            </div>
            <div class="error-msg" data-error-for="billing">Enter a flat amount, or hourly rate + estimate.</div>
          </div>
          <div class="row two">
            <div class="field">
              <label>Travel / Other Expenses</label>
              <input type="text" id="expenses" name="expenses" placeholder="Optional" />
            </div>
            <div class="field">
              <label class="req">Payment Method</label>
              <div class="radio" data-required-group="payment">
                <label><input type="radio" name="payment" value="Direct Pay" checked> Direct Pay (check/ACH)</label>
                <label><input type="radio" name="payment" value="Platform Invoice"> Platform Invoice
                  (EvictionFiler.com)</label>
              </div>
              <div class="error-msg" data-error-for="payment">Choose a payment method.</div>
            </div>
          </div>
        </div>
      </section>

      <!-- Acknowledgment -->
      <section class="card">
        <div class="head">
          <h2>✅ Acknowledgment</h2>
        </div>
        <div class="body">
          <p class="muted">I, (Per Diem Attorney), accept responsibility to appear and represent the above party in
            accordance with instructions provided.</p>
          <div class="row three">
            <div class="field">
              <label class="req">Per Diem Attorney (Name)</label>
              <input type="text" name="ackName" required />
              <div class="error-msg">Enter your full name.</div>
            </div>
            <div class="field">
              <label class="req">Signature</label>
              <input type="text" name="ackSignature" required placeholder="Type full name" />
              <div class="error-msg">Provide your typed signature.</div>
            </div>
            <div class="field">
              <label class="req">Date</label>
              <input type="date" name="ackDate" required />
              <div class="error-msg">Select date.</div>
            </div>
          </div>
        </div>
      </section>

      <section class="card">
        <div class="body">
          <small class="muted">⚖️ This intake ensures per diem attorneys know who they’re covering, what’s expected in
            court, and how they’ll get paid — and it protects the hiring attorney/firms.</small>
        </div>
      </section>

    </form>
  </div>

  <!-- Footer Actions -->
  <div class="footer d-print-none">
    <div class="footer-inner">
      <div class="stack">
        <a href="#" class="btn ghost">← Back</a>
      </div>
      <div class="stack">
        <button class="btn" onclick="window.print()">🖨️ Print</button>
        <button class="btn primary" id="submitBtn">Submit</button>
      </div>
    </div>
  </div>

  <div class="toast" id="toast"></div>

  <script>
    // ====== Helpers ======
    const qs = (s, r = document) => r.querySelector(s);
    const qsa = (s, r = document) => [...r.querySelectorAll(s)];

    const form = qs('#perdiem-form');
    const submitBtn = qs('#submitBtn');
    const saveBtn = qs('#saveBtn');
    const toast = qs('#toast');

    const STORAGE_KEY = 'ef:perdiem:draft:v2';

    function showToast(msg, ok = true) {
      toast.textContent = msg;
      toast.className = `toast show ${ok ? 'ok' : 'err'}`;
      setTimeout(() => toast.classList.remove('show'), 2800);
    }

    // Toggle "Other" fields
    const caseTypeOtherCb = qs('#caseTypeOtherCb');
    const caseTypeOther = qs('#caseTypeOther');
    const apptOtherCb = qs('#apptOtherCb');
    const apptOther = qs('#apptOther');
    const docsOtherCb = qs('#docsOtherCb');
    const docsOther = qs('#docsOther');

    [caseTypeOtherCb, apptOtherCb, docsOtherCb].forEach(cb => cb && cb.addEventListener('change', e => {
      const map = { caseTypeOtherCb: caseTypeOther, apptOtherCb: apptOther, docsOtherCb: docsOther };
      const input = map[e.target.id];
      if (!input) return;
      input.style.display = e.target.checked ? 'inline-block' : 'none';
      if (!e.target.checked) input.value = '';
    }));

    // Billing mode toggle
    const billingRadios = qsa('input[name="billingMode"]');
    const flatAmount = qs('#flatAmount');
    const hourlyRate = qs('#hourlyRate');
    const hourlyEstimate = qs('#hourlyEstimate');

    function updateBillingUI() {
      const mode = (billingRadios.find(r => r.checked) || {}).value;
      const isHourly = mode === 'hourly';
      hourlyRate.style.display = isHourly ? 'inline-block' : 'none';
      hourlyEstimate.style.display = isHourly ? 'inline-block' : 'none';
      flatAmount.style.display = isHourly ? 'none' : 'inline-block';
    }
    billingRadios.forEach(r => r.addEventListener('change', updateBillingUI));
    updateBillingUI();

    // ====== Validation ======
    function setInvalid(el, message) {
      const field = el.closest('.field') || el.closest('[data-required-group]') || el.parentElement;
      if (!field) return;
      field.classList.add('invalid');
      const msg = field.querySelector('.error-msg') || qs(`[data-error-for="${el.name || el.dataset.requiredGroup}"]`);
      if (msg) msg.style.display = 'block';
      if (message && msg) msg.textContent = message;
    }
    function clearInvalid(el) {
      const field = el.closest('.field') || el.closest('[data-required-group]') || el.parentElement;
      if (!field) return;
      field.classList.remove('invalid');
      const msg = field.querySelector('.error-msg') || qs(`[data-error-for="${el.name || el.dataset?.requiredGroup}"]`);
      if (msg) msg.style.display = 'none';
    }

    function validateGroup(name) {
      const group = qsa(`[name="${name}"]`);
      const checked = group.some(x => (x.type === 'checkbox' || x.type === 'radio') ? x.checked : !!x.value);
      const errorFor = qs(`[data-error-for="${name}"]`);
      if (!checked) { errorFor?.style && (errorFor.style.display = 'block'); return false; }
      if (errorFor) errorFor.style.display = 'none';
      return true;
    }

    function validateBilling() {
      const mode = (billingRadios.find(r => r.checked) || {}).value;
      if (mode === 'hourly') {
        const ok = (!!hourlyRate.value && Number(hourlyRate.value) > 0) && (!!hourlyEstimate.value && Number(hourlyEstimate.value) > 0);
        const err = qs('[data-error-for="billing"]');
        if (!ok) { err.style.display = 'block'; return false; } else { err.style.display = 'none'; return true; }
      } else {
        const ok = !!flatAmount.value && Number(flatAmount.value) > 0;
        const err = qs('[data-error-for="billing"]');
        if (!ok) { err.style.display = 'block'; return false; } else { err.style.display = 'none'; return true; }
      }
    }

    function validateForm() {
      let ok = true;
      // clear all
      qsa('.invalid').forEach(n => n.classList.remove('invalid'));
      qsa('.error-msg').forEach(n => n.style.display = 'none');

      // required inputs
      qsa('[required]').forEach(el => {
        if (!el.value) { setInvalid(el); ok = false; }
      });

      // required groups
      ok = validateGroup('caseType') && ok;
      ok = validateGroup('representing') && ok;
      ok = validateGroup('appearanceType') && ok;
      ok = validateGroup('payment') && ok;

      // at least one document
      const docsChecked = qsa('[name="docs"]').some(x => x.checked) || (docsOtherCb && docsOtherCb.checked && docsOther.value.trim());
      const docsErr = qs('[data-error-for="docs"]');
      if (!docsChecked) { docsErr.style.display = 'block'; ok = false; } else { docsErr.style.display = 'none'; }

      // billing
      ok = validateBilling() && ok;

      return ok;
    }

    // highlight fields on input
    form.addEventListener('input', e => {
      const t = e.target;
      if (t.matches('[required]') && t.value) { clearInvalid(t); }
      if (t.name === 'flatAmount' || t.name === 'hourlyRate' || t.name === 'hourlyEstimate') validateBilling();
    });

    // ====== Serialization ======
    function serialize() {
      const fd = new FormData(form);
      const obj = {};
      // arrays
      obj.caseType = qsa('[name="caseType"]:checked').map(x => x.value);
      if (caseTypeOtherCb?.checked && caseTypeOther.value) obj.caseType.push(caseTypeOther.value);

      obj.appearanceType = qsa('[name="appearanceType"]:checked').map(x => x.value);
      if (apptOtherCb?.checked && apptOther.value) obj.appearanceType.push(apptOther.value);

      obj.docs = qsa('[name="docs"]:checked').map(x => x.value);
      if (docsOtherCb?.checked && docsOther.value) obj.docs.push(docsOther.value);

      // scalars
      ['hiringFirm', 'contactPerson', 'contactPhoneEmail', 'courtLocation', 'partRoom', 'docket', 'county', 'partyNames', 'opposingCounsel', 'appearanceDate', 'appearanceTime', 'relief', 'keyFacts', 'instructions', 'expenses', 'ackName', 'ackSignature', 'ackDate'].forEach(k => obj[k] = fd.get(k) || '');

      // representing & payment
      obj.representing = fd.get('representing') || '';
      obj.payment = fd.get('payment') || '';

      // billing
      const mode = (billingRadios.find(r => r.checked) || {}).value;
      obj.billing = { mode };
      if (mode === 'hourly') {
        obj.billing.hourlyRate = Number(fd.get('hourlyRate') || 0);
        obj.billing.estimateHours = Number(fd.get('hourlyEstimate') || 0);
        obj.billing.estimatedTotal = +(obj.billing.hourlyRate * obj.billing.estimateHours).toFixed(2);
      } else {
        obj.billing.flatAmount = Number(fd.get('flatAmount') || 0);
      }
      return obj;
    }

    // ====== Autosave (localStorage) ======
    function saveDraft() { localStorage.setItem(STORAGE_KEY, JSON.stringify(serialize())); showToast('Draft saved'); }
    function restoreDraft() {
      try {
        const raw = localStorage.getItem(STORAGE_KEY); if (!raw) return;
        const data = JSON.parse(raw);
        // checkboxes
        qsa('[name="caseType"]').forEach(x => x.checked = data.caseType?.includes(x.value));
        qsa('[name="appearanceType"]').forEach(x => x.checked = data.appearanceType?.includes(x.value));
        qsa('[name="docs"]').forEach(x => x.checked = data.docs?.includes(x.value));
        // others
        for (const k of ['hiringFirm', 'contactPerson', 'contactPhoneEmail', 'courtLocation', 'partRoom', 'docket', 'county', 'partyNames', 'opposingCounsel', 'appearanceDate', 'appearanceTime', 'relief', 'keyFacts', 'instructions', 'expenses', 'ackName', 'ackSignature', 'ackDate']) {
          if (data[k] !== undefined) form.elements[k].value = data[k];
        }
        // representing & payment
        if (data.representing) { const r = qs(`[name="representing"][value="${data.representing}"]`); if (r) r.checked = true; }
        if (data.payment) { const p = qs(`[name="payment"][value="${data.payment}"]`); if (p) p.checked = true; }
        // billing
        if (data.billing) {
          const mode = data.billing.mode || 'flat';
          const r = qs(`[name="billingMode"][value="${mode}"]`); if (r) r.checked = true;
          if (mode === 'hourly') {
            hourlyRate.value = data.billing.hourlyRate ?? '';
            hourlyEstimate.value = data.billing.estimateHours ?? '';
          } else {
            flatAmount.value = data.billing.flatAmount ?? '';
          }
          updateBillingUI();
        }
        // others text
        if (data.caseType?.some(v => !qsa('[name="caseType"]').some(x => x.value === v))) { caseTypeOtherCb.checked = true; caseTypeOther.style.display = 'inline-block'; caseTypeOther.value = data.caseType.find(v => !qsa('[name="caseType"]').some(x => x.value === v)); }
        if (data.appearanceType?.some(v => !qsa('[name="appearanceType"]').some(x => x.value === v))) { apptOtherCb.checked = true; apptOther.style.display = 'inline-block'; apptOther.value = data.appearanceType.find(v => !qsa('[name="appearanceType"]').some(x => x.value === v)); }
        if (data.docs?.some(v => !qsa('[name="docs"]').some(x => x.value === v))) { docsOtherCb.checked = true; docsOther.style.display = 'inline-block'; docsOther.value = data.docs.find(v => !qsa('[name="docs"]').some(x => x.value === v)); }
      } catch { }
    }

    saveBtn.addEventListener('click', (e) => { e.preventDefault(); saveDraft(); });
    form.addEventListener('change', () => localStorage.setItem(STORAGE_KEY, JSON.stringify(serialize())));

    // ====== Submit ======
    async function submitForm(e) {
      e.preventDefault();
      submitBtn.disabled = true;
      const ok = validateForm();
      if (!ok) {
        submitBtn.disabled = false;
        const firstErr = qs('.invalid, [data-error-for]:not([style*="display: none"])');
        firstErr?.scrollIntoView({ behavior: 'smooth', block: 'center' });
        showToast('Please fix highlighted fields', false);
        return;
      }
      const payload = serialize();
      try {
        const res = await fetch('/api/perdiem/appearances', {
          method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload)
        });
        if (!res.ok) throw new Error('Server error');
        const data = await res.json().catch(() => ({ id: 'N/A' }));
        localStorage.removeItem(STORAGE_KEY);
        showToast('Submitted successfully');
        // Optional: redirect after a beat
        setTimeout(() => { /* window.location.href = `/cases/${data.id}` */ }, 600);
      } catch (err) {
        // Fallback demo mode if API not present
        console.warn('Submit failed, demo success fallback:', err);
        showToast('Submitted (demo mode)', true);
      } finally {
        submitBtn.disabled = false;
      }
    }

    qs('#submitBtn').addEventListener('click', submitForm);

    // Initialize
    restoreDraft();
  </script>
</body>



@code {
    [Parameter]
    public Guid ClientId { get; set; }

    [Parameter]
    public Guid CaseTypeId { get; set; }
}
