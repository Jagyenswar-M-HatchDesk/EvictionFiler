@page "/EditCase/{caseId:guid}"

@using EvictionFiler.Application.DTOs
@using EvictionFiler.Application.DTOs.ApartmentDto
@using EvictionFiler.Application.DTOs.ClientDto
@using EvictionFiler.Application.DTOs.LandLordDto
@using EvictionFiler.Application.DTOs.TenantDto
@using EvictionFiler.Application.Interfaces.IServices
@using EvictionFiler.Client.Services
@using EvictionFiler.Domain.Entities.Master
@using EvictionFiler.Domain.Entities.Master
@inject ILandlordSevice _landlordService
@inject IApartmentService _apartmentService
@inject ILegalCaseService _legalCaseService
@inject ICaseService _caseService

@inject ITenantService _tenantService
@inject IClientService _clientService
@inject NavigationManager nav
@inject NavigationDataService _dataService
@using Blazored.Typeahead
@using EvictionFiler.Domain.Entities

@rendermode InteractiveAuto
<style>
    .stepper-row::-webkit-scrollbar {
        height: 3px; /* thinner scrollbar */
    }

    .stepper-row::-webkit-scrollbar-thumb {
        background-color: #888;
        border-radius: 10px;
    }

    .stepper-row::-webkit-scrollbar-track {
        background: transparent;
    }

    /* For Firefox */
    .stepper-row {
        scrollbar-width: thin;
        scrollbar-color: #888 transparent;
    }

    .stepper-container {
        /*   background-color: #F7F6F3; */
        padding: 30px 20px;
        border-radius: 6px;
        /*   box-shadow: 0 1px 3px rgba(0,0,0,0.1); */
        overflow-x: auto;
        white-space: nowrap;
    }

    .stepper-row {
        display: flex;
        align-items: center;
        gap: 5px;
        min-width: max-content;
        overflow-x: auto; /* move it here */
        white-space: nowrap;
    }


    .stepper-step {
        display: flex;
        align-items: center;
        font-size: 14px;
        font-weight: 500;
        gap: 6px;
    }

        .stepper-step .circle {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 13px;
            flex-shrink: 0;
        }

    .circle.done {
        background-color: #5cb85c;
        color: white;
    }

    .circle.active {
        background-color: #1F365D;
        color: white;
    }

    .circle.upcoming {
        background-color: #ccc;
        color: white;
    }

    .text.done,
    .text.active {
        color: #007bff;
        font-weight: 600;
    }

    .text.upcoming {
        color: #aaa;
    }

    .arrow {
        color: #ccc;
        margin: 0 8px;
    }

    .nav-buttons {
        display: flex;
        gap: 6px;
    }

    .circle.done {
        background-color: #D4A844;
        color: white;
    }

    .text.done,
    .text.active {
        color: #1F365D;
        font-weight: 600;
    }

    .required-label::after {
        content: " *";
        color: red;
    }

    .custom-scroll::-webkit-scrollbar {
        width: 6px;
    }

    .custom-scroll::-webkit-scrollbar-thumb {
        background-color: #ccc;
        border-radius: 3px;
    }

    .custom-scroll {
        scrollbar-width: thin;
    }

    .required-label::after {
        content: " *";
        color: red;
    }

</style>

<!-- upper Step Tracker + Navigation Buttons -->
<div class="stepper-container position-fixed top-0 d-flex justify-content-between align-items-center flex-wrap v-100" style="scrollbar-width: thin;">
    <!-- Stepper Tracker -->
    <div class="stepper-row d-flex align-items-center">

        @for (int i = 0; i < stepTitles.Count; i++)
        {
            var isDone = i < currentStep;
            var isActive = i == currentStep;

            var circleClass = isDone ? "circle done"
            : isActive ? "circle active"
            : "circle upcoming";

            var textClass = isDone ? "text done"
            : isActive ? "text active"
            : "text upcoming";

            <div class="stepper-step">
                <div class="@circleClass">
                    @(isDone ? "✓" : (i + 1).ToString())
                </div>
                <span class="@textClass">@stepTitles[i]</span>

                @if (i < stepTitles.Count - 1)
                {
                    <span class="arrow">→</span>
                }
            </div>
        }

    </div>

</div>


<!-- Form Content -->
<div class="container-fluid px-4" style="margin-top: 100px; margin-bottom: 100px;">

    <div style="height: calc(100vh - 200px); overflow-y: auto;" class="custom-scroll">
        @if (currentStep == 0)
        {
            <div class="mx-auto p-4 border rounded shadow-sm bg-white">
                <h5 class="text-center text-navy fw-bold">Basic Information</h5>
                <hr class="border-gold mb-4" />

                <!-- Client Role + Representative Name -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label fw-semibold text-navy required-label">Client Role</label>
                        <InputSelect class="form-select" @bind-Value="legalcaseDto.ClientRoleId">
                            <option value="">-- Select Type --</option>
                            @foreach (var c in ClientRoleList)
                            {
                                <option value="@c.Id">@c.Name</option>
                            }
                        </InputSelect>
                    </div>

                    @if (selectedClientRoleName == "Legal Representative")
                    {
                        <div class="col-md-6">
                            <label class="form-label fw-semibold text-navy required-label">Representative Name</label>
                            <input type="text" class="form-control" @bind="legalcaseDto.LegalRepresentative" placeholder="Enter Representative Name" />
                        </div>
                    }
                </div>
                <EditForm EditContext="editContext">

                    <ValidationSummary />
                    <!-- Case Type + Other Case Type -->
                    <div class="row mb-3 d-flex align-items-center">
                        <!-- Case Type Dropdown (Populated from DB) -->
                        <div class="col-md-6">
                            <label class="form-label fw-semibold text-navy required-label">Case Type</label>
                            <select class="form-select" @onchange="OnCaseTypeChanged">
                                <option value="">-- Select Case Type --</option>
                                @foreach (var caseType in caseTypes)
                                {
                                    <option value="@caseType.Id" selected="@(legalcaseDto.CaseTypeId == caseType.Id)">
                                        @caseType.Name
                                    </option>
                                }
                            </select>
                            <ValidationMessage For="@(() => legalcaseDto.CaseTypeId)" />
                        </div>

                        <!-- Holdover Subtypes Dropdown (if Holdover selected) -->
                        @if (selectedCaseTypeName == "Holdover" && caseSubTypes?.Any() == true)
                        {
                            <div class="col-md-6 mt-3">
                                <label class="form-label fw-semibold text-navy required-label">Holdover Case Type</label>
                                <select class="form-select"
                                        @bind-value="legalcaseDto.CaseSubTypeId"
                                        @bind-value:event="onchange">
                                    <option value="">-- Select Holdover Subtype --</option>
                                    @foreach (var subtype in caseSubTypes)
                                    {
                                        <option value="@subtype.Id">@subtype.Name</option>
                                    }
                                </select>
                            </div>
                        }


                    </div>
                </EditForm>
            </div>
        }

        @if (currentStep == 1)
        {
            <div class="mx-auto p-4 border rounded shadow-sm bg-white">
                <h5 class="text-center text-navy fw-bold">Landlord Information</h5>
                <hr class="border-gold mb-4" />

                @{
                    bool isCodeSearch = !string.IsNullOrWhiteSpace(searchText) &&
                    (char.IsDigit(searchText[0]) || searchText.ToLower().StartsWith("l")); // adjust this as per your code prefix like LL, LND etc.
                }

                <EditForm Model="@landlordSearchModel">
                    <div class="row mb-3 align-items-center">
                        @if (!isLandlordSelected)
                        {
                            <label class="col-sm-1 col-form-label fw-semibold text-navy">Landlord</label>
                            <div class="col-sm-10 position-relative">

                                <input type="text"
                                       class="form-control"
                                       value="@searchText"
                                       @oninput="HandleInput"
                                       placeholder="Search landlord by Name/Code..." />

                                @if (filteredList?.Any() == true)
                                {
                                    <ul class="list-group position-absolute w-100 shadow-sm z-3 mt-1"
                                        style="max-height: 200px; overflow-y: auto;">
                                        @foreach (var item in filteredList)
                                        {
                                            <li class="list-group-item list-group-item-action"
                                                style="cursor: pointer;"
                                                @onclick="@(() => SelectLandlord(item.Id))">
                                                @item.FirstName @(!string.IsNullOrEmpty(item.LandLordCode) ? $"({item.LandLordCode})" : "")
                                            </li>
                                        }
                                    </ul>
                                }
                                else if (hasSearched && !string.IsNullOrWhiteSpace(searchText))
                                {
                                    <ul class="list-group position-absolute w-100 shadow-sm z-3 mt-1">
                                        <li class="list-group-item text-muted">No matching landlord found.</li>
                                    </ul>
                                }
                            </div>
                        }
                    </div>

                </EditForm>


                @if (landlordDetails != null)
                {

                    <EditForm EditContext="@editContext">
                        <DataAnnotationsValidator />
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label fw-semibold required-label">Attorney</label>
                                <InputText class="form-control" @bind-Value="legalcaseDto.Attrney" placeholder="Enter Attorney" />
                                <ValidationMessage For="@(() => legalcaseDto.Attrney)" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label fw-semibold required-label">Attorney Contact Info</label>
                                <InputText class="form-control" @bind-Value="legalcaseDto.AttrneyContactInfo" placeholder="Enter Attorney Contact Info" />
                                <ValidationMessage For="@(() => legalcaseDto.AttrneyContactInfo)" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label fw-semibold required-label">Firm</label>
                                <InputText class="form-control" @bind-Value="legalcaseDto.Firm" placeholder="Enter Firm" />
                                <ValidationMessage For="@(() => legalcaseDto.Firm)" />
                            </div>
                        </div>
                    </EditForm>

                    <div class="row mt-4">
                        <div class="col-md-7">
                            <div class="border rounded p-3 bg-light">
                                <h6 class="text-navy fw-bold mb-3">Landlord Details</h6>
                                <div class="card mb-3 shadow-sm">
                                    <div class="card-body">
                                        <div class="row">
                                            <!-- Left Column -->
                                            <div class="col-6">
                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy" style="white-space: nowrap;">Code:</div>
                                                    <div class="col-8">@landlordDetails.Landlord.LandLordCode</div>
                                                </div>

                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy" style="white-space: nowrap;">Name:</div>
                                                    <div class="col-8">@($"{landlordDetails.Landlord.FirstName} {landlordDetails.Landlord.LastName}")</div>
                                                </div>

                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy" style="white-space: nowrap;">Owner:</div>
                                                    <div class="col-8">@landlordDetails.Landlord.TypeOfOwnerName</div>
                                                </div>

                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy" style="white-space: nowrap;">Email:</div>
                                                    <div class="col-8">@landlordDetails.Landlord.Email</div>
                                                </div>

                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy" style="white-space: nowrap;">Address:</div>
                                                    <div class="col-8">
                                                        @($"{landlordDetails.Landlord.Address1}, {landlordDetails.Landlord.Address2}, {landlordDetails.Landlord.City}, {landlordDetails.Landlord.StateId} {landlordDetails.Landlord.Zipcode}")
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Right Column -->
                                            <div class="col-6">
                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy" style="white-space: nowrap;">Phone:</div>
                                                    <div class="col-8">@landlordDetails.Landlord.Phone</div>
                                                </div>

                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy" style="white-space: nowrap;">EIN/SSN:</div>
                                                    <div class="col-8">@landlordDetails.Landlord.EINorSSN</div>
                                                </div>

                                          

                                                <div class="row mb-2">
                                                    <div class="col-6 fw-semibold text-navy" style="white-space: nowrap;">Contact Person:</div>
                                                    <div class="col-6">@landlordDetails.Landlord.ContactPersonName</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>



                                </div>
                            </div>
                        </div>
                        <div class="col-md-5">
                            <div class="border rounded p-3 bg-light">
                                <h6 class="text-navy mb-3 fw-bold">Building Details</h6>

                                @if (landlordDetails.Buildings?.Any() == true)
                                {
                                    @foreach (var b in landlordDetails.Buildings)
                                    {
                                        <div class="card mb-3 shadow-sm">
                                            <div class="card-body">
                                                <div class="row mb-2">
                                                    <div class="col-5 fw-semibold text-navy">Building Code:</div>
                                                    <div class="col-7">@b.BuildingCode</div>
                                                </div>
                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy">Apt Code:</div>
                                                    <div class="col-6">@b.ApartmentCode</div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-4 fw-semibold text-navy">Interest:</div>
                                                    <div class="col-8">@b.PetitionerInterest</div>
                                                </div>

                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy">MDR_No.:</div>
                                                    <div class="col-8">@b.MDR_Number</div>
                                                </div>
                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy">LandRole:</div>
                                                    <div class="col-8">@b.LandlordType</div>
                                                </div>
                                                <div class="row mb-2">
                                                    <div class="col-5 fw-semibold text-navy">Date of Refree:</div>
                                                    <div class="col-7">@b.DateOfRefreeDeed</div>
                                                </div>
                                                <div class="row mb-2">
                                                    <div class="col-5 fw-semibold text-navy">Rent Regulation:</div>
                                                    <div class="col-7">@b.RentRegulationName</div> 
                                                </div>
                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy" style="white-space: nowrap;">Address:</div>
                                                    <div class="col-8">
                                                        @($"{b.Address_1}, {b.Address_2}, {b.City}, {b.StateId} {b.Zipcode}")
                                                    </div>
                                                </div>

                                            </div>

                                        </div>
                                    }
                                }
                                else
                                {
                                    <p>No buildings found.</p>
                                }
                            </div>
                        </div>
                    </div>
                }

            </div>
        }


        @if (currentStep == 2)
        {

            <div class="mx-auto p-4 border rounded shadow-sm bg-white">
                <h5 class="text-center text-navy fw-bold"> Building/Property Details</h5>
                <hr class="border-gold mb-4" />

                <EditForm Model="@buildingSearchModel">
                    <div class="row mb-3 align-items-center">
                        @if (!isBuildingSelected)
                        {
                            <label class="col-sm-2 col-form-label fw-semibold text-navy">Building/Property</label>
                            <div class="col-sm-10 position-relative">
                                <input type="text"
                                       class="form-control"
                                       value="@searchBuildingText"
                                       @oninput="HandleBuildingInput" 
                                       placeholder="Search Building by Code.." />

                                @if (filteredBuildingList?.Any() == true)
                                {
                                    <ul class="list-group position-absolute w-100 shadow-sm z-3 mt-1"
                                        style="max-height: 200px; overflow-y: auto;">
                                        @foreach (var item in filteredBuildingList)
                                        {
                                            <li class="list-group-item list-group-item-action"
                                                style="cursor: pointer;"
                                                @onclick="@(() => SelectBuilding(item.Id))">
                                                @item.BuildingCode

                                            </li>
                                        }
                                    </ul>
                                }
                                else if (hasSearched && !string.IsNullOrWhiteSpace(searchBuildingText))
                                {
                                    <ul class="list-group position-absolute w-100 shadow-sm z-3 mt-1">
                                        <li class="list-group-item text-muted">No matching buildings found.</li>
                                    </ul>
                                }
                            </div>
                        }
                    </div>
                </EditForm>

                @if (buildingDetails != null)
                {
                    <div class="row mt-4">
                        <div class="col-md-6">
                            <div class="border rounded p-3 bg-light">
                                <h6 class="text-navy mb-3 fw-bold">Building Details</h6>

                                <div class="card mb-3 shadow-sm">
                                    <div class="card-body">
                                        <div class="row">
                                            <!-- Left Column -->
                                            <div class="col-6">
                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy text-nowrap">Code:</div>
                                                    <div class="col-8">@buildingDetails.Building.BuildingCode</div>
                                                </div>
                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy text-nowrap">Apt Code:</div>
                                                    <div class="col-8">@buildingDetails.Building.ApartmentCode</div>
                                                </div>
                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy text-nowrap">B.Units:</div>
                                                    <div class="col-8">@buildingDetails.Building.BuildingUnits</div>
                                                </div>
                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy text-nowrap">Date:</div>
                                                    <div class="col-8">@buildingDetails.Building.DateOfRefreeDeed</div>
                                                </div>
                                                <div class="row mb-2">
                                                    <div class="col-5 fw-semibold text-navy" style="white-space: nowrap;">Address:</div>
                                                    <div class="col-7">
                                                        @($"{buildingDetails.Building.Address_1}, {buildingDetails.Building.Address_2}, {buildingDetails.Building.City}, {buildingDetails.Building.StateId} {buildingDetails.Building.Zipcode}")
                                                    </div>
                                                </div>


                                            </div>

                                            <!-- Right Column -->
                                            <div class="col-6">
                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy text-nowrap">M_NO.:</div>
                                                    <div class="col-8">@buildingDetails.Building.MDR_Number</div>
                                                </div>

                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy text-nowrap">Type:</div>
                                                    <div class="col-8">@buildingDetails.Building.PremiseName</div>
                                                </div>
                                                <div class="row mb-2">
                                                    <div class="col-4 fw-semibold text-navy text-nowrap">Interest:</div>
                                                    <div class="col-8">@buildingDetails.Building.PetitionerInterest </div>
                                                </div>
                                                <div class="row mb-2">
                                                    <div class="col-5 fw-semibold text-navy text-nowrap">Rent Regulation:</div>
                                                    <div class="col-7">@buildingDetails.Building.RentRegulationName</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>


                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="border rounded p-3 bg-light">
                                <h6 class="text-navy mb-3 fw-bold">Tenant Details </h6>

                                @if (buildingDetails.Tenants?.Any() == true)
                                {
                                    @foreach (var b in buildingDetails.Tenants)
                                    {
                                        <div class="card mb-3 shadow-sm">
                                            <div class="card-body">
                                                <div class="row">
                                                    <!-- Left Column -->
                                                    <div class="col-6">
                                                        <div class="row mb-2">
                                                            <div class="col-4 fw-semibold text-navy">Code:</div>
                                                            <div class="col-8">@b.TenantCode</div>
                                                        </div>
                                                        <div class="row mb-2">
                                                            <div class="col-4 fw-semibold text-navy">SSN:</div>
                                                            <div class="col-8">@b.SSN</div>
                                                        </div>
                                                        <div class="row mb-2">
                                                            <div class="col-4 fw-semibold text-navy">Email:</div>
                                                            <div class="col-8">@b.Email</div>
                                                        </div>
                                                        <div class="row mb-2">
                                                            <div class="col-4 fw-semibold text-navy">Rent:</div>
                                                            <div class="col-8">@b.Rent</div>
                                                        </div>
                                                        <div class="row mb-2">
                                                            <div class="col-6 fw-semibold text-navy">Borough:</div>
                                                            <div class="col-6">@b.Borough</div>
                                                        </div>
                                                    </div>

                                                    <!-- Right Column -->
                                                    <div class="col-6">
                                                        <div class="row mb-2">
                                                            <div class="col-4 fw-semibold text-navy">Name:</div>
                                                            <div class="col-8">@b.FirstName</div>
                                                        </div>
                                                        <div class="row mb-2">
                                                            <div class="col-5 fw-semibold text-navy">Phone:</div>
                                                            <div class="col-7">@b.Phone</div>
                                                        </div>
                                                        <div class="row mb-2">
                                                            <div class="col-4 fw-semibold text-navy">Lang:</div>
                                                            <div class="col-8">@b.LanguageName</div>
                                                        </div>
                                                    
                                                        <div class="row mb-2">
                                                            <div class="col-5 fw-semibold text-navy">Address:</div>
                                                            @($"{b.Address_1}, {b.Address_2}, {b.City}, {b.StateId} {b.Zipcode}")
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>



                                        </div>
                                    }
                                }
                                else
                                {
                                    <p>No Tenant found.</p>
                                }
                            </div>
                        </div>
                    </div>
                }

            </div>
        }

        @if (currentStep == 3)
        {

            <div class="mx-auto p-4 border rounded shadow-sm bg-white">
                <h5 class="text-center text-navy fw-bold">Tenants Details</h5>
                <hr class="border-gold mb-4" />

                <EditForm Model="@tenantSearchModel">
                    <div class="row mb-3 align-items-center">
                        @if (!isTenantSelected)
                        {
                            <label class="col-sm-1 col-form-label fw-semibold text-navy">Tenant</label>
                            <div class="col-sm-10 position-relative">
                                <input type="text"
                                       class="form-control"
                                       value="@searchtenantText"
                                       @oninput="HandleTenantInput" 
                                       placeholder="Search tenant by Name/Code.." />

                                @if (filteredTenantList?.Any() == true)
                                {

                                    bool isCodeSearch = !string.IsNullOrWhiteSpace(searchtenantText) &&
                                    (char.IsDigit(searchtenantText[0]) || searchtenantText.ToLower().StartsWith("t")); // adjust prefix if needed


                                    <ul class="list-group position-absolute w-100 shadow-sm z-3 mt-1"
                                        style="max-height: 200px; overflow-y: auto;">
                                        @foreach (var item in filteredTenantList)
                                        {
                                            <li class="list-group-item list-group-item-action"
                                                style="cursor: pointer;"
                                                @onclick="@(() => SelectTenant(item.Id))">
                                                @if (isCodeSearch)
                                                {
                                                    <span>@item.TenantCode (@item.FirstName)</span>
                                                }
                                                else
                                                {
                                                    <span>@item.FirstName (@item.TenantCode)</span>
                                                }
                                            </li>
                                        }
                                    </ul>

                                }
                                else if (hasSearched && !string.IsNullOrWhiteSpace(searchtenantText))
                                {
                                    <ul class="list-group position-absolute w-100 shadow-sm z-3 mt-1">
                                        <li class="list-group-item text-muted">No matching tenants found.</li>
                                    </ul>
                                }
                            </div>
                        }
                    </div>
                </EditForm>

                @if (TenantDetails != null)
                {
                    <div class="row mt-4">
                        <div class="col-md-8">
                            <div class="border rounded p-3 bg-light">
                                <h6 class="text-navy mb-3 fw-bold">Tenants Details</h6>

                                <div class="card mb-3 shadow-sm">
                                    <div class="card-body">
                                        <div class="row mb-2">
                                            <div class="col-2 fw-semibold text-navy">Code:</div>
                                            <div class="col-4">@TenantDetails.TenantCode</div>
                                            <div class="col-2 fw-semibold text-navy">Name:</div>
                                            <div class="col-4">@TenantDetails.FirstName</div>
                                        </div>
                                        <div class="row mb-2">
                                            <div class="col-2 fw-semibold text-navy">SSN:</div>
                                            <div class="col-3">@TenantDetails.SSN</div>
                                            <div class="col-3 fw-semibold text-navy">Phone:</div>
                                            <div class="col-4">@TenantDetails.Phone</div>
                                        </div>
                                        <div class="row mb-2">
                                            <div class="col-2 fw-semibold text-navy">Email:</div>
                                            <div class="col-5">@TenantDetails.Email</div>
                                            <div class="col-2 fw-semibold text-navy">Lang:</div>
                                            <div class="col-3">@TenantDetails.LanguageId</div>
                                        </div>

                                        <div class="row mb-2">
                                            <div class="col-2 fw-semibold text-navy">Rent:</div>
                                            <div class="col-2">@TenantDetails.Rent</div>
                                            <div class="col-2 fw-semibold text-navy">Status:</div>
                                            @* <div class="col-2">@TenantDetails.LeaseStatus</div> *@
                                            <div class="col-2 fw-semibold text-navy">Borough:</div>
                                            <div class="col-2">@TenantDetails.Borough</div>
                                        </div>
                                        <div class="row mb-2">
                                            <div class="col-2 fw-semibold text-navy">Address:</div>
                                            <div class="col-10">@TenantDetails.Address_1</div>

                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>

                    </div>
                }

            </div>
        }

    </div>
</div>

<!-- bottom Button Group -->
<div class="container my-4" style="position:fixed ; bottom:-17px;">
    <div>
        <hr />
    </div>
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <!-- Left Button -->
        <button class="btn bg-navy text-white" @onclick="Back" disabled="@(currentStep == 0)">← Back</button>

        <!-- Right Buttons -->
        <div class="d-flex gap-2" style="position:fixed ;right:40px">
            @if (currentStep > 0 && currentStep < lastStep)
            {
                <button class="btn btn-outline-warning" @onclick="ResetStep">Reset</button>
            }
            @if (currentStep < lastStep)
            {
                <button class="btn bg-gold text-white" @onclick="Next" disabled="@IsNextDisabled">Next →</button>
            }
            @if (currentStep == lastStep)
            {
                <button class="btn btn-outline-warning" @onclick="ResetStep">Reset</button>
                <button class="btn btn-outline-warning" @onclick="ResetStep">SaveAsDraft</button>
                <button class="btn btn-success" disabled="@IsNextDisabled" @onclick="Submit">Submit</button>
            }
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Guid caseId { get; set; }
    // [Parameter] public string ClientId { get; set; }
    private CreateEditLegalCaseModel legalCase = new();
    int currentStep = 0;
    int lastStep = 3;
    private List<CaseType> caseTypes = new();
    private List<CaseSubType> caseSubTypes = new();
    private EditContext editContext;
    // Used for conditional rendering
    private string selectedCaseTypeName;
    private LandlordWithBuildings? landlordDetails;
    private BuildingWithTenant? buildingDetails;
    private EditTenantDto? TenantDetails;
    public Guid? SelectedLandlord { get; set; }
    public Guid? SelectedBuilding { get; set; }
    public Guid? SelectedTenant{ get; set; }
    private List<ClientRole> ClientRoleList = new();

    private string selectedClientRoleName => ClientRoleList.FirstOrDefault(x => x.Id == legalcaseDto.ClientRoleId)?.Name;
    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(legalcaseDto);
        caseTypes = await _caseService.GetAllCaseType();
        ClientRoleList = await _caseService.GetAllClientRole();
        legalcaseDto = await _legalCaseService.GetByIdAsync(caseId); 

        if (legalcaseDto?.CaseTypeId != null)
        {
            var selectedType = caseTypes.FirstOrDefault(ct => ct.Id == legalcaseDto.CaseTypeId);
            selectedCaseTypeName = selectedType?.Name;

            if (selectedCaseTypeName == "Holdover")
            {
                caseSubTypes = await _caseService.GetAllCaseSubTypes(legalcaseDto.CaseTypeId.Value);
            }
        }

        if (legalcaseDto?.LandLordId != null)
        {
            await LoadLandlordDetailsAsync(legalcaseDto.LandLordId.Value);
        }

        if (legalcaseDto?.ApartmentId != null)
        {
            await LoadBuildingDetailsAsync(legalcaseDto.ApartmentId.Value);
        }
        if (legalcaseDto?.TenantId != null)
        {
            await LoadTenantDetailsAsync(legalcaseDto.TenantId.Value);
        }
    }


    private async Task LoadLandlordDetailsAsync(Guid landlordId)
    {
        landlordDetails = await _landlordService.GetLandlordWithBuildingsAsync(landlordId);
        isLandlordSelected = landlordDetails != null;
        searchText = landlordDetails?.Landlord?.FirstName ?? "";

        // Set the selected landlord id as string here to enable Next button
        landlordSearchModel.SelectedLandlord = landlordId.ToString();

        StateHasChanged();
    }

    private async Task LoadTenantDetailsAsync(Guid tenantId)
    {
        TenantDetails = await _tenantService.GetByIdAsync(tenantId);

        // ✅ pick the first or null
        isTenantSelected = TenantDetails != null;
        searchtenantText = TenantDetails?.FirstName ?? "";
        tenantSearchModel.SelectedTenant = tenantId.ToString();

        StateHasChanged();
    }



    private async Task LoadBuildingDetailsAsync(Guid apartmentId)
    {
        buildingDetails = await _apartmentService.GetBuildingsWithTenantAsync(apartmentId); // create/use proper method
        isBuildingSelected = buildingDetails != null;
        searchBuildingText = buildingDetails?.Building?.BuildingCode ?? "";

        buildingSearchModel.SelectedBuilding = apartmentId.ToString();

        StateHasChanged();
    }





    private async Task OnCaseTypeChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var selectedGuid))
        {
            legalcaseDto.CaseTypeId = selectedGuid;

            var selectedType = caseTypes.FirstOrDefault(ct => ct.Id == selectedGuid);
            selectedCaseTypeName = selectedType?.Name;

            if (selectedCaseTypeName == "Holdover")
            {
                caseSubTypes = await _caseService.GetAllCaseSubTypes(selectedGuid);
            }
            else
            {
                caseSubTypes = new();
                legalcaseDto.CaseSubTypeId = null;
            }

            // Force UI refresh
            StateHasChanged();
        }
    }


    private void Next()
    {
        bool isValid = true;

        if (currentStep == 0 || currentStep == 3) // only validate legalcaseDto where needed
            isValid = editContext.Validate();

        if (isValid)
        {
            var selectedType = caseTypes.FirstOrDefault(x => x.Id == legalcaseDto.CaseTypeId);
            selectedCaseTypeName = selectedType?.Name;

            currentStep++;
        }
        else
        {
            Console.WriteLine("Form is not valid.");
        }
    }





    private bool IsNextDisabled =>
       (currentStep == 0 && 
      
      (selectedClientRole == "Legal Representative" && string.IsNullOrWhiteSpace(legalcaseDto.LegalRepresentative)) ||
      legalcaseDto.CaseTypeId == null ||
      (selectedCaseTypeName == "Holdover" && legalcaseDto.CaseSubTypeId == null)
  )
       ||
      (currentStep == 1 && landlordSearchModel.SelectedLandlord == null)
      ||
      (currentStep == 2 && (
          buildingDetails == null ||
          buildingDetails.Building == null ||
          string.IsNullOrWhiteSpace(buildingDetails.Building.ApartmentCode)
      ))
      ||
      (currentStep == 3 && (
          TenantDetails == null ||
          string.IsNullOrWhiteSpace(TenantDetails.FirstName)
      ));


    List<string> stepTitles = new() {
        "Case & Role", "Landlord Info", "Property Info", " Tenant Info",

    };
    private bool hasSearched = false;
    private LandlordSearchModel landlordSearchModel = new();
    private BuildingSearchModel buildingSearchModel = new();
    private TenantSearchModel tenantSearchModel = new();
    private string searchText = "";
    private string searchBuildingText = "";
    private string searchtenantText = "";
    private List<CreateLandLordDto> filteredList = new();
    private List<AddApartment> filteredBuildingList = new();
    private List<CreateTenantDto> filteredTenantList = new();
    private CreateLandLordDto? selectedLandlord;
    private AddApartment? selectedBuilding;
    private CreateTenantDto? selectedTenant;
    private bool isLandlordSelected = false;
    private bool isBuildingSelected = false;
    private bool isTenantSelected = false;

    private async Task HandleInput(ChangeEventArgs e)
    {
        searchText = e?.Value?.ToString() ?? "";
        hasSearched = true;
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            filteredList = await _landlordService.SearchLandlordsAsync(searchText, legalcaseDto.ClientId ?? Guid.Empty);

        }
        else
        {
            filteredList.Clear();
        }

    }

    private async Task HandleTenantInput(ChangeEventArgs e)
    {
        searchtenantText = e?.Value?.ToString() ?? "";
        hasSearched = true;
        if (!string.IsNullOrWhiteSpace(searchtenantText))
        {
            filteredTenantList = await _tenantService.SearchTenantsAsync(searchtenantText, legalcaseDto.ApartmentId ?? Guid.Empty);
        }
        else
        {
            filteredTenantList.Clear();
        }
    }


    private async Task HandleBuildingInput(ChangeEventArgs e)
    {
        searchBuildingText = e?.Value?.ToString() ?? "";

        if (!string.IsNullOrWhiteSpace(searchBuildingText) && landLordDto != null)
        {
            filteredBuildingList = await _apartmentService.SearchBuildingByCode(searchBuildingText, legalcaseDto.LandLordId ?? Guid.Empty);
        }
        else
        {
            filteredBuildingList.Clear();
        }
    }







    private async Task SelectLandlord(Guid id)
    {
        landlordDetails = await _landlordService.GetLandlordWithBuildingsAsync(id);

        if (landlordDetails?.Landlord != null)
        {
            var fullName = $"{landlordDetails.Landlord.FirstName} {landlordDetails.Landlord.LastName}";

            searchText = fullName;
            landlordSearchModel.SelectedLandlord = fullName;

            landLordDto = landlordDetails.Landlord;

            legalcaseDto.LandLordId = id; // ✅ Assign the selected LandlordId
        }

        filteredList.Clear();
        hasSearched = false;
        isLandlordSelected = true;
        searchText = "";
        StateHasChanged();
    }


    private async Task SelectBuilding(Guid id)
    {
        buildingDetails = await _apartmentService.GetBuildingsWithTenantAsync(id);

        if (buildingDetails != null)
        {
            searchBuildingText = buildingDetails.Building.BuildingCode;
            buildingSearchModel.SelectedBuilding = buildingDetails.Building.BuildingCode;
            apartmentDto = buildingDetails.Building;

            legalcaseDto.ApartmentId = id;
        }

        filteredBuildingList.Clear();
        isBuildingSelected = true;
        searchBuildingText = "";
        hasSearched = false;
    }
    private async Task SelectTenant(Guid id)
    {
        TenantDetails = await _tenantService.GetByIdAsync(id);

        if (TenantDetails != null)
        {
            var fullName = $"{TenantDetails.FirstName} {TenantDetails.LastName}";
            searchtenantText = fullName;
            tenantSearchModel.SelectedTenant = fullName;

            // ✅ Create and assign tenantDto properly
            tenantDto = new CreateTenantDto
            {
                Id = TenantDetails.Id,
                FirstName = TenantDetails.FirstName,
                DOB = TenantDetails.DOB,
                SSN = TenantDetails.SSN,
                Phone = TenantDetails.Phone,
                Email = TenantDetails.Email,
                LanguageId = TenantDetails.LanguageId,
                Address_1 = TenantDetails.Address_1,
                Apt = TenantDetails.Apt,
                Borough = TenantDetails.Borough,
                Rent = TenantDetails.Rent,
                StateName = TenantDetails.StateName,
                LanguageName = TenantDetails.LanguageName,   
                // LeaseStatus = TenantDetails.LeaseStatus,
                TenantCode = TenantDetails.TenantCode

            };
        }

        filteredTenantList.Clear();
        hasSearched = false;
    }


    private void ResetStep()
    {
        switch (currentStep)
        {
            case 1:
                landlordDetails = null;
                isLandlordSelected = false;
                landlordSearchModel.SelectedLandlord = null;
                searchText = string.Empty;
                break;

            case 2:
                buildingDetails = null;
                isBuildingSelected = false; // ✅ agar aap yeh flag use kar rahe ho
                searchBuildingText = string.Empty;
                filteredBuildingList?.Clear();
                break;

            case 3:
                TenantDetails = null;
                isTenantSelected = false;
                searchtenantText = string.Empty;
                filteredTenantList?.Clear();
                break;
        }

        StateHasChanged(); // 🌀 UI ko refresh karo
    }



    string first_name;
    string last_name;
    string gender = "male";
    string address;
    string phone;
    string code;
    string date;
    string month;
    string year;

    bool checkbox;
    bool checkbox_other;

    // Bank Info
    string bank;
    string branch;
    string email;
    string account_name;
    string account_number;
    string date_2;
    string month_2;
    string year_2;
    string selectedClientRole;
    string selectedCaseType;
    string otherCaseType;
    string holdoverSubType;

    private string attorney;
    private string firm;
    private string registeredAgent;
    private string residentialUnits;
    private string commercialUnits;
    private string dhcrRegistered;
    private string hpdViolations;
    private string yearBuilt;
    private string heatWater;
    private string BuildingCode;

    private CreateTenantDto tenantDto = new CreateTenantDto();
    private CreateLandLordDto landLordDto = new CreateLandLordDto();
    private AddApartment apartmentDto = new AddApartment();
    private CreateEditLegalCaseModel legalcaseDto = new CreateEditLegalCaseModel();
    private CreateClientDto clientDto = new CreateClientDto();

    private List<CreateTenantDto> matchedTenants = new List<CreateTenantDto>();
    private List<CreateLandLordDto> matchedLandLords = new List<CreateLandLordDto>();
    private List<CreateClientDto> matchedClients = new List<CreateClientDto>();
    private List<AddApartment> matchedBuilding = new List<AddApartment>();
    private bool showSuggestions = false;


    void SaveAsDraft() => Console.WriteLine("Saving Draft...");

    void Back() => currentStep--;


    private async Task Submit()
    {
        if (legalcaseDto == null)
            return;

        // Ensure required fields are present before update
        if (legalcaseDto.CaseTypeId == Guid.Empty)
        {
            Console.WriteLine("❌ CaseTypeId is required.");
            return;
        }

        if (legalcaseDto.LandLordId == Guid.Empty || legalcaseDto.ApartmentId == Guid.Empty || legalcaseDto.TenantId == Guid.Empty)
        {
            Console.WriteLine("❌ Landlord, Apartment, or Tenant is missing.");
            return;
        }

        // Optional: Set subtype name if CaseType is Holdover
        if (selectedCaseTypeName == "Holdover" && legalcaseDto.CaseSubTypeId != null)
        {
            var subType = caseSubTypes.FirstOrDefault(s => s.Id == legalcaseDto.CaseSubTypeId);
            // legalcaseDto.CaseSubTypeName = subType?.Name; // Uncomment if your DTO has CaseSubTypeName
        }

        // 🔁 Call update service
        var result = await _legalCaseService.UpdateAsync(legalcaseDto);

        if (result)
        {
            nav.NavigateTo("/cases?success=true");
        }
        else
        {
            Console.WriteLine("❌ Failed to update the case.");
        }
    }







    private CancellationTokenSource _cts;
    private async Task OnTenantCodeChanged(ChangeEventArgs e)
    {
        _cts?.Cancel(); // cancel previous call
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        var input = e.Value?.ToString() ?? string.Empty;
        tenantDto.TenantCode = input;

        if (input.Length >= 3)
        {
            await Task.Delay(1000, token); // debounce
            matchedTenants = await _tenantService.SearchTenantbyCode(input);
            showSuggestions = matchedTenants.Any();
        }
        else
        {
            showSuggestions = false;
        }
    }
    private void SelectTenant(CreateTenantDto selectedTenant)
    {
        tenantDto = selectedTenant;
        showSuggestions = false;
    }

    private async Task OnLandLordCodeChanged(ChangeEventArgs e)
    {
        _cts?.Cancel(); // cancel previous call
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        var input = e.Value?.ToString() ?? string.Empty;
        landLordDto.LandLordCode = input;

        if (input.Length >= 3)
        {
            await Task.Delay(1000, token); // debounce
            var landlord = await _landlordService.SearchLandlordByCode(input);
            // matchedLandLords = landlord.Where(e => e.Id == Guid.Parse(ClientId)).ToList();
            showSuggestions = matchedLandLords.Any();
        }
        else
        {
            showSuggestions = false;
        }
    }
    private void SelectLandLord(CreateLandLordDto selectedTenant)
    {
        landLordDto = selectedTenant;
        showSuggestions = false;
    }

    private async Task OnClientCodeChanged(ChangeEventArgs e)
    {
        _cts?.Cancel(); // cancel previous call
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        var input = e.Value?.ToString() ?? string.Empty;
        clientDto.ClientCode = input;

        if (input.Length >= 3)
        {
            await Task.Delay(1000, token); // debounce
            matchedClients = await _clientService.SearchClientByCode(input);
            showSuggestions = matchedClients.Any();
        }
        else
        {
            showSuggestions = false;
        }
    }
    private void SelectClient(CreateClientDto selectedClient)
    {
        // legalcaseDto.Company = selectedClient.Name;

        showSuggestions = false;
    }

    private async Task OnBuildingChanged(ChangeEventArgs e)
    {
        _cts?.Cancel(); // cancel previous call
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        var input = e.Value?.ToString() ?? string.Empty;
        apartmentDto.ApartmentCode = input;

        if (input.Length >= 3)
        {
            await Task.Delay(1000, token); // debounce
            // var apartnent = await _apartmentService.SearchBuildingByCode(input);
            // matchedBuilding = apartnent.Where(e => e.Id == Guid.Parse(ClientId)).ToList();
            showSuggestions = matchedBuilding.Any();
        }
        else
        {
            showSuggestions = false;
        }
    }

}

