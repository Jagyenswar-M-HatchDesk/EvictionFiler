@page "/EditCase1/{caseId:guid}"

@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@using EvictionFiler.Application.DTOs
@using EvictionFiler.Application.DTOs.ApartmentDto
@using EvictionFiler.Application.DTOs.LandLordDto
@using EvictionFiler.Application.DTOs.LegalCaseDto
@using EvictionFiler.Application.DTOs.TenantDto

@using EvictionFiler.Application.Interfaces.IRepository.MasterRepository
@using EvictionFiler.Application.Interfaces.IServices
@using EvictionFiler.Client.Components.Cases
@using EvictionFiler.Domain.Entities.Master
@inject IClientRoleRepository ClientRoleRepository
@inject ICaseTypeRepository CaseTypeRepository
@inject ICaseSubTypeRepository CaseSubTypeRepository
@inject IRegulationStatusRepository RegulationStatusRepository
@inject IReasonHoldoverRepository ReasonHoldoverRepository
@inject ILandlordTypeRepository LandlordTypeRepository
@inject ILegalCaseService _legalCaseService
@inject IRenewalStatusRepository RenewalStatusRepository
@inject IUnitIllegalRepository UnitIllegalRepository
@inject ITenancyTypeRepository TenancyTypeRepository
@inject IDateRentRepository DateRentRepository
@inject ILandlordSevice _landlordService
@inject IBuildingService _buildingService
@inject ILegalCaseService _legalCaseService
@inject ITenantService _tenantService
@inject IClientService _clientService
@using EvictionFiler.Client.SpinnerService
@using EvictionFiler.Domian.Enums
@inject IJSRuntime JS
@inject NavigationManager nav
@inject SpinnerService spinnerservice
<!--
  EvictionFiler – Intake Wizard (Blazor + Bootstrap 5)
  • Single self‑contained .razor component
  • Stepper, progress bar, per‑step validation
  • Clean Bootstrap 5 cards & grid
  • Review screen and JS alert on submit (replace with API call)
-->

<style>
    .required-label::after {
        content: " *";
        color: red;
    }
</style>

<div class="container-fluid py-3 border-bottom bg-white sticky-top">
    <div class="d-flex justify-content-between align-items-center">

        <div class="d-flex align-items-center " style="gap:90px">
            @for (var i = 0; i < Steps.Count; i++)
            {
                var cls = i < (int)CurrentStep ? "bg-primary" : i == (int)CurrentStep ? "bg-info" : "bg-secondary";
                <div class="d-flex align-items-center gap-2">
                    <span class="rounded-circle d-inline-block @cls" style="width:14px; height:14px; border: 1px solid #333;"></span>
                    <span>@Steps[i]</span>
                </div>
            }
        </div>

    </div>
    <div class="progress mt-3" style="height:6px;">
        <div class="progress-bar " role="progressbar" style="width:@Progress%;background-color:#1F365D !important" ></div>
    </div>
</div>

<div class="container my-4">
    <EditForm EditContext="_editContext">
        <DataAnnotationsValidator />
        @*  <ValidationSummary class="mb-3" /> *@


        @if (CurrentStep == Step.Landlord)
        {
            <div class="row">
                <div class="col-8">
                    <div class="card mb-3">
                        <div class="card-header fw-bold">Landlord Information</div>
                        <div class="card-body row">
                            <div class="col-md-6">
                                <label class="form-label  required-label">Full Name </label>
                                <InputText class="form-control" @bind-Value="legalcaseDto.FullName" placeholder="Enter Full Name" />
                                <ValidationMessage For="() => legalcaseDto.FullName" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label  required-label">Phone </label>
                                <InputText class="form-control" @bind-Value="legalcaseDto.Phone" placeholder="Enter Phone" />
                                <ValidationMessage For="() => legalcaseDto.Phone" />
                            </div>
                            <div class="col-md-6 mt-2">
                                <label class="form-label  required-label">Email </label>
                                <InputText type="email" class="form-control" @bind-Value="legalcaseDto.Email" placeholder="Enter Email" />
                                <ValidationMessage For="() => legalcaseDto.Email" />
                            </div>
                            <div class="col-md-6 mt-2">
                                <label class="form-label  required-label">Role </label>
                                <InputSelect class="form-select" @bind-Value="legalcaseDto.LandLordTypeId">
                                    <option value="">-- Select Type --</option>
                                    @foreach (var l in LandLordTypeList)
                                    {
                                        <option value="@l.Id">@l.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => legalcaseDto.LandLordTypeId" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <CasesSummary LegalCase="legalcaseDto" LandLordTypeList="LandLordTypeList" />

                    <TipsSummary />
                </div>
            </div>
        }


        @* BUILDING *@


        @if (CurrentStep == Step.Building)
        {
            <div class="row">
                <div class="col-8">
                    <div class="card mb-3">
                        <div class="card-header fw-bold ">Building Information</div>
                        <div class="card-body row g-3">
                            <div class="col-md-6">
                                <label class="form-label  required-label">MDR Number </label>
                                <InputText class="form-control" @bind-Value="legalcaseDto.Mdr" placeholder="Enter MDR Number" />
                                <ValidationMessage For="() => legalcaseDto.Mdr" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label required-label">Number of Units </label>
                                <InputText class="form-control" @bind-Value="legalcaseDto.Units" placeholder="Enter Units" />
                                <ValidationMessage For="() => legalcaseDto.Units" />
                            </div>
                            <div class="col-6">
                                <label class="form-label  required-label">Building Address *</label>
                                <InputText class="form-control" @bind-Value="legalcaseDto.BuildingAddress" placeholder="Enter Address" />
                                <ValidationMessage For="() => legalcaseDto.BuildingAddress" />
                            </div>
                            <div class="col-6">
                                <label class="form-label  required-label">Rent Regulation *</label>
                                <InputSelect class="form-select" @bind-Value="legalcaseDto.RegulationStatusId">
                                    <option value="">-- Select Type --</option>
                                    @foreach (var l in RegulationList)
                                    {
                                        <option value="@l.Id">@l.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => legalcaseDto.RegulationStatusId" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <CasesSummary LegalCase="legalcaseDto"
                                  LandLordTypeList="LandLordTypeList"
                                  RegulationList="RegulationList"
                                  CurrentStep="CurrentStep" />


                    <TipsSummary />
                </div>
            </div>


        }

        @* TENANT *@
        @if (CurrentStep == Step.Tenant)
        {
            <div class="row">
                <div class="col-8">
                    <div class="card mb-3">
                        <div class="card-header fw-bold">Tenant Information</div>
                        <div class="card-body row g-3">
                            <div class="col-md-6">
                                <label class="form-label  required-label">Tenant Name </label>
                                <InputText class="form-control" @bind-Value="legalcaseDto.TenantName"
                                           placeholder="Enter Full Name" />
                                <ValidationMessage For="() => legalcaseDto.TenantName" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label  required-label">Unit / Apt </label>
                                <InputText class="form-control" @bind-Value="legalcaseDto.UnitNumber" placeholder="Enter Units" />
                                <ValidationMessage For="() => legalcaseDto.UnitNumber" />
                            </div>
                            <div class="col-12">
                                <div class="row">
                                    <div class="col-12">
                                        <label class="form-label required-label">Is the Unit Illegal?</label>
                                    </div>
                                    <div class="col-12">
                                        <InputRadioGroup @bind-Value="legalcaseDto.IsUnitIlligalId" class="d-flex flex-wrap gap-4">
                                            @foreach (var option in IsUnitIllegalList)
                                            {
                                                <div class="form-check form-check-inline">
                                                    <InputRadio class="form-check-input" Value="@option.Id" />
                                                    <label class="form-check-label ms-1">@option.Name</label>
                                                </div>
                                            }
                                        </InputRadioGroup>
                                    </div>
                                </div>

                                <ValidationMessage For="() => legalcaseDto.IsUnitIlligalId" />
                            </div>

                            <div class="my-4">
                                <div class="row mb-2">
                                    <div class="col-4 fw-semibold">Tenant of record?</div>
                                    <div class="col-4 fw-semibold">Still in possession?</div>
                                    <div class="col-4 fw-semibold">Other Occupants?</div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-4 d-flex gap-3 align-items-center">
                                        <InputRadioGroup @bind-Value="legalcaseDto.TenantRecord">
                                            <div class="form-check">
                                                <InputRadio class="form-check-input" Value="true" />
                                                <label class="form-check-label">Yes</label>
                                            </div>
                                            <div class="form-check">
                                                <InputRadio class="form-check-input" Value="false" />
                                                <label class="form-check-label">No</label>
                                            </div>
                                        </InputRadioGroup>
                                    </div>

                                    <div class="col-4 d-flex gap-3 align-items-center">
                                        <InputRadioGroup @bind-Value="legalcaseDto.HasPossession">
                                            <div class="form-check">
                                                <InputRadio class="form-check-input" Value="true" />
                                                <label class="form-check-label">Yes</label>
                                            </div>
                                            <div class="form-check">
                                                <InputRadio class="form-check-input" Value="false" />
                                                <label class="form-check-label">No</label>
                                            </div>
                                        </InputRadioGroup>
                                    </div>

                                    <div class="col-4 d-flex gap-3 align-items-center">
                                        <InputRadioGroup @bind-Value="legalcaseDto.OtherOccupants">
                                            <div class="form-check">
                                                <InputRadio class="form-check-input" Value="true" />
                                                <label class="form-check-label">Yes</label>
                                            </div>
                                            <div class="form-check">
                                                <InputRadio class="form-check-input" Value="false" />
                                                <label class="form-check-label">No</label>
                                            </div>
                                        </InputRadioGroup>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <CasesSummary LegalCase="legalcaseDto"
                                  IsUnitIllegalList="IsUnitIllegalList"
                                  CurrentStep="CurrentStep" />



                    <TipsSummary />
                </div>
            </div>

        }

        @* RENT *@
        @if (CurrentStep == Step.Rent)
        {
            <div class="row">
                <div class="col-md-8">
                    <div class="card mb-3">
                        <div class="card-header fw-bold">Rent</div>
                        <div class="card-body">
                            <div class="row g-2">

                                <!-- Written Lease -->
                                <div class="col-md-4">
                                    <label class="form-label">Written Lease?</label>
                                    <div class="d-flex justify-content-start align-items-center  gap-2">
                                        <InputRadioGroup @bind-Value="legalcaseDto.WrittenLease">
                                            <div class="form-check d-flex justify-content-center gap-2">
                                                <InputRadio class="form-check-input" Value="true" />
                                                <label class="form-check-label">Yes</label>
                                            </div>
                                            <div class="form-check  d-flex justify-content-center gap-2">
                                                <InputRadio class="form-check-input " Value="false" />
                                                <label class="form-check-label">No</label>
                                            </div>
                                        </InputRadioGroup>
                                    </div>
                                </div>

                                <!-- Oral Start -->
                                <div class="col-md-4">
                                    <label class="form-label">Oral Start</label>
                                    <InputDate class="form-control" @bind-Value="legalcaseDto.OralStart" />
                                </div>

                                <!-- Oral End -->
                                <div class="col-md-4">
                                    <label class="form-label">Oral End</label>
                                    <InputDate class="form-control" @bind-Value="legalcaseDto.OralEnd" />
                                </div>

                            </div>
                            <div class="row g-2 mt-2">
                                <!-- Date Tenant Moved -->
                                <div class="col-md-4">
                                    <label class="form-label">Date Tenant Moved</label>
                                    <InputDate class="form-control" @bind-Value="legalcaseDto.DateTenantMoved" />
                                </div>

                                <!-- Rent Due Day -->
                                <div class="col-md-4">
                                    <label class="form-label  required-label">Rent Due Day </label>
                                    <InputSelect class="form-select" @bind-Value="legalcaseDto.RentDueEachMonthOrWeekId">
                                        <option value="">-- Select Type --</option>
                                        @foreach (var l in DateRentList)
                                        {
                                            <option value="@l.Id">@l.Name</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="() => legalcaseDto.RentDueEachMonthOrWeekId" />
                                </div>

                                <!-- Monthly Rent -->
                                <div class="col-md-4">
                                    <label class="form-label  required-label">Monthly Rent ($) </label>
                                    <InputNumber class="form-control" @bind-Value="legalcaseDto.MonthlyRent" placeholder="Enter Monthly Rent" />
                                    <ValidationMessage For="() => legalcaseDto.MonthlyRent" />
                                </div>
                            </div>
                            <div class="row g-2 mt-2">

                                <!-- Tenant's Share -->
                                <div class="col-md-4">
                                    <label class="form-label">Tenant's Share ($)</label>
                                    <InputNumber class="form-control" @bind-Value="legalcaseDto.TenantShare" placeholder="Enter Total Share" />

                                </div>

                                <!-- Total Rent Owed -->
                                <div class="col-md-4">
                                    <label class="form-label">Total Rent Owed ($)</label>
                                    <InputNumber class="form-control" @bind-Value="legalcaseDto.TotalOwed" placeholder="Enter Total Rent" />

                                </div>
                                <!-- Tenancy Type -->
                                <div class="col-md-4">
                                    <label class="form-label required-label">Tenancy Type</label>
                                    <InputSelect class="form-select" @bind-Value="legalcaseDto.TenancyTypeId">
                                        <option value="">-- Select Type --</option>
                                        @foreach (var l in TenancyTypeList)
                                        {
                                            <option value="@l.Id">@l.Name</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="() => legalcaseDto.TenancyTypeId" />
                                </div>
                            </div>
                            <div class="row g-2 mt-2">

                                <div class="col-md-6">
                                    <label class="form-label">ERAP Payment Received?</label>
                                    <div class="d-flex justify-content-start align-items-center  gap-2">
                                        <InputRadioGroup @bind-Value="legalcaseDto.IsERAPPaymentReceived">
                                            <div class="form-check d-flex justify-content-center gap-2">
                                                <InputRadio class="form-check-input" Value="true" />
                                                <label class="form-check-label">Yes</label>
                                            </div>
                                            <div class="form-check  d-flex justify-content-center gap-2">
                                                <InputRadio class="form-check-input " Value="false" />
                                                <label class="form-check-label">No</label>
                                            </div>
                                        </InputRadioGroup>
                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>
                </div>


                <div class="col-md-4">
                    <CasesSummary LegalCase="legalcaseDto"
                                  TenancyTypeList="TenancyTypeList"
                                  DateRentList="DateRentList"
                                  CurrentStep="CurrentStep" />
                    <TipsSummary />
                </div>
            </div>


        }

        @* CASE *@
        @if (CurrentStep == Step.Case)
        {
            <div class="row">
                <div class="col-8">
                    <div class="card mb-3">
                        <div class="card-header fw-bold">Case Details</div>
                        <div class="card-body">
                            <label class="form-label required-label">Case Type </label>
                            <InputSelect class="form-select" @bind-Value="legalcaseDto.CaseTypeId">
                                <option value="">-- Select Type --</option>
                                @foreach (var l in CaseTypeList)
                                {
                                    <option value="@l.Id">@l.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => legalcaseDto.CaseTypeId" />
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <CasesSummary LegalCase="legalcaseDto"
                                  CaseTypeList="CaseTypeList"
                                  CurrentStep="CurrentStep" />
                    <TipsSummary />
                </div>
            </div>

        }

        @* REVIEW *@
        @if (CurrentStep == Step.Review)
        {
            <div class="row">
                <div class="col-12">
                    <div class="card mb-3">
                        <div class="card-header fw-bold">Review & Submit</div>
                        <div class="card-body small">
                            <p class="text-muted">Please review all details before submitting.</p>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <h6>Landlord</h6>
                                    <dl class="row mb-0">
                                        <dt class="col-5">Name</dt>
                                        <dd class="col-7">@legalcaseDto.FullName</dd>
                                        <dt class="col-5">Phone</dt>
                                        <dd class="col-7">@legalcaseDto.Phone</dd>
                                        <dt class="col-5">Email</dt>
                                        <dd class="col-7">@legalcaseDto.Email</dd>
                                        <dt class="col-5">Role</dt>
                                        <dd class="col-7">@legalcaseDto.LandLordTypeName</dd>
                                    </dl>
                                </div>
                                <div class="col-md-6">
                                    <h6>Building</h6>
                                    <dl class="row mb-0">
                                        <dt class="col-5">MDR</dt>
                                        <dd class="col-7">@legalcaseDto.Mdr</dd>
                                        <dt class="col-5"># Units</dt>
                                        <dd class="col-7">@legalcaseDto.Units</dd>
                                        <dt class="col-5">Address</dt>
                                        <dd class="col-7">@legalcaseDto.BuildingAddress</dd>
                                        <dt class="col-5">Regulation</dt>
                                        <dd class="col-7">@legalcaseDto.RegulationStatusName</dd>
                                    </dl>
                                </div>
                                <div class="col-md-6">
                                    <h6>Tenant</h6>
                                    <dl class="row mb-0">
                                        <dt class="col-5">Name</dt>
                                        <dd class="col-7">@legalcaseDto.TenantName</dd>
                                        <dt class="col-5">Unit</dt>
                                        <dd class="col-7">@legalcaseDto.UnitNumber</dd>
                                        <dt class="col-5">Illegal</dt>
                                        <dd class="col-7">@string.Join(", ", legalcaseDto.IsUnitIlligalName)</dd>
                                    </dl>
                                </div>
                                <div class="col-md-6">
                                    <h6>Rent</h6>
                                    <dl class="row mb-0">
                                        <dt class="col-5">Monthly</dt>
                                        <dd class="col-7">@legalcaseDto.MonthlyRent?.ToString("C")</dd>
                                        <dt class="col-5">Total Owed</dt>
                                        <dd class="col-7">@legalcaseDto.TotalOwed?.ToString("C")</dd>
                                        <dt class="col-5">ERAP</dt>
                                        <dd class="col-7">@legalcaseDto.IsERAPPaymentReceived</dd>
                                    </dl>
                                </div>
                                <div class="col-md-12">
                                    <h6>Case</h6>
                                    <dl class="row mb-0">
                                        <dt class="col-2">Type</dt>
                                        <dd class="col-10">@legalcaseDto.CaseTypeName</dd>
                                    </dl>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*   <div class="col-4">
                    <CasesSummary />
                    <TipsSummary />
                </div> *@
            </div>

        }

        <div class="d-flex justify-content-between border-top pt-3 mt-3">
            <button type="button" class="btn btn-outline-secondary" @onclick="Prev" disabled="@(CurrentStep == Step.Landlord)">← Back</button>
            @if (CurrentStep != Step.Review)
            {
                <button type="button" class="btn " style="background-color:#1F365D !important; color:white" @onclick="Next">Next →</button>
            }
            else
            {
                <button type="button" class="btn btn-success" @onclick="SubmitAsync">Submit</button>
            }
        </div>
    </EditForm>
</div>

@code {

    [Parameter]
    public Guid caseId { get; set; }
    [Parameter] public string ClientId { get; set; }
    private readonly List<string> Steps = new() { "Landlord", "Building", "Tenant", "Rent", "Case", "Review" };
    private readonly string[] CaseTypes = new[] { "Nonpayment", "Holdover", "HP Proceeding", "Illegal Sublet", "Nuisance" };

    private IntakeModel legalcaseDto = new IntakeModel();
    [Parameter] public Step CurrentStep { get; set; }
    // private Step CurrentStep { get; set; } = Step.Landlord;
    private EditContext _editContext;
    private ValidationMessageStore _messages;
    public List<IsUnitIllegal> IsUnitIllegalList = new();
    private List<RegulationStatus> RegulationList = new();
    private List<LandlordType> LandLordTypeList = new();
    private List<CaseType> CaseTypeList = new();
    private List<TenancyType> TenancyTypeList = new();
    private List<DateRent> DateRentList = new();
    [Parameter] public Guid? CurrentCaseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        spinnerservice.Show();
        legalcaseDto = new IntakeModel();
        _editContext = new EditContext(legalcaseDto);
        _messages = new ValidationMessageStore(_editContext);


        LandLordTypeList = await LandlordTypeRepository.GetAllLandLordType();
        IsUnitIllegalList = await UnitIllegalRepository.GetAllUnitIllegal();
        RegulationList = await RegulationStatusRepository.GetAllRegulationStatus();
        TenancyTypeList = await TenancyTypeRepository.GetAllTenancyType();
        CaseTypeList = await CaseTypeRepository.GetAllCaseType();
        DateRentList = await DateRentRepository.GetAllDateRent();
  
       
        await Task.Delay(500);
        await LoadDataAsync();

        spinnerservice.Hide();
    }


    private string Progress => (((int)CurrentStep + 1) * 100.0 / Steps.Count).ToString("0");

    private async Task LoadDataAsync()
    {

        CaseTypeList = await CaseTypeRepository.GetAllCaseType() ?? new List<CaseType>();


        if (caseId != Guid.Empty)
        {

            legalcaseDto = await _legalCaseService.GetCaseByIdAsync(caseId);
          
            _editContext = new EditContext(legalcaseDto); 
            _messages = new ValidationMessageStore(_editContext);

           
            CurrentCaseId = caseId;


        }
        else
        {

            legalcaseDto = new IntakeModel();
           

            // Default case type Holdover set kar do
            var holdoverCase = CaseTypeList.FirstOrDefault(x => x.Name == "Holdover");
            if (holdoverCase != null)
            {
                legalcaseDto.CaseTypeId = holdoverCase.Id;
            }
           
            _editContext = new EditContext(legalcaseDto); 
            _messages = new ValidationMessageStore(_editContext); 


            // CurrentCaseId ko null rakhna hi better hai is case me
            CurrentCaseId = null;
        }

      
    }

    private async Task Next()
    {
        if (!ValidateCurrentStep()) return;
        legalcaseDto.CaseTypeName = CaseTypeList.FirstOrDefault(x => x.Id == legalcaseDto.CaseTypeId)?.Name;
        legalcaseDto.LandLordTypeName = LandLordTypeList.FirstOrDefault(x => x.Id == legalcaseDto.LandLordTypeId)?.Name;
        legalcaseDto.RegulationStatusName = RegulationList.FirstOrDefault(x => x.Id == legalcaseDto.RegulationStatusId)?.Name;
        legalcaseDto.IsUnitIlligalName = IsUnitIllegalList.FirstOrDefault(x => x.Id == legalcaseDto.IsUnitIlligalId)?.Name;
        legalcaseDto.TenancyTypeName = TenancyTypeList.FirstOrDefault(x => x.Id == legalcaseDto.TenancyTypeId)?.Name;
        if (CurrentStep < Step.Review) CurrentStep++;
    }


    private bool ValidateCurrentStep()
    {
        _messages.Clear();

        switch (CurrentStep)
        {
            case Step.Landlord:
                Require(() => legalcaseDto.FullName, nameof(legalcaseDto.FullName), "Full name is required");
                Require(() => legalcaseDto.Phone, nameof(legalcaseDto.Phone), "Phone is required");
                Require(() => legalcaseDto.Email, nameof(legalcaseDto.Email), "Email is required");
                Require(() => legalcaseDto.LandLordTypeId, nameof(legalcaseDto.LandLordTypeId), "Role is required");
                break;
            case Step.Building:
                Require(() => legalcaseDto.Mdr, nameof(legalcaseDto.Mdr), "MDR is required");
                Require(() => legalcaseDto.Units, nameof(legalcaseDto.Units), "Units required");
                Require(() => legalcaseDto.BuildingAddress, nameof(legalcaseDto.BuildingAddress), "Address required");
                Require(() => legalcaseDto.RegulationStatusId, nameof(legalcaseDto.RegulationStatusId), "Select regulation");
                break;
            case Step.Tenant:
                Require(() => legalcaseDto.TenantName, nameof(legalcaseDto.TenantName), "Tenant name required");
                Require(() => legalcaseDto.UnitNumber, nameof(legalcaseDto.UnitNumber), "Unit required");
                Require(() => legalcaseDto.IsUnitIlligalId, nameof(legalcaseDto.IsUnitIlligalId), "Select at least on option");
                break;
            case Step.Rent:
                Require(() => legalcaseDto.MonthlyRent, nameof(legalcaseDto.MonthlyRent), "Monthly rent required");
                Require(() => legalcaseDto.TotalOwed, nameof(legalcaseDto.TotalOwed), "Total owed required");
                Require(() => legalcaseDto.RentDueEachMonthOrWeekId, nameof(legalcaseDto.RentDueEachMonthOrWeekId), "rent due  required");
                Require(() => legalcaseDto.TenancyTypeId, nameof(legalcaseDto.TenancyTypeId), "Tenancy type  required");
                break;

            case Step.Case:
                Require(() => legalcaseDto.CaseTypeId, nameof(legalcaseDto.CaseTypeId), "Case type required");
                break;
        }

        _editContext.NotifyValidationStateChanged();
        return !_editContext.GetValidationMessages().Any();
    }

    private bool ValidateAll()
    {
        var previous = CurrentStep;
        var ok = true;
        foreach (Step s in Enum.GetValues(typeof(Step)))
        {
            CurrentStep = s;
            ok &= ValidateCurrentStep();
        }
        CurrentStep = previous;
        return ok;
    }

    private void Require<T>(Expression<Func<T>> accessor, string fieldName, string message)
    {
        var value = accessor.Compile().Invoke();
        var isEmpty = value == null || (value is string str && string.IsNullOrWhiteSpace(str));
        if (isEmpty)
        {
            _messages.Add(new FieldIdentifier(legalcaseDto, fieldName), message);
        }
    }

    private void Prev()
    {
        if (CurrentStep > Step.Landlord) CurrentStep--;
    }

    private async Task SubmitAsync()
    {
        spinnerservice.Show();
        var result = false;

        if (legalcaseDto != null || legalcaseDto.Id != Guid.Empty)
        {

            result = await _legalCaseService.UpdateCaseAsync(legalcaseDto);

        }
        if (result)
        {
            nav.NavigateTo("/cases?success=true");
        }

    }

    // private enum Step { Landlord = 0, Building = 1, Tenant = 2, Rent = 3, Case = 4, Review = 5 }
}


