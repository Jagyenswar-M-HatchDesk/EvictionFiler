@page "/clients"
@using EvictionFiler.Application.DTOs.ApartmentDto
@using EvictionFiler.Application.DTOs.ClientDto
@using EvictionFiler.Application.DTOs.LandLordDto
@using EvictionFiler.Application.DTOs.TenantDto
@using EvictionFiler.Client.Services
@inject ClientService clientservice
@inject LandLordService landLordService
@inject ApartmentService apartmentService
@inject TenantService tenantService
@rendermode InteractiveAuto
<PageTitle>Clients</PageTitle>


<body class="p-4">
    <div class="container p-4 rounded shadow-sm bg-white">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h5 class="m-0 fw-bold text-navy">Manage Clients</h5>
        </div>

        <!-- Add Button + Search -->
        <div class="g-2 mb-3 d-flex justify-content-between align-items-center">
            <button class="btn bg-navy text-white" @onclick="AddClient">
                <i class="fa fa-plus me-1"></i> Add New
            </button>
            <div class="position-relative">
                <input class="form-control border border-primary text-navy" placeholder="Search.." @bind="searchTerm" @bind:event="oninput" />
                <button class="btn position-absolute top-50 end-0 translate-middle-y text-navy" type="button">
                    <i class="fa fa-search"></i>
                </button>
            </div>
        </div>

        <!-- Data Table -->
        <div class="table-responsive mb-3">
            <table class="table table-hover align-middle text-center">
                <thead class="table-light text-navy fw-bold">
                    <tr>
                        <th>ClientCode</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>City</th>
                        <th>Zip Code</th>
                       @* // <th class="sticky">Status</th> *@
                        <th class="sticky">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredClients != null && filteredClients.Any())
                    {
                        foreach (var client in filteredClients)
                        {
                            <tr>
                                <td>@client.ClientCode</td>
                                <td>@(client.FirstName + " " + @client.LastName)</td>
                                <td>@client.Email</td>
                                <td>@client.Phone</td>
                                <td>@client.City</td>
                                <td>@client.ZipCode</td>

                                <td class="sticky">
                                    <i class="fa-solid fa-pen-to-square text-navy me-3" @onclick= "()=>EditClient(client.Id)" title="Edit"></i>
                                    <i class="fa-solid fa-trash-can text-danger" @onclick=" ()=>DeleteClient(client.Id)" title="Delete"></i>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="text-muted">No clients found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <CreateCLient @ref="createClientRef"  />

    <EditClient @ref="editClientRef"
                Landlords="saveEditlandlordList"
                Buildings="saveEditBuildingList"
                Tenants="saveEditTenantList" />


</body>

@code {
    private Guid clientIdForEdit;

    private CreateCLient createClientRef;
    private EditClient editClientRef;
    private List<EditLandlordDto> saveEditlandlordList = new();
    private List<EditApartmentDto> saveEditBuildingList = new();
    private List<EditTenantDto> saveEditTenantList = new();
   


    private List<CreateClientDto> clients = new();
    private string searchTerm = string.Empty;
    [Parameter]
    public Guid Id { get; set; }

    private string activeTab = string.Empty;

    private IEnumerable<CreateClientDto> filteredClients =>
        string.IsNullOrWhiteSpace(searchTerm)
        ? clients
        : clients.Where(c =>
            (!string.IsNullOrWhiteSpace(c.FirstName) && c.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrWhiteSpace(c.Email) && c.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrWhiteSpace(c.Phone) && c.Phone.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));

    protected override async Task OnInitializedAsync()
    {
        clients = await clientservice.GetAllClientsAsync();
    }

    private async Task AddClient()
    {
        var newClient = new CreateClientDto(); 
        createClientRef.Show(newClient);
    }



    private async Task LoadBuildings(Guid clientId)
    {
        var landlords = await landLordService.GetLandlordsByClientIdAsync(clientId);
        saveEditBuildingList.Clear();

        foreach (var landlord in landlords)
        {
            var buildings = await apartmentService.GetBuildingsByLandlordIdAsync(landlord.Id);
            if (buildings?.Any() == true)
            {
                saveEditBuildingList.AddRange(buildings);
            }
        }
    }

  


    private async Task EditClient(Guid clientId)
    {
        clientIdForEdit = clientId;

        var client = await clientservice.GetClientByIdAsync(clientId);
        var landlords = await landLordService.GetLandlordsByClientIdAsync(clientId);

        if (client != null)
        {
            var editClient = new EditClientDto
            {
                Id = client.Id,
                FirstName = client.FirstName,
                LastName = client.LastName,
                Email = client.Email,
                Fax = client.Fax,
                Phone = client.Phone,
                CellPhone = client.CellPhone,
                ClientCode = client.ClientCode,
                Address_1 = client.Address_1,
                Address_2 = client.Address_2,
                City = client.City,
                State = client.State,
                ZipCode = client.ZipCode,
                LandLords = landlords
            };

            await LoadBuildings(clientId);
            saveEditlandlordList = landlords;
            editClientRef.Show(editClient);
        }
    }


    private async Task SetActiveTab(string tab)
    {
        activeTab = tab;

        if (clientIdForEdit != Guid.Empty)
        {
            if (tab == "building")
            {
                saveEditBuildingList.Clear();

                var landlords = await landLordService.GetLandlordsByClientIdAsync(clientIdForEdit);
                foreach (var landlord in landlords)
                {
                    var buildings = await apartmentService.GetBuildingsByLandlordIdAsync(landlord.Id);
                    saveEditBuildingList.AddRange(buildings);
                }
            }
            else if (tab == "tenant")
            {
                saveEditTenantList.Clear();

                var tenants = await tenantService.GetTenantsByClientIdAsync(clientIdForEdit);
                saveEditTenantList.AddRange(tenants);
            }

            StateHasChanged();
        }
    }





    // private async Task HandleCreate(CreateClientDto client)
    // {
    //     var result = await clientservice.AddClientAsync(client);
    //     if (result)
    //     {
    //         await createClientRef.HideAsync();
    //         clients = await clientservice.GetAllClientsAsync();

    //     }
    // }

    public async Task DeleteClient(Guid id)
    {
        bool isDeleted = await clientservice.DeleteClientAsync(id);

        if (isDeleted)
        {
        
            clients = await clientservice.GetAllClientsAsync();
            StateHasChanged();
        }
    }


}
