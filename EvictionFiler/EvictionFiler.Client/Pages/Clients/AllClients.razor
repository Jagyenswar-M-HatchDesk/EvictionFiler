@page "/clients"
@using EvictionFiler.Application.DTOs.ClientDto
@using EvictionFiler.Client.Services
@inject ClientService clientservice
@rendermode InteractiveAuto
<PageTitle>Clients</PageTitle>


<body class="p-4">
    <div class="container p-4 rounded shadow-sm bg-white">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h5 class="m-0 fw-bold text-navy">Manage Clients</h5>
        </div>

        <!-- Add Button + Search -->
        <div class=" overlay-form g-2 mb-3 d-flex justify-content-between align-items-center">
            <button class="btn bg-navy text-white" @onclick="AddClient">
                <i class="fa fa-plus me-1"></i> Add New
            </button>
            <div class="position-relative">
                <input class="form-control border border-primary text-navy" placeholder="Search.." @bind="searchTerm" @bind:event="oninput" />
                <button class="btn position-absolute top-50 end-0 translate-middle-y text-navy" type="button">
                    <i class="fa fa-search"></i>
                </button>
            </div>
        </div>

        <!-- Data Table -->
        <div class="table-responsive mb-3">
            <table class="table table-hover align-middle text-center">
                <thead class="table-light text-navy fw-bold">
                    <tr>
                        <th>ClientCode</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>City</th>
                        <th>Zip Code</th>
                        <th class="sticky">Status</th>
                        <th class="sticky">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredClients != null && filteredClients.Any())
                    {
                        foreach (var client in filteredClients)
                        {
                            <tr>
                                <td>@client.ClientCode</td>
                                <td>@client.Name</td>
                                <td>@client.Email</td>
                                <td>@client.Phone</td>
                                <td>@client.City</td>
                                <td>@client.ZipCode</td>

                              @*   <td class="sticky">
                                    <i class="fa-solid fa-pen-to-square text-navy"></i>
                                    <span class="ms-2 text-gold fw-semibold">Active</span>
                                </td> *@
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="text-muted">No clients found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <CreateCLient @ref="createClientRef" Submit="HandleCreate" />
</body>

@code {
    private CreateCLient createClientRef;
    private List<CreateClientDto> clients = new();
    private string searchTerm = string.Empty;

    private IEnumerable<CreateClientDto> filteredClients =>
        string.IsNullOrWhiteSpace(searchTerm)
        ? clients
        : clients.Where(c =>
            (!string.IsNullOrWhiteSpace(c.Name) && c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrWhiteSpace(c.Email) && c.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrWhiteSpace(c.Phone) && c.Phone.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));

    protected override async Task OnInitializedAsync()
    {
        clients = await clientservice.GetAllClientsAsync();
    }

    private async Task AddClient()
    {
        var newClient = new CreateClientDto(); 
        createClientRef.Show(newClient);
    }

    private async Task HandleCreate(CreateClientDto client)
    {
        var result = await clientservice.AddClientAsync(client);
        if (result)
        {
            createClientRef.Hide();
            clients = await clientservice.GetAllClientsAsync();
        }
    }
}
