@page "/clients"
@using EvictionFiler.Application.DTOs.ApartmentDto
@using EvictionFiler.Application.DTOs.ClientDto
@using EvictionFiler.Application.DTOs.LandLordDto
@using EvictionFiler.Application.DTOs.TenantDto
@using EvictionFiler.Client.Services
@inject ClientService clientservice
@inject LandLordService landLordService
@inject ApartmentService apartmentService
@inject TenantService tenantService
@inject NavigationManager navManager
@rendermode InteractiveAuto
<PageTitle>Clients</PageTitle>
<style>
    .status-active {
        background-color: rgba(25,135,84,1);
        color: #fff;
        padding: 2px 7px;
        border-radius: 1rem;
        font-size: 12px;
    }

    .container {
        /* background-color: #F2F0EC; */
        border: solid 1px #F2F0EC;
        box-shadow: 0 15px 20px #F2F0EC !important;
    }

    .btn-primary {
        background-color: #1F365D;
        border-color: #1F365D;
    }

        .btn-primary:hover {
            background-color: #162646;
            border-color: #162646;
        }

    .page-link {
        color: #1F365D;
    }

        .page-link.active,
        .page-item.active .page-link {
            background-color: #1F365D;
            border-color: #1F365D;
            color: #F2F0EC;
        }

    table.table thead th {
        color: #1F365D;
        background: #F2F0EC;
        margin-bottom: 0px !important;
    }

    h5, p, small {
        color: #1F365D;
    }

    .adv-btn {
        color: #1F365D;
        background: #FFF;
    }

        .adv-btn:hover {
            color: #FFF;
            background: #1F365D;
        }

        .adv-btn.active-adv-btn {
            background-color: #1F365D !important;
            color: #F2F0EC !important;
            border-color: #1F365D !important;
        }


    .table-responsive {
        overflow-x: auto; /* Enable horizontal scroll */
        position: relative;
    }

    table th, table td {
        white-space: nowrap;
    }

    th.sticky, td.sticky {
        position: sticky;
        right: 0;
        background: #F2F0EC; /* Same as container background */
        z-index: 2;
        text-align: center;
    }

    /* Make sure header sticky stays above other cells */
    th.sticky {
        z-index: 3;
    }
</style>

<body class="p-4">
    <div class="container p-4 rounded shadow-sm bg-white">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h5 class="m-0 fw-bold text-navy">Manage Clients</h5>
        </div>

        <!-- Add Button + Search -->
        <div class="g-2 mb-3 d-flex justify-content-between align-items-center">
            <button class="btn bg-navy text-white" @onclick="AddClient">
                <i class="fa fa-plus me-1"></i> Add New
            </button>
            <div class="position-relative">
                <input class="form-control border border-primary text-navy" placeholder="Search.." @bind="searchTerm" @bind:event="oninput" />
                <button class="btn position-absolute top-50 end-0 translate-middle-y text-navy" type="button">
                    <i class="fa fa-search"></i>
                </button>
            </div>
        </div>

        <div class="table-responsive mb-3">
            <table class="table table-hover align-middle text-center" >
                <thead>
                    <tr>
                        <th>ClientCode</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Fax</th>
                        <th>Address1</th>
                        <th>Address2</th>
                        <th>State</th>
                        <th>City</th>
                        <th>Zip Code</th>
                        <th >Status</th>
                        <th class="sticky">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredClients != null && filteredClients.Any())
                    {
                        foreach (var client in filteredClients)
                        {
                            <tr>
                                <td>@client.ClientCode</td>
                                <td>@(client.FirstName + " " + @client.LastName)</td>
                                <td>@client.Email</td>
                                <td>@client.Phone</td>
                                <td>@client.Fax</td>
                                <td>@client.Address_1</td>
                                <td>@client.Address_2</td>
                                <td>@client.State</td>
                                <td>@client.City</td>
                                <td>@client.ZipCode</td>
                                <td>Active</td>
                                <td class="sticky">
                                    <i class="fa-solid fa-pen-to-square text-navy me-3" @onclick="() => EditClient(client.Id)" title="Edit"></i>
                                    <i class="fa-solid fa-trash-can text-danger" @onclick=" ()=>DeleteClient(client.Id)" title="Delete"></i>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="text-muted">No clients found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>


    </div>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050;">
            <div class="toast show text-white bg-success">
                <div class="d-flex">
                    <div class="toast-body">
                        @successMessage
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto"
                            @onclick="() => successMessage = string.Empty"></button>
                </div>
            </div>
        </div>
    }

    <CreateCLient @ref="createClientRef"  />

     <EditClient @ref="editClientRef"
                Landlords="saveEditlandlordList"
                Buildings="saveEditBuildingList"
                Tenants="saveEditTenantList"
            /> 


</body>

@code {
    private Guid clientIdForEdit;

    private CreateCLient createClientRef;
    private EditClient editClientRef;
    private List<EditLandlordDto> saveEditlandlordList = new();
    private List<EditApartmentDto> saveEditBuildingList = new();
    private List<EditTenantDto> saveEditTenantList = new();
    private string successMessage;


    private List<CreateClientDto> clients = new();
    private string searchTerm = string.Empty;
    [Parameter]
    public Guid Id { get; set; }

    private string activeTab = string.Empty;




    private IEnumerable<CreateClientDto> filteredClients =>
        string.IsNullOrWhiteSpace(searchTerm)
        ? clients
        : clients.Where(c =>
            (!string.IsNullOrWhiteSpace(c.FirstName) && c.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrWhiteSpace(c.Email) && c.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrWhiteSpace(c.Phone) && c.Phone.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));




    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(navManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("success", out var isSuccess) && isSuccess == "true")
        {
            successMessage = "Client submitted successfully!";
            StateHasChanged();

            await Task.Delay(2000);
            successMessage = string.Empty;
            StateHasChanged();

            navManager.NavigateTo("/clients", forceLoad: false);
        }

        // ✅ Edit success message
        else if (query.TryGetValue("edit", out var isEdit) && isEdit == "true")
        {
            successMessage = "Client updated successfully!";
            StateHasChanged();

            await Task.Delay(2000);
            successMessage = string.Empty;
            StateHasChanged();

            navManager.NavigateTo("/clients", forceLoad: false);
        }

        clients = await clientservice.GetAllClientsAsync();
    }



    private async Task AddClient()
    {
        var newClient = new CreateClientDto(); 
        createClientRef.Show(newClient);
    }



    private async Task LoadBuildings(Guid clientId)
    {
        var landlords = await landLordService.GetLandlordsByClientIdAsync(clientId);
        saveEditBuildingList.Clear();

        foreach (var landlord in landlords)
        {
            var buildings = await apartmentService.GetBuildingsByLandlordIdAsync(landlord.Id);
            if (buildings?.Any() == true)
            {
                saveEditBuildingList.AddRange(buildings);
            }
        }
    }

    private async Task LoadTenants(Guid clientId)
    {
        saveEditTenantList.Clear(); // Clear old data

        var landlords = await landLordService.GetLandlordsByClientIdAsync(clientId);

        foreach (var landlord in landlords)
        {
            var buildings = await apartmentService.GetBuildingsByLandlordIdAsync(landlord.Id);

            foreach (var building in buildings)
            {
                // 🟢 IMPORTANT: Ye method tenantService ka hona chahiye:
                var tenants = await tenantService.GetTenantsByClientIdAsync(building.Id); // BuildingId dena h yaha

                if (tenants != null && tenants.Any())
                {
                    saveEditTenantList.AddRange(tenants); // ✅ Add all tenants in flat list
                }
            }
        }
    }




    private async Task EditClient(Guid clientId)
    {
        clientIdForEdit = clientId;

        var client = await clientservice.GetClientByIdAsync(clientId);
        var landlords = await landLordService.GetLandlordsByClientIdAsync(clientId);

        if (client != null)
        {
            var editClient = new EditClientDto
            {
                Id = client.Id,
                FirstName = client.FirstName,
                LastName = client.LastName,
                Email = client.Email,
                Fax = client.Fax,
                Phone = client.Phone,
                CellPhone = client.CellPhone,
                ClientCode = client.ClientCode,
                Address_1 = client.Address_1,
                Address_2 = client.Address_2,
                City = client.City,
                State = client.State,
                ZipCode = client.ZipCode,
                LandLords = landlords
            };

            await LoadBuildings(clientId);
            await LoadTenants(clientId);
            saveEditlandlordList = landlords;
            editClientRef.Show(editClient);
        }
    }


    private async Task SetActiveTab(string tab)
    {
        activeTab = tab;

        if (clientIdForEdit != Guid.Empty)
        {
            if (tab == "building")
            {
                saveEditBuildingList.Clear();

                var landlords = await landLordService.GetLandlordsByClientIdAsync(clientIdForEdit);
                foreach (var landlord in landlords)
                {
                    var buildings = await apartmentService.GetBuildingsByLandlordIdAsync(landlord.Id);
                    saveEditBuildingList.AddRange(buildings);
                }
            }
            else if (tab == "tenant")
            {
                saveEditTenantList.Clear();

                var tenants = await tenantService.GetTenantsByClientIdAsync(clientIdForEdit);
                saveEditTenantList.AddRange(tenants);
            }

            StateHasChanged();
        }
    }







    // private async Task HandleCreate(CreateClientDto client)
    // {
    //     var result = await clientservice.AddClientAsync(client);
    //     if (result)
    //     {
    //         await createClientRef.HideAsync();
    //         clients = await clientservice.GetAllClientsAsync();

    //     }
    // }

    public async Task DeleteClient(Guid id)
    {
        bool isDeleted = await clientservice.DeleteClientAsync(id);

        if (isDeleted)
        {
        
            clients = await clientservice.GetAllClientsAsync();
            StateHasChanged();
        }
    }


}
