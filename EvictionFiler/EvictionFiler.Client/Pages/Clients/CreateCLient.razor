@using EvictionFiler.Application.DTOs.ApartmentDto
@using EvictionFiler.Application.DTOs.ClientDto
@using EvictionFiler.Application.DTOs.LandLordDto
@inject IJSRuntime JS

<style>
    :root {
        --bs-primary: #1F365D;
        --bs-warning: #D4A844;
        --bs-light: #F7F6F3;
    }

    body {
        background-color: var(--bs-light);
    }

    .offcanvas.show {
        transform: translateX(0%);
    }

    .offcanvas {
        transform: translateX(100%);
        width: 900px !important;
        transition: transform 0.5s ease-in-out;
    }

    .color-text {
        color: var(--bs-primary);
    }

    .form-control::placeholder {
        font-size: 0.9rem;
    }

    .input-group-text {
        background-color: var(--bs-light);
        color: var(--bs-primary);
        font-weight: 500;
    }

    .form-wrapper {
        transition: transform 0.5s ease, opacity 0.5s ease;
        will-change: transform, opacity;
    }

        /* .form-wrapper.hidden {
            transform: translateX(-100%);
            opacity: 0;
            pointer-events: none;
        } */

    .overlay-form {
        animation: slideIn 0.5s ease forwards;
        background-color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 0 10px rgba(0,0,0,0.05);
    }

    @@keyframes slideIn {
        from

    {
        opacity: 0;
        transform: translateX(100%);
    }

    to {
        opacity: 1;
        transform: translateX(0%);
    }

    }

    .form-wrapper.hidden {
        display: none !important;
    }
    .vertical-buttons button {
       /*  min-width: 100px; */
        text-align: center;
    }

    .vertical-tab-button {
        writing-mode: vertical-rl; /* vertical top-to-bottom */
        text-orientation: upright;
        background-color: #f0f2f5;
        color: #1F365D;
        font-weight: 700;
        font-size: 14px;
        border: none;
        padding: 12px 8px;
        border-radius: 10px;
        margin-bottom: 12px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    }

        .vertical-tab-button:hover {
            background-color: #1F365D;
            color: white;
            transform: translateY(-2px);
        }

    .active-vertical {
        background: linear-gradient(135deg, #1F365D, #2F4F7F);
        color: white;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }


  /*   .tab-button {
        background: transparent;
        color: #1F365D;
        border: 2px solid transparent;
        padding: 0.6rem 1rem;
        min-width: 120px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border-radius: 8px;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
    }

        .tab-button:hover {
            background: #1F365D;
            color: white;
            border-color: #1F365D;
            transform: translateY(-2px);
        }

    .active-tab {
        background: linear-gradient(135deg, #1F365D, #2F4F7F);
        color: white !important;
        border-color: #1F365D;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    } */

</style>
@using System.Collections.Generic

<div class="offcanvas offcanvas-end show border-start shadow bg-white"
     tabindex="-1" id="createClient"
     style="visibility:@(IsVisible ? "visible" : "hidden");"
     aria-labelledby="createUserLabel">

    <div class="offcanvas-header border-bottom">
        <h5 class="offcanvas-title fw-bold color-text" id="createUserLabel">Add New Client</h5>
        <button type="button" class="btn-close" @onclick="HideAsync" aria-label="Close"></button>
    </div>

    <div class="offcanvas-body p-0">
        <div class="d-flex align-items-center position-relative">
            <!-- CLIENT FORM -->
            <div class="form-wrapper @(activeTab != string.Empty ? "hidden" : "") flex-grow-1 p-3 pe-5">
               
            </div>

            <!-- Vertical Overlay Buttons -->
            <div class="vertical-buttons d-flex flex-column align-items-center position-absolute end-0 top-50 translate-middle-y @(IsVisible ? "" : "d-none")">
                <button class="vertical-tab-button @(activeTab == "landlord" ? "active-vertical" : "")" @onclick="@(() => SetActiveTab("landlord"))">LANDLORD</button>
                <button class="vertical-tab-button @(activeTab == "building" ? "active-vertical" : "")" @onclick="@(() => SetActiveTab("building"))">BUILDING</button>
            </div>
        </div>

        <!-- LANDLORD Overlay -->
        @if (activeTab == "landlord")
        {
            <div class="overlay-form overlay-landlord">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="color-text fw-bold mb-0">LANDLORD INFORMATION</h5>
                    <div>
                        <button class="btn btn-outline-secondary fw-semibold me-2" @onclick="@(() => SetActiveTab(string.Empty))">←</button>
                        <button class="btn bg-navy text-white" @onclick="ToggleLandlordForm">@GetToggleButtonText()</button>
                    </div>
                </div>

                @if (showLandlordForm)
                {
                    <EditForm Model="@landlord" OnValidSubmit="SubmitLandlordAsync">
                        <div class="mb-3"><label>Name</label><InputText class="form-control" @bind-Value="landlord.Name" /></div>
                        <div class="mb-3"><label>EIN/SSN</label><InputText class="form-control" @bind-Value="landlord.EINorSSN" /></div>
                        <div class="row">
                            <div class="col"><label>Phone</label><InputText class="form-control" @bind-Value="landlord.Phone" /></div>
                            <div class="col"><label>Email</label><InputText class="form-control" @bind-Value="landlord.Email" /></div>
                        </div>
                        <div class="mb-3"><label>Address</label><InputText class="form-control" @bind-Value="landlord.MaillingAddress" /></div>
                        <div class="row">
                            <div class="col"><label>Attorney</label><InputText class="form-control" @bind-Value="landlord.Attorney" /></div>
                            <div class="col"><label>Firm</label><InputText class="form-control" @bind-Value="landlord.Firm" /></div>
                        </div>
                        <button type="submit" class="btn bg-navy text-white mt-2">Save Landlord Info</button>
                    </EditForm>
                }

                <div style="max-height: 400px; overflow-y: auto; overflow-x: auto;">
                    <table class="table table-bordered mt-4" style="min-width: 1000px;">
                        <thead class="table-light">
                            <tr>
                                <th>Name</th>
                                <th>EIN</th>
                                <th>Phone</th>
                                <th>Email</th>
                                <th>Address</th>
                                <th>Attorney</th>
                                <th>Firm</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (landlordList.Any())
                            {
                                @foreach (var l in landlordList)
                                {
                                    <tr>
                                        <td>@l.Name</td>
                                        <td>@l.EINorSSN</td>
                                        <td>@l.Phone</td>
                                        <td>@l.Email</td>
                                        <td>@l.MaillingAddress</td>
                                        <td>@l.Attorney</td>
                                        <td>@l.Firm</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7" class="text-muted">No landlords added yet.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            </div>
        }

        <!-- BUILDING Overlay -->
        @if (activeTab == "building")
        {
            <div class="overlay-form overlay-building">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="color-text fw-bold mb-0">BUILDING INFORMATION</h5>
                    <div>
                        <button class="btn btn-outline-secondary fw-semibold me-2" @onclick="@(() => SetActiveTab(string.Empty))">←</button>
                        <button class="btn bg-navy text-white" @onclick="ToggleBuildingForm">@GetToggleButtonText()</button>
                    </div>
                </div>

                @if (showBuildingForm)
                {
                    <EditForm Model="@building" OnValidSubmit="SubmitBuildingAsync">
                        <div class="mb-3"><label>Apartment Code</label><InputText class="form-control" @bind-Value="building.ApartmentCode" /></div>
                        <div class="mb-3"><label>Premise Type</label><InputText class="form-control" @bind-Value="building.PremiseType" /></div>
                        <div class="mb-3"><label>Address Line 1</label><InputText class="form-control" @bind-Value="building.Address_1" /></div>
                        <div class="mb-3"><label>Address Line 2</label><InputText class="form-control" @bind-Value="building.Address_2" /></div>
                        <div class="row">
                            <div class="col"><label>City</label><InputText class="form-control" @bind-Value="building.City" /></div>
                            <div class="col"><label>State</label><InputText class="form-control" @bind-Value="building.State" /></div>
                        </div>
                        <div class="row">
                            <div class="col"><label>Country</label><InputText class="form-control" @bind-Value="building.Country" /></div>
                            <div class="col"><label>Zipcode</label><InputText class="form-control" @bind-Value="building.Zipcode" /></div>
                        </div>
                        <div class="mb-3"><label>MDR Number</label><InputText class="form-control" @bind-Value="building.MDR_Number" /></div>
                        <div class="mb-3"><label>Petitioner Interest</label><InputText class="form-control" @bind-Value="building.PetitionerInterest" /></div>
                        <button type="submit" class="btn bg-navy text-white mt-2">Save Building Info</button>
                    </EditForm>
                }

                <!-- Grid -->
                <div style="max-height: 400px; overflow-y: auto; overflow-x: auto;">
                    <table class="table table-bordered mt-4" style="min-width: 1000px;">
                    <thead><tr><th>Code</th><th>Premise</th><th>Address1</th><th>Address2</th><th>City</th><th>State</th><th>Country</th><th>Zip</th><th>MDR</th><th>Interest</th></tr></thead>
                    <tbody>
                        @if (apartmentList.Any())
                        {
                            @foreach (var b in apartmentList)
                            {
                                <tr>
                                    <td>@b.ApartmentCode</td><td>@b.PremiseType</td><td>@b.Address_1</td><td>@b.Address_2</td>
                                    <td>@b.City</td><td>@b.State</td><td>@b.Country</td><td>@b.Zipcode</td>
                                    <td>@b.MDR_Number</td><td>@b.PetitionerInterest</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr><td colspan="10" class="text-muted">No buildings added yet.</td></tr>
                        }
                    </tbody>
                </table>
                </div>
            </div>
        }
    </div>

    <!-- Footer -->
    <div class="sticky-footer bg-white border-top p-3 d-flex justify-content-end gap-2">
        <button class="btn btn-outline-secondary px-4 fw-semibold" @onclick="HideAsync">Cancel</button>
        <button class="btn bg-navy text-white px-4 fw-semibold" @onclick="SubmitClientAsync">Submit</button>
    </div>
</div>

@code {
    [Parameter] public CreateClientDto createClient { get; set; } = new();
    [Parameter] public EventCallback<CreateClientDto> Submit { get; set; }

    private bool IsVisible { get; set; }
    private string activeTab = string.Empty;

    private bool showLandlordForm = false;
    private bool showBuildingForm = false;

    private CreateLandLordDto landlord = new();
    private AddApartment building = new();

    private List<CreateLandLordDto> landlordList = new();
    private List<AddApartment> apartmentList = new();

    public void Show(CreateClientDto model)
    {
        createClient = model;
        IsVisible = true;
        StateHasChanged();
    }

    public async Task HideAsync()
    {
        
        IsVisible = false;
      
        activeTab = string.Empty;
        showLandlordForm = false;
        showBuildingForm = false;
        StateHasChanged();
    }


    private void SetActiveTab(string tab) => activeTab = tab;

    private void ToggleLandlordForm() => showLandlordForm = !showLandlordForm;

    private void ToggleBuildingForm() => showBuildingForm = !showBuildingForm;

    private string GetToggleButtonText() => (activeTab == "landlord" && showLandlordForm) || (activeTab == "building" && showBuildingForm)
        ? "Cancel"
        : "Add New";

    private Task SubmitLandlordAsync()
    {
        landlordList.Add(landlord);
        landlord = new();
        showLandlordForm = false;
        return Task.CompletedTask;
    }

    private Task SubmitBuildingAsync()
    {
        apartmentList.Add(building);
        building = new();
        showBuildingForm = false;
        return Task.CompletedTask;
    }

    private Task SubmitClientAsync()
    {
     
        return Submit.InvokeAsync(createClient);
    }
}

