@page "/clients"
@using EvictionFiler.Application.DTOs.ApartmentDto
@using EvictionFiler.Application.DTOs.ClientDto
@using EvictionFiler.Application.DTOs.LandLordDto
@using EvictionFiler.Application.DTOs.PaginationDto
@using EvictionFiler.Application.DTOs.TenantDto
@using EvictionFiler.Application.Interfaces.IServices
@using EvictionFiler.Client.Jwt
@using EvictionFiler.Client.SpinnerService
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims
@inject JwtAuthStateProviders _authStateProvider
@inject SpinnerService Spinnerservice
 @inject IClientService clientservice
 @inject ILandlordSevice landLordService
@inject IBuildingService buildingService

@inject ITenantService tenantService
@inject NavigationManager navManager
@rendermode InteractiveAuto
<PageTitle>Clients</PageTitle>
<style>
    .status-active {
        background-color: rgba(25,135,84,1);
        color: #fff;
        padding: 2px 7px;
        border-radius: 1rem;
        font-size: 12px;
    }

    .container {
        /* background-color: #F2F0EC; */
        border: solid 1px #F2F0EC;
        box-shadow: 0 15px 20px #F2F0EC !important;
    }

    .btn-primary {
        background-color: #1F365D;
        border-color: #1F365D;
    }

        .btn-primary:hover {
            background-color: #162646;
            border-color: #162646;
        }

    .page-link {
        color: #1F365D;
    }

        .page-link.active,
        .page-item.active .page-link {
            background-color: #1F365D;
            border-color: #1F365D;
            color: #F2F0EC;
        }

    table.table thead th {
        color: #1F365D;
        background: #F2F0EC;
        margin-bottom: 0px !important;
    }

    h5, p, small {
        color: #1F365D;
    }

    .adv-btn {
        color: #1F365D;
        background: #FFF;
    }

        .adv-btn:hover {
            color: #FFF;
            background: #1F365D;
        }

        .adv-btn.active-adv-btn {
            background-color: #1F365D !important;
            color: #F2F0EC !important;
            border-color: #1F365D !important;
        }


    .table-responsive {
        overflow-x: auto; /* Enable horizontal scroll */
        position: relative;
    }

    table th, table td {
        white-space: nowrap;
    }

    th.sticky, td.sticky {
        position: sticky;
        right: 0;
        background: #F2F0EC; /* Same as container background */
        z-index: 2;
        text-align: center;
    }

    /* Make sure header sticky stays above other cells */
    th.sticky {
        z-index: 3;
    }
</style>

<body class="p-4">
    <nav aria-label="breadcrumb" class="mt-2">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/dashboard">Home</a></li>
            <li class="breadcrumb-item ">Clients</li>

        </ol>
    </nav>

    <div class="container p-4 rounded shadow-sm bg-white">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h5 class="m-0 fw-bold text-navy" style="font-size:14px">Manage Clients</h5>
        </div>

        <!-- Add Button + Search -->
        <div class="g-2 mb-3 d-flex justify-content-between align-items-center">
            <button class="btn bg-navy text-white" style="font-size:14px; background:#1F365D;" @onclick="ShowCreateClient">
                <i class="fa fa-plus me-1"></i> Add New
            </button>
            <div class="position-relative">
                <input class="form-control border-navy  text-navy" style="border-color: #020336 ; font-size:14px" placeholder="Search.." @bind="searchTerm" @oninput="OnSearchChanged" />
                <button class="btn position-absolute top-50 end-0 translate-middle-y text-navy" type="button">
                    <i class="fa fa-search"></i>
                </button>
            </div>
        </div>

        <div class="table-responsive mb-3">
            <table class="table table-hover align-middle text-center" style="font-size:14px">
                <thead>
                    <tr>
                        <th>ClientCode</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Fax</th>
                        <th>Address</th>
                        <th>Type</th>
                        @if (isAdmin)
                        {
                            <th>CreatedBy </th>
                        }
                        <th>Status</th>
                        <th class="sticky">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (pagedClients != null && pagedClients.Items.Any())
                    {
                        foreach (var client in pagedClients.Items)
                        {
                            <tr>
                                <td>@(client.ClientCode ?? "-")</td>
                                <td>@(string.IsNullOrWhiteSpace(client.FirstName + client.LastName) ? "-" : client.FirstName + " " + client.LastName)</td>
                                <td>@(string.IsNullOrWhiteSpace(client.Email) ? "-" : client.Email)</td>
                                <td>@(string.IsNullOrWhiteSpace(client.Phone) ? "-" : client.Phone)</td>
                                <td>@(string.IsNullOrWhiteSpace(client.Fax) ? "-" : client.Fax)</td>

                                <td>
                                    @{
                                        var parts = new List<string>();

                                        if (!string.IsNullOrWhiteSpace(client.Address1)) parts.Add(client.Address1);
                                        if (!string.IsNullOrWhiteSpace(client.Address2)) parts.Add(client.Address2);
                                        if (!string.IsNullOrWhiteSpace(client.City)) parts.Add(client.City);
                                        if (!string.IsNullOrWhiteSpace(client.StateName)) parts.Add(client.StateName);
                                        if (!string.IsNullOrWhiteSpace(client.ZipCode)) parts.Add(client.ZipCode);

                                        var fullAddress = parts.Any() ? string.Join(", ", parts) : "-";
                                    }
                                    @fullAddress
                                </td>
                                <td>@(client.ClientTypeName ?? "-")</td>
                                @if (isAdmin)
                                {

                                    <td>@(client?.CreatedByName ?? "-")</td>
                                }

                                <td>
                                    @(client.IsActive == true
                                        ? "Active"
                                        : client.IsDeleted == true
                                        ? "InActive"
                                        : "Not Set")
                                </td>


                                <td class="sticky">
                                    <i class="fa-solid fa-pen-to-square text-navy me-3 " @onclick="() => ShowAddEditClient(client.Id)" style="cursor: pointer;" title="Edit"></i>
                                    <i class="fa-solid fa-trash-can text-danger " @onclick=" ()=>DeleteClient(client.Id ,isAdmin)" style="cursor: pointer;" title="Delete"></i>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="text-muted">No clients found.</td>
                        </tr>
                    }
                </tbody>
            </table>


        </div>
        <!-- Pagination -->
        @if (pagedClients != null && pagedClients.TotalCount > 0)
        {
            <div class="d-flex justify-content-between mt-3">
                <small>
                    Showing @(((currentPage - 1) * pageSize) + 1)
                    to @(Math.Min(currentPage * pageSize, pagedClients.TotalCount))
                    of @pagedClients.TotalCount entries
                </small>
                <nav>
                    <ul class="pagination mb-0">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">←</button>
                        </li>
                        @for (int i = 1; i <= Math.Ceiling((double)pagedClients.TotalCount / pageSize); i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                            </li>
                        }
                        <li class="page-item @(currentPage == Math.Ceiling((double)pagedClients.TotalCount / pageSize) ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">→</button>
                        </li>
                    </ul>
                </nav>
            </div>
        }

    </div>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050;">
            <div class="toast show text-white bg-success">
                <div class="d-flex">
                    <div class="toast-body">
                        @successMessage
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto"
                            @onclick="() => successMessage = string.Empty"></button>
                </div>
            </div>
        </div>
    }


    @if (_showCreateClient)
    {
        <CreateCLient createClient="_editClientModel" OnClose="HandleCloseCreateClient" />
    }

    @if (_showEditClient)
    {
        <EditClient editClient="_editClientModel"
                    Landlords="saveEditlandlordList"
                    Buildings="saveEditBuildingList"
                    Tenants="saveEditTenantList"
                    OnClose="HandleCloseEditClient" />
    }



</body>

@code {
    [Parameter]
    public Guid Id { get; set; }
    private bool _showCreateClient = false;
    private bool _showEditClient = false;
    private bool isLoading = true;
    private Guid? clientIdForEdit;
    private List<EditToLandlordDto> saveEditlandlordList = new();
    private List<EditToBuildingDto> saveEditBuildingList = new();
    private List<EditToTenantDto> saveEditTenantList = new();
    private string successMessage;
    private CreateToClientDto _clientModel;
    private EditToClientDto _editClientModel = new();

    private List<EditToClientDto> clients = new();
    private string activeTab = string.Empty;
    private PaginationDto<EditToClientDto> pagedClients;
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchTerm = "";

    private string? loggedInUserId;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        Spinnerservice.Show();
        //isLoading = true;
        var uri = new Uri(navManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("success", out var isSuccess) && isSuccess == "true")
        {
            successMessage = "Client submitted successfully!";
            StateHasChanged();

            await Task.Delay(2000);
            successMessage = string.Empty;
            StateHasChanged();

            navManager.NavigateTo("/clients", forceLoad: false);
        }

        // ✅ Edit success message
        else if (query.TryGetValue("edit", out var isEdit) && isEdit == "true")
        {
            successMessage = "Client updated successfully!";
            StateHasChanged();

            await Task.Delay(2000);
            successMessage = string.Empty;
            StateHasChanged();

            navManager.NavigateTo("/clients", forceLoad: false);
        }

        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            loggedInUserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            isAdmin = user.Claims.Any(c => c.Type == ClaimTypes.Role && c.Value == "Admin");
        }


        await Task.Delay(1000);
        await LoadClients();
        //isLoading = false;
        Spinnerservice.Hide();
    }


    private async Task LoadClients()
    {
        if (!string.IsNullOrEmpty(loggedInUserId))
        {
            pagedClients = await clientservice.GetAllClientsAsync(
                currentPage,
                pageSize,
                searchTerm,
                loggedInUserId,
                isAdmin
            );
        }
    }

    private async Task OnPageChanged(int newPage)
    {
        currentPage = newPage;
        await LoadClients();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
        await LoadClients();
    }


    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= Math.Ceiling((double)pagedClients.TotalCount / pageSize))
        {
            currentPage = page;
            await LoadClients();
        }
    }

    private void ShowCreateClient()
    {
        _clientModel = new CreateToClientDto();
        _showCreateClient = true;
    }


    private void HandleCloseCreateClient()
    {
        _showCreateClient = false;
    }

    private async Task LoadBuildings(Guid? clientId)
    {
        var landlords = await landLordService.GetLandlordsByClientIdAsync(clientId);
        saveEditBuildingList.Clear();

        foreach (var landlord in landlords)
        {
            var buildings = await buildingService.GetBuildingsByLandlordIdAsync(landlord.Id);
            if (buildings?.Any() == true)
            {
                saveEditBuildingList.AddRange(buildings);
            }
        }
    }

    private async Task LoadTenants(Guid? clientId)
    {
        saveEditTenantList.Clear();

        var landlords = await landLordService.GetLandlordsByClientIdAsync(clientId);

        foreach (var landlord in landlords)
        {
            var buildings = await buildingService.GetBuildingsByLandlordIdAsync(landlord.Id);

            foreach (var building in buildings)
            {
                // 🟢 IMPORTANT: Ye method tenantService ka hona chahiye:
                var tenants = await tenantService.GetTenantsByClientIdAsync(building.Id);

                if (tenants != null && tenants.Any())
                {
                    saveEditTenantList.AddRange(tenants);
                }
            }
        }
    }

    private async Task ShowAddEditClient(Guid? clientId = null)
    {
        clientIdForEdit = clientId;

        var client = await clientservice.GetClientByIdAsync(clientId);
        var landlords = await landLordService.GetLandlordsByClientIdAsync(clientId);
        saveEditlandlordList = landlords;
        if (client != null)
        {
            _editClientModel = new EditToClientDto
                {
                    Id = client.Id,
                    FirstName = client.FirstName,
                    LastName = client.LastName,
                    Email = client.Email,
                    Fax = client.Fax,
                    Phone = client.Phone,
                    CellPhone = client.CellPhone,
                    ClientCode = client.ClientCode,
                    Address1 = client.Address1,
                    Address2 = client.Address2,
                    City = client.City,
                    StateId = client.StateId,
                    StateName = client.StateName,
                    ZipCode = client.ZipCode,
                    editLandLords = landlords,

                };

            await LoadBuildings(clientId);
            await LoadTenants(clientId);

            _showEditClient = true;
        }
    }


    private void HandleCloseEditClient()
    {
        _showEditClient = false;
    }

    private async Task SetActiveTab(string tab)
    {
        activeTab = tab;

        if (clientIdForEdit != Guid.Empty)
        {
            if (tab == "building")
            {
                saveEditBuildingList.Clear();

                var landlords = await landLordService.GetLandlordsByClientIdAsync(clientIdForEdit);
                foreach (var landlord in landlords)
                {
                    var buildings = await buildingService.GetBuildingsByLandlordIdAsync(landlord.Id);
                    saveEditBuildingList.AddRange(buildings);
                }
            }
            else if (tab == "tenant")
            {
                saveEditTenantList.Clear();

                var tenants = await tenantService.GetTenantsByClientIdAsync(clientIdForEdit);
                saveEditTenantList.AddRange(tenants);
            }

            StateHasChanged();
        }
    }


    public async Task DeleteClient(Guid id, bool isAdmin)
    {
        Spinnerservice.Show();
        bool isDeleted = await clientservice.DeleteClientAsync(id, isAdmin);

        if (isDeleted)
        {

            pagedClients = await clientservice.GetAllClientsAsync(currentPage, pageSize, searchTerm, loggedInUserId, isAdmin);
            StateHasChanged();
        }
        Spinnerservice.Hide();
    }


}
