@page "/Calander"
@using EvictionFiler.Application.DTOs
@using EvictionFiler.Application.DTOs.CalanderDto
@using EvictionFiler.Domain.Entities.Master
@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@using EvictionFiler.Application.DTOs
@using EvictionFiler.Application.DTOs.ApartmentDto
@using EvictionFiler.Application.DTOs.ClientDto
@using EvictionFiler.Application.DTOs.LandLordDto
@using EvictionFiler.Application.DTOs.LegalCaseDto
@using EvictionFiler.Application.DTOs.PaginationDto
@using EvictionFiler.Application.DTOs.TenantDto
@using EvictionFiler.Application.Interfaces.IRepository.MasterRepository
@using EvictionFiler.Application.Interfaces.IServices
@using EvictionFiler.Client.Components.Cases
@using EvictionFiler.Client.Jwt
@using EvictionFiler.Domain.Entities.Master
@using Blazored.Typeahead


@inject ICaseTypeRepository CaseTypeRepository
@inject ICalanderService CalanderService

@using EvictionFiler.Client.SpinnerService
@using EvictionFiler.Domian.Enums
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject SpinnerService spinnerservice
@using Microsoft.AspNetCore.Components.Authorization;
@using EvictionFiler.Domain.Entities

@using System.Security.Claims
@inject JwtAuthStateProviders _authStateProvider

<style>
    /* ===== EvictionFiler Light Theme (cards + rounded + blue/yellow accents) ===== */
    :root { --bg: #f5f7fb; --card: #ffffff; --ink: #0e1726; --muted: #5c6a82; --line: #e5eaf3; --chip: #f1f4fa; --accent: #2463eb; /* blue */ --accent-2: #0ea5e9; /* teal-blue */ --accent-ink: #0b1a34; --warn: #f5b500; /* golden */ --good: #16a34a; --shadow: 0 2px 10px rgba(8, 15, 35, .06); --radius: 16px; }

    * { box-sizing: border-box }

    html,
    body { height: 100% }

    body { margin: 0; background: var(--bg); color: var(--ink); font: 500 15px/1.45 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial; }

    .wrap { max-width: 1280px; margin: auto; padding: 22px }

    /* Top bar */
    header { display: flex; gap: 14px; align-items: center; justify-content: space-between; flex-wrap: wrap; margin: 4px 0 16px }

    .brand { display: flex; align-items: center; gap: 12px }

    .logo { width: 34px; height: 34px; border-radius: 8px; background: linear-gradient(135deg, #0b3a91, #2b6be6) }

    h1 { font-size: 20px; margin: 0 }

    .sub { color: var(--muted) }

    /* Card */
    .card { background: var(--card); border: 1px solid var(--line); border-radius: var(--radius); box-shadow: var(--shadow) }

    .card-head { display: flex; justify-content: space-between; align-items: center; padding: 12px 14px; border-bottom: 1px solid var(--line); background: #fbfdff; border-top-left-radius: var(--radius); border-top-right-radius: var(--radius); color: #3b4a66 }

    .card-body { padding: 14px }

    /* Filters */
    .panel .filters { display: grid; grid-template-columns: repeat(6, minmax(170px, 1fr)); gap: 12px }

    .control label { display: block; font-size: 12px; text-transform: uppercase; letter-spacing: .06em; color: var(--muted); margin: 2px 0 6px }

    .control input,
    .control select { width: 100%; background: #fff; color: var(--ink); border: 1px solid var(--line); border-radius: 12px; padding: 10px 12px; outline: none; box-shadow: 0 1px 0 rgba(10, 20, 40, .02); }

    .control input:focus,
    .control select:focus { border-color: #cdd7ee; box-shadow: 0 0 0 3px rgba(36, 99, 235, .08) }

    /* Buttons */
    .bar { display: flex; gap: 10px; align-items: center; flex-wrap: wrap; margin-top: 12px }

    .btn { background: var(--accent); color: #fff; border: 0; border-radius: 12px; padding: 10px 14px; font-weight: 700; cursor: pointer; box-shadow: 0 2px 6px rgba(36, 99, 235, .22) }

    .btn.secondary { background: #fff; color: var(--accent-ink); border: 1px solid var(--line); box-shadow: none }

    .btn.ghost { background: var(--chip); color: var(--accent-ink); border: 1px dashed var(--line); box-shadow: none }

    .badge { display: inline-flex; align-items: center; gap: 8px; background: #fff; border: 1px solid var(--line); padding: 8px 10px; border-radius: 12px; color: var(--muted) }

    /* Stats */
    .stats { display: flex; gap: 12px; flex-wrap: wrap }

    .stat { display: flex; align-items: center; gap: 10px; background: #fff; border: 1px solid var(--line); border-radius: 12px; padding: 8px 12px; color: var(--muted); box-shadow: var(--shadow) }

    .stat b { color: var(--ink) }

    /* Table */
    .table-wrap { overflow: auto; max-height: 70vh }

    .table { width: 100%; border-collapse: separate; border-spacing: 0 }

    .table thead th { position: sticky; top: 0; background: #fbfdff; color: #7383a1; text-align: left; padding: 12px; border-bottom: 1px solid var(--line); font-size: 12px; text-transform: uppercase; letter-spacing: .06em; }

    .table tbody td { padding: 12px; border-bottom: 1px solid var(--line); vertical-align: top }

    .caption { font-weight: 700 }

    .label { display: inline-block; padding: 3px 10px; border-radius: 999px; font-size: 12px; background: #fff5d6; color: #8a6400; border: 1px solid #ffe9a3 }

    .label.holdover { background: #e8f0ff; color: #153e91; border-color: #d7e5ff }

    .label.np { background: #e6fbff; color: #055d66; border-color: #c8f5ff }

    /* Responsive */
    @@media (max-width:1100px) { .panel .filters
    { grid-template-columns: repeat(3, minmax(170px, 1fr)) }
    }

    @@media (max-width:640px) { .panel .filters
    { grid-template-columns: 1fr }

    .table .hide-sm { display: none }
    }

    /* Print */
    @@media print { body
    { background: #fff; color: #000 }

    header,
    .panel .bar .btn.secondary,
    .panel .bar .btn.ghost { display: none !important }

    .wrap { max-width: none; padding: 0 }

    .card { border: 0; box-shadow: none }

    .table thead th { background: #fff; color: #000; border-color: #ccc }

    .table tbody td { border-color: #ddd }

    .label { border-color: #ccc; background: #fff; color: #000 }
    }

    /* Optional strict 5 rows per page */
    @@media print { body .per5 .table tbody tr
    { page-break-inside: avoid }

    body.per5 .table tbody tr:nth-child(5n) { page-break-after: always }
    }
</style>

<div class="wrap">
    <header>
        <div class="brand">
            <div class="logo"></div>
            <h1>HousingCourtFiler • Court Calendars</h1>
        </div>
        <div class="sub">Generate, filter, and print housing court calendars</div>
    </header>

    <!-- Filters -->
    <section class="card panel p-3">
        <div class="card-head mb-3 d-flex gap-2">
            <div class="badge ">Case Search & Filters</div>
            <div class="badge">New Action</div>
        </div>
        <div class="card-body">
            <EditForm EditContext="_editContext">
                <div class="row g-3">
                    <div class="col-md-2">
                        <label for="f-county" class="form-label">County</label>
                        <InputSelect class="form-select" @bind-Value="calanderDto.CountyId">
                            <option value="">-- Select type --</option>
                            @foreach (var l in CountyList)
                            {
                                <option value="@l.Id">@l.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-2">
                        <label for="f-from" class="form-label" >Date From</label>
                        <InputDate  id="f-from" class="form-control" @bind-Value="calanderDto.DateFrom" />
                    </div>
                    <div class="col-md-2">
                        <label for="f-to" class="form-label">Date To</label>
                        <InputDate id="f-from" class="form-control" @bind-Value="calanderDto.DateTo" />
                    </div>
                    <div class="col-md-2">
                        <label for="f-part" class="form-label">Court Part</label>
                        <InputSelect class="form-select" @bind-Value="calanderDto.CourtPartId">
                            <option value="">-- Select type --</option>
                            @foreach (var l in CourtPartList)
                            {
                                <option value="@l.Id">@l.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="col-md-2">
                        <label for="f-room" class="form-label">Room</label>
                        <InputText id="f-from" class="form-control" placeholder="Enter Room" @bind-Value="calanderDto.Room" />
                    </div>
                    <div class="col-md-2">
                        <label for="f-type" class="form-label">Case Type</label>
                        <InputSelect class="form-select" @bind-Value="calanderDto.CaseTypeId">
                            <option value="">-- Select type --</option>
                            @foreach (var l in CaseTypeList)
                            {
                                <option value="@l.Id">@l.Name</option>
                            }
                        </InputSelect>
                    </div>

                </div>
                <div class="row mt-2 g-3">
                    <div class="col-12">
                        <div class="row">
                            <div class="col-md-2">
                                <label for="f-judge" class="form-label">Judge</label>
                                <InputText id="f-from" class="form-control" placeholder="Enter Judge" @bind-Value="calanderDto.Judge" />
                            </div>
                            <div class="col-md-2">
                                <label for="f-status" class="form-label">Status</label>
                                <InputSelect class="form-select" @bind-Value="calanderDto.CaseStatusId">
                                    <option value="">-- Select type --</option>
                                    @foreach (var l in CaseStatusList)
                                    {
                                        <option value="@l.Id">@l.Name</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="col-md-3">
                                <label for="f-q" class="form-label">Search</label>
                                <InputText id="f-from" class="form-control" @bind-Value="calanderDto.Caption" />
                            </div>

                            <div class="col-md-5 d-flex align-items-center">
                                <div class="control">
                                    <label>5 Rows per printed page</label>
                                    <div class="switch"><input id="f-per5" type="checkbox"><span class="sub">Strict page breaks</span></div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="mt-4 d-flex gap-2 flex-wrap align-items-center bar">
                    <button type="button" class="btn btn-primary" id="btnGenerate" @onclick="SubmitAsync">Generate</button>
                    <button type="reset" class="btn secondary" id="btnReset">Reset</button>
                    <button type="button" class="btn secondary" id="btnPrint">Print</button>
                    <button type="button" class="btn secondary" id="btnExport">Export CSV</button>
                    <span class="ms-auto text-muted" id="countInfo">0 results</span>
                </div>
            </EditForm>
        </div>
    </section>


    <!-- Results -->
    <section class="card" style="margin-top:14px">
        <div class="card-head">
            <div class="stats">
                <div class="stat"><span>Hearings Today:</span> <b id="statToday">0</b></div>
                <div class="stat"><span>This Week:</span> <b id="statWeek">0</b></div>
                <div class="stat"><span>Selected Range:</span> <b id="statRange">0</b></div>
            </div>
            <div class="sub" id="printMeta"></div>
        </div>
        <div class="card-body table-wrap">
            <table class="table" id="table">
                <thead>
                    <tr>
                        <th>County</th>
                        <th class="hide-sm">Date</th>
                        <th>Court Part</th>
                        <th>Room</th>
                        <th>Caption</th>
                        <th>Index #</th>
                        <th>Time</th>
                        <th>Case Type</th>
                        <th class="hide-sm">Judge</th>
                        <th>Last Action</th>
                    </tr>
                </thead>
                <tbody id="tbody">
                    @if (CourtCases != null && CourtCases.Any())
                    {
                        foreach (var c in CourtCases)
                        {
                            <tr>
                                <td>@c.CountyName</td>
                                <td>@(c.DateFrom.ToString("yyyy-MM-dd") ?? "")</td>
                                <td>@c.CountyId</td>
                                <td>@c.Room</td>
                                <td>@c.Caption</td>
                                <td>LT-310359-25/QU</td>
                                <td>09:30</td>
                                <td>@c.CaseTypeName</td>
                                <td>@c.Judge</td>
                                <td>@c.CaseStatusName</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr><td colspan="10" class="text-center">No data available</td></tr>
                    }
                </tbody>

            </table>
        </div>
    </section>
</div>



@code {

    private CalanderDto calanderDto = new CalanderDto();

    private EditContext _editContext;
    private ValidationMessageStore _messages;  
    private List<CaseType> CaseTypeList = new();
    private List<CourtPart> CourtPartList = new();
    private List<County> CountyList = new();
    private List<CaseStatus> CaseStatusList = new();
    private string? loggedInUserId;
    private bool isAdmin = false;

    private List<CalanderDto> CourtCases { get; set; }


    protected override async Task OnInitializedAsync()
    {
        calanderDto = new CalanderDto();
        calanderDto.DateFrom = DateTime.Now;
        calanderDto.DateTo = DateTime.Now;
        _editContext = new EditContext(calanderDto);
        _messages = new ValidationMessageStore(_editContext);


        CaseTypeList = await CaseTypeRepository.GetAllCaseType();
        CaseStatusList = await CaseTypeRepository.GetAllCaseStatus();
        CountyList = await CaseTypeRepository.GetAllCounty();
        CourtPartList = await CaseTypeRepository.GetAllCourtPart();
        // legalcaseDto.ClientId = Guid.Parse(ClientId);

        CourtCases = await CalanderService.GetAllCalanderAsync();

        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            loggedInUserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            isAdmin = user.Claims.Any(c => c.Type == ClaimTypes.Role && c.Value == "Admin");
        }
    }

    private async Task SubmitAsync()
    {
        spinnerservice.Show();
        if (calanderDto == null)
            return;


        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userIdClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userIdClaim) && Guid.TryParse(userIdClaim, out Guid userGuid))
        {
            calanderDto.CreatedBy = userGuid;
        }
        else
        {
            // unauthenticated user
            calanderDto.CreatedBy = Guid.Empty;
        }

        // Save the full nested object
        var isSaved = await CalanderService.GenrateCalander(calanderDto);
        if (isSaved)
        {
            Navigation.NavigateTo("/Calander", true);
        }
    }


}




