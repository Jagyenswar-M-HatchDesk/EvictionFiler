
@using EvictionFiler.Application.DTOs
@using EvictionFiler.Application.DTOs.FormTypeDto
@using EvictionFiler.Application.DTOs.UserDto
@using EvictionFiler.Application.Interfaces.IRepository
@using EvictionFiler.Application.Interfaces.IRepository.MasterRepository
@using EvictionFiler.Application.Interfaces.IServices
@using EvictionFiler.Client.SpinnerService
@using EvictionFiler.Domain.Entities.Master
@using Radzen.Blazor
@using Syncfusion.Blazor.RichTextEditor

@inject ICaseTypeRepository CaseTypeRepository
@inject ICategoryRepository CategoryRepository
@inject IManageFormService ManageFormService
@inject SpinnerService spinnerservice
@inject NavigationManager Navigation

<style>
    .offcanvas.show {
        transform: translateX(0%);
    }

    .offcanvas {
        transform: translateX(100%);
        width: 900px !important;
    }

    .color-text {
        color: #1F365D;
    }

    .required-label::after {
        content: " *";
        color: red;
    }

    /* Modal Content Styling */
    .modal-dialog {
        max-width: 900px;
    }

    .modal-content {
        border-radius: 10px;
        padding: 10px;
    }

    .modal-body {
        max-height: 500px;
        overflow-y: auto;
    }
</style>

<div class="offcanvas offcanvas-end show border-start shadow bg-white"
     tabindex="-1" id="createClient"
     aria-labelledby="createUserLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="createUserLabel">Add New Form</h5>
        <button type="button" class="btn-close text-reset" @onclick="HideAsync"></button>
    </div>

    <div class="offcanvas-body">
        <EditForm Model="@createForm" OnValidSubmit="SubmitFormAsync">
            <DataAnnotationsValidator />

            <div class="row mb-3">
                <div class="col-md-5">
                    <label class="form-label color-text required-label">Form type</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fa fa-user color-text"></i></span>
                        <InputText class="form-control" @bind-Value="createForm.Name" placeholder="Enter Form Name" />
                    </div>
                    <ValidationMessage For="@(() => createForm.Name)" />
                </div>

                <div class="mb-4 col-md-3">
                    <label class="form-label color-text">Case type</label>
                    <select class="form-select" @bind="createForm.CaseTypeId">
                        <option value="">--  Select Type --</option>
                        @foreach (var caseType in CaseTypeList)
                        {
                            <option value="@caseType.Id">@caseType.Name</option>
                        }
                    </select>
                    @* <ValidationMessage For="@(() => createForm.CaseTypeId)" /> *@

                    
                </div>
                <div class="mb-4 col-md-4">
                    <label class="form-label color-text required-label">Category</label>
                    <select class="form-select" @bind="createForm.CategoryId">
                        <option value="">--  Select Category --</option>
                        @foreach (var category in CategoryList)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => createForm.CategoryId)" />


                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-12">
                    <label class="form-label color-text">HTML</label>
                    <RadzenHtmlEditor @bind-Value="@createForm.HTML" style="height: 450px;" />
                </div>
            </div>

            <div class="d-flex justify-content-between">
                <button type="button" class="btn btn-secondary btn-lg" @onclick="ShowPreview">Preview</button>
                <button type="submit" class="btn btn-primary btn-lg">Submit</button>
            </div>
        </EditForm>
    </div>
</div>

<!-- Preview Modal -->
<!-- Preview Modal -->
@if (IsPreviewVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content shadow">
                <div class="modal-header">
                    <h5 class="modal-title">Add Form Preview</h5>
                    <button type="button" class="btn-close" @onclick="ClosePreview"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrWhiteSpace(createForm.HTML))
                    {
                        <div style="border:1px solid #ddd; padding:15px; border-radius:5px;">
                            @((MarkupString)createForm.HTML)
                        </div>
                    }
                    else
                    {
                        <p>No content available for preview.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="ClosePreview">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public FormAddEditViewModelDto createForm { get; set; } = new();
    [Parameter] public EventCallback OnClose { get; set; }

    private List<CaseType> CaseTypeList = new();
    private List<Category> CategoryList = new();
    private bool IsPreviewVisible { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        CaseTypeList = await CaseTypeRepository.GetAllCaseType();
        CategoryList = await CategoryRepository.GetAllCategory();
          

        // var defaultCaseType = CaseTypeList.FirstOrDefault(c => c.Name == "Common");
        // if (defaultCaseType != null)
        // {
        //     createForm.CaseTypeId = defaultCaseType.Id;
        // }
    }

    public async Task HideAsync()
    {
        await OnClose.InvokeAsync();
        StateHasChanged();
    }

    private async Task SubmitFormAsync()
    {
        spinnerservice.Show();

        if (createForm == null)
            return;

        var isSaved = await ManageFormService.CreateForm(createForm);
        if (isSaved)
        {
            Navigation.NavigateTo("/Drafting/non-payment-forms?success=true", true);
        }
    }

    private void ShowPreview()
    {
        IsPreviewVisible = true;
    }

    private void ClosePreview()
    {
        IsPreviewVisible = false;
    }
}
