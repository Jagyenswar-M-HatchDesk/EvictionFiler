@page "/Drafting/tenant-forms"
@using EvictionFiler.Application.DTOs
@using EvictionFiler.Application.DTOs.FormTypeDto
@using EvictionFiler.Application.DTOs.PaginationDto
@using EvictionFiler.Application.DTOs.UserDto
@using EvictionFiler.Application.Interfaces.IServices
@using EvictionFiler.Client.Pages.User
@using EvictionFiler.Domain.Entities
@inject IUserservices _userService
@using EvictionFiler.Client.SpinnerService
@inject SpinnerService Spinnerservice
@inject NavigationManager navManager
@inject IManageFormService ManageFormService


<PageTitle>Tenant Forms</PageTitle>


<!-- Bootstrap CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />

<style>
    .status-active {
        background-color: #28a745;
        color: #fff;
        padding: 2px 7px;
        border-radius: 1rem;
        font-size: 10px;
    }

    .container {
        /* background-color: #F2F0EC; */
        border: solid 1px #F2F0EC;
        box-shadow: 0 15px 20px #F2F0EC !important;
    }

    .btn-primary {
        background-color: #1F365D;
        border-color: #1F365D;
    }

        .btn-primary:hover {
            background-color: #162646;
            border-color: #162646;
        }

    .page-link {
        color: #1F365D;
    }

        .page-link.active,
        .page-item.active .page-link {
            background-color: #1F365D;
            border-color: #1F365D;
            color: #F2F0EC;
        }

    table.table thead th {
        color: #1F365D;
        background: #F2F0EC;
        margin-bottom: 0px !important;
    }

    h5, p, small {
        color: #1F365D;
    }

    .adv-btn {
        color: #1F365D;
        background: #FFF;
    }

        .adv-btn:hover {
            color: #FFF;
            background: #1F365D;
        }

        .adv-btn.active-adv-btn {
            background-color: #1F365D !important;
            color: #F2F0EC !important;
            border-color: #1F365D !important;
        }


    .table-responsive {
        overflow-x: auto; /* Enable horizontal scroll */
        position: relative;
    }

    table th, table td {
        white-space: nowrap;
    }

    th.sticky, td.sticky {
        position: sticky;
        right: 0;
        background: #F2F0EC; /* Same as container background */
        z-index: 2;
        text-align: center;
    }

    /* Make sure header sticky stays above other cells */
    th.sticky {
        z-index: 3;
    }
</style>
<style>
    .search-box {
        width: 100%;
        padding-right: 3rem; /* space for the button */
        padding-left: 1rem;
        /* border-radius: 1.5rem; */
        border: 2px solid #1F365D;
        background-color: #FFF; /* dark background */
        color: black;
        height: 2.5rem;
    }

        .search-box::placeholder {
            color: darkgrey;
        }

        .search-box:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.2);
            background: #c6d1e3;
        }

    .search-btn {
        position: absolute;
        right: 0.7rem;
        top: 50%;
        transform: translateY(-50%);
        border: none;
        background: none;
        color: #1F365D;
        cursor: pointer;
        padding: 0;
        font-size: 1.2rem;
    }

        .search-btn:hover {
            color: #1F365D;
        }
</style>


<body class="p-4">

    <div class="container p-4 rounded shadow-sm">

       

        <!-- Search Filters -->
        <div class="g-2 mb-3 d-flex justify-content-between align-items-center">
            <!-- Four default search boxes -->
            @* <button class="btn btn-primary" @onclick="ShowCreateform">Add New</button> *@
            <!-- Title Row -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h5 class="m-0">Tenant Forms</h5>
            </div>
            <div class="position-relative w-25">
                <input class="form-control border border-primary text-navy" placeholder="Search.." @bind="searchTerm" @oninput="OnSearchChanged" />
                <button class="search-btn" type="button">
                    <i class="fa fa-search"></i>
                </button>
            </div>

        </div>

        <!-- Data Table -->
        <div style="max-height: 400px; overflow-y: auto; overflow-x: auto;">
            <table class="table table-bordered mt-4" style="min-width: 800px;">
                <thead class="table-light">
                    <tr>
                        <th>Sl no</th>
                        <th>Form Type</th>
                        <th>Case Type</th>
                        
                        <th>Created Date</th>
                        @* <th class="sticky">Actions</th> *@
                    </tr>
                </thead>
                <tbody>
                    @if (pagedforms != null && pagedforms.Items.Any())
                    {
                        int index = 1;
                        @foreach (var form in pagedforms.Items)
                        {
                            <tr>
                                <td class="text-center">@index</td>
                                <td>@form.Name</td>
                                <td>@form.CaseTypeName</td>
                               
                                <td>@form.CreatedOn.ToString("dd/MM/yyyy")</td>

                            </tr>
                            index++;
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-muted text-center">No notices generated yet.</td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        @if (pagedforms != null && pagedforms.TotalCount > 0)
        {
            <div class="d-flex justify-content-between mt-3">
                <small>
                    Showing @(((currentPage - 1) * pageSize) + 1)
                    to @(Math.Min(currentPage * pageSize, pagedforms.TotalCount))
                    of @pagedforms.TotalCount entries
                </small>
                <nav>
                    <ul class="pagination mb-0">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">←</button>
                        </li>
                        @for (int i = 1; i <= Math.Ceiling((double)pagedforms.TotalCount / pageSize); i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                            </li>
                        }
                        <li class="page-item @(currentPage == Math.Ceiling((double)pagedforms.TotalCount / pageSize) ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">→</button>
                        </li>
                    </ul>
                </nav>
            </div>
        }


    </div>

</body>


@code {
    private FormAddEditViewModelDto FormDto = new();
    private string successMessage;
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchTerm = "";
    private PaginationDto<FormAddEditViewModelDto> pagedforms;

    protected override async Task OnInitializedAsync()
    {
        Spinnerservice.Show();

        await Task.Delay(1000);
        await LoadForms();
        Spinnerservice.Hide();
    }

    private async Task LoadForms()
    {
        pagedforms = await ManageFormService.GetAllTenantAsync(currentPage, pageSize, searchTerm);
    }



    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= Math.Ceiling((double)pagedforms.TotalCount / pageSize))
        {
            currentPage = page;
            await LoadForms();
        }
    }
    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
        await LoadForms();
    }

}








